%!PS-Adobe-1.0
%%Creator: /local/sparc/bin/newprinter
%%CreationDate: Mon Aug 20 09:00:18 1990
%%Pages: (atend)
%%DocumentFonts: Courier
/#copies 1 def
90 rotate
0 -11 72 mul translate
/showpage { gsave systemdict begin showpage end grestore } def
/s{show}bind def
/S{showpage}bind def
/Courier findfont 7 scalefont setfont
%%EndProlog
%%Page: 1 1
/m{18 exch moveto}bind def
756 m
(clpackage.language:)s 747.5 m
(Language package.)s 739.0 m
(Note: To get help on a keyword enclose it in quotes.  Keywords are starred.)s 730.5 m
(          intro - A brief introduction to IRAF)s 722.0 m
()s 713.5 m
(Language components:)s 705.0 m
()s 696.5 m
(          break * Break out of a loop)s 688.0 m
(           case * One setting of a switch)s 679.5 m
(       commands - A discussion of the syntax of IRAF commands)s 671.0 m
(        cursors - Graphics and image display cursors)s 662.5 m
(   declarations - Parameter/variable declarations)s 654.0 m
(        default * The default clause of a switch)s 645.5 m
(           else * Else clause of IF statement)s 637.0 m
(            for * C-style for loop construct)s 628.5 m
(             if * If statement )s 620.0 m
(           goto * Goto statement)s 611.5 m
(        logging - Discussion of CL logging)s 603.0 m
(           next * Start next iteration of a loop)s 594.5 m
(     parameters - Discussion of parameter attributes)s 586.0 m
(      procedure * Start a procedure script)s 577.5 m
(         return * Return from script with an optional value)s 569.0 m
(         switch * Multiway branch construct)s 560.5 m
(          while * While loop)s 552.0 m
()s 543.5 m
()s 535.0 m
(Builtin Commands and Functions:)s 526.5 m
()s 518.0 m
(         access - Test if a file exists)s 509.5 m
(           back - Return to the previous directory \(after a chdir\))s 501.0 m
(           beep - Send a beep to the terminal)s 492.5 m
(            bye - Exit a task or package)s 484.0 m
(          cache - Cache parameter files, or print the current cache list)s 475.5 m
(             cd - Change directory)s 467.0 m
(          chdir - Change directory)s 458.5 m
(             cl - Execute commands from the standard input)s 450.0 m
(          clbye - A cl followed by a bye \(used to save file descriptors\))s 441.5 m
(          clear - Clear the terminal screen)s 433.0 m
(         defpac - Test if a package is defined)s 424.5 m
(         defpar - Test if a parameter is defined)s 416.0 m
(        deftask - Test if a task is defined)s 407.5 m
(         dparam - Dump a pset as a series of task.param=value assignments)s 399.0 m
(           edit - Edit a text file)s 390.5 m
(       ehistory - Edit history file to re-execute commands)s 382.0 m
(         envget - Get the string value of an environment variable)s 373.5 m
(         eparam - Edit parameters of a task)s 365.0 m
(          error - Print error code and message and abort)s 356.5 m
(      flprcache - Flush the process cache)s 348.0 m
(         fprint * Print a line into a parameter)s 339.5 m
(          fscan * Scan a list)s 331.0 m
(         gflush - Flush any buffered graphics output)s 322.5 m
(       hidetask - Make a task invisible to the user)s 314.0 m
(        history - Display  commands previously executed)s 305.5 m
(           jobs - Display status of background jobs)s 297.0 m
(           keep - Make recent set, task, etc. declarations permanent)s 288.5 m
(           kill - Kill a background job)s 280.0 m
(         logout - Log out of the CL)s 271.5 m
(         lparam - List the parameters of a task)s 263.0 m
(       mathfcns - Mathematical routines)s 254.5 m
(         mktemp - Make a temporary \(unique\) file name)s 246.0 m
(           osfn - Return the host system equivalent of an IRAF filename)s 237.5 m
(        package - Define a new package, or print the current package names)s 229.0 m
(        prcache - Show process cache, or lock a process into the cache)s 220.5 m
(          print - Format and print a line on the standard output)s 212.0 m
(         putlog - Put a message to the logfile)s 203.5 m
(          radix - Encode a number in the specified radix)s 
/m{410 exch moveto}bind def
756 m
(       redefine - Redefine a task)s 747.5 m
(          reset - Reset the value of an environment variable)s 739.0 m
(           scan * Scan the standard input)s 730.5 m
(        service - Service a query from a background job)s 722.0 m
(            set - Set an environment variable)s 713.5 m
(           show - Show an environment variable)s 705.0 m
(          sleep - Hibernate for a specified time)s 696.5 m
(        strings - String manipulation routines)s 688.0 m
(           stty - Set/show terminal characteristics)s 679.5 m
(           task - Define a new task)s 671.0 m
(           time - Print the current time)s 662.5 m
(        unlearn - Restore the default parameters for a task or package)s 654.0 m
(         update - Update a task's parameters \(flush to disk\))s 645.5 m
(           wait - Wait for all background jobs to complete)s 637.0 m
()s S
%%Page: 2 2
/m{18 exch moveto}bind def
756 m
()s 747.5 m
(ACCESS \(Feb86\)                  language                  ACCESS \(Feb86\))s 739.0 m
()s 730.5 m
()s 722.0 m
()s 713.5 m
(NAME)s 705.0 m
(    access -- test whether a file exists)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(USAGE)s 671.0 m
(    bool = access \(filename\))s 662.5 m
(    )s 654.0 m
(    )s 645.5 m
(PARAMETERS)s 637.0 m
(    )s 628.5 m
(    filename)s 620.0 m
(        The name of the file whose existence is to be tested.)s 611.5 m
(    )s 603.0 m
(    )s 594.5 m
(DESCRIPTION)s 586.0 m
(    ACCESS is a boolean intrinsic function returning true \("yes"\) if the)s 577.5 m
(    named  file  exists.   ACCESS can only be called as a function in an)s 569.0 m
(    expression, not as a task.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(EXAMPLES)s 535.0 m
(    1. Type a file if it exists.)s 526.5 m
(    )s 518.0 m
(        if \(access \("lib$motd"\)\))s 509.5 m
(            type \("lib$motd"\))s 501.0 m
(        else)s 492.5 m
(            error \(11, "File not found"\))s 484.0 m
(    )s 475.5 m
(    2. Tell if a file exists.)s 467.0 m
(    )s 458.5 m
(            cl> = access \("lib$motd"\))s 450.0 m
(    )s 441.5 m
(    )s 433.0 m
(BUGS)s 424.5 m
(    An optional second argument should be  added  to  test  whether  the)s 416.0 m
(    named file can be accessed for reading or writing.)s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
()s 254.5 m
(                                  -1-)s 246.0 m
()s 
/m{410 exch moveto}bind def
756 m
(BACK \(Feb86\)                    language                    BACK \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    back -- return to the previous directory)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    back)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    None.)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(DESCRIPTION)s 611.5 m
(    BACK  is  used after a call to CHDIR or CD to return to the previous)s 603.0 m
(    directory.  Repetitive calls to BACK may be used to  toggle  between)s 594.5 m
(    two directories.)s 586.0 m
(    )s 577.5 m
(    )s 569.0 m
(EXAMPLES)s 560.5 m
(    1. Go to the logical directory "dataio".)s 552.0 m
(    )s 543.5 m
(            cl> cd dataio)s 535.0 m
(    )s 526.5 m
(    2.  Return to the previous directory, and then go back to the dataio)s 518.0 m
(    directory.)s 509.5 m
(    )s 501.0 m
(            cl> back;back)s 492.5 m
(    )s 484.0 m
(    )s 475.5 m
(SEE ALSO)s 467.0 m
(    chdir, pathnames)s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 3 3
/m{18 exch moveto}bind def
756 m
(BEEP \(Feb86\)                    language                    BEEP \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    beep -- beep the terminal)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    beep)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    Beep sends the bell character \(^G\) to the terminal.)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(EXAMPLES)s 611.5 m
(    1. Wait for a background job to complete, ringing the terminal  bell)s 603.0 m
(    when done.)s 594.5 m
(    )s 586.0 m
(            cl> wait;beep)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(SEE ALSO)s 552.0 m
(    clear)s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(BREAK \(Feb86\)                   language                   BREAK \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    break -- break out of a loop)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    break)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    The  BREAK statement is used to exit \(break out of\) the FOR or WHILE)s 637.0 m
(    loop in which it is found.  In the case of  nested  loop  constructs)s 628.5 m
(    only  the  innermost  loop  is terminated.  Unlike C usage the BREAK)s 620.0 m
(    statement does not break out of a switch.)s 611.5 m
(    )s 603.0 m
(    )s 594.5 m
(EXAMPLES)s 586.0 m
(    1. Scan a list \(file\), printing each list element until  either  the)s 577.5 m
(    list is exhausted or a list element "exit" or "quit" is encountered.)s 569.0 m
(    )s 560.5 m
(            while \(fscan \(list, s1\) != EOF\) {)s 552.0 m
(                if \(s1 == "exit" || s1 == "quit"\))s 543.5 m
(                    break)s 535.0 m
(                print \(s1\))s 526.5 m
(            })s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(    2.  Sum  the  pixels in a two dimensional array, terminating the sum)s 492.5 m
(    for each line if a negative pixel is  encountered,  and  terminating)s 484.0 m
(    the entire process when the total sum passes a predefined limit.)s 475.5 m
(    )s 467.0 m
(            total = 0)s 458.5 m
(            for \(i=1;  i <= NCOLS;  i+=1\) {)s 450.0 m
(                for \(j=1;  j <= NLINES;  j+=1\) {)s 441.5 m
(                    if \(pixel[i,j] < 0\))s 433.0 m
(                        break               # exit the J loop)s 424.5 m
(                    total += pixel[i,j])s 416.0 m
(                })s 407.5 m
(                if \(total > NPHOT\))s 399.0 m
(                    break                   # exit the I loop)s 390.5 m
(            })s 382.0 m
(    )s 373.5 m
(    )s 365.0 m
(BUGS)s 356.5 m
(    )s 348.0 m
(    )s 339.5 m
(SEE ALSO)s 331.0 m
(    next, while, for)s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 4 4
/m{18 exch moveto}bind def
756 m
(BYE \(Feb86\)                     language                     BYE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    bye -- terminate task execution)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    bye)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    The  BYE  command  terminates  the  task  from which it is executed.)s 637.0 m
(    This is exactly equivalent to the CL reading end of file \(EOF\)  when)s 628.5 m
(    executing a task.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(EXAMPLES)s 594.5 m
(    1.  The most common usage of BYE occurs when it is typed by the user)s 586.0 m
(    to exit a package; in this case, BYE terminates the  package  script)s 577.5 m
(    task.)s 569.0 m
(    )s 560.5 m
(            cl> plot)s 552.0 m
(            pl> bye)s 543.5 m
(            cl>)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(SEE ALSO)s 509.5 m
(    clbye, return)s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CACHE \(Feb86\)                   language                   CACHE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    cache -- cache the parameters for a task in fast memory)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    cache task [task ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    task)s 628.5 m
(        The  name  of a task whose parameter set is to be cached in fast)s 620.0 m
(        memory.)s 611.5 m
(    )s 603.0 m
(    )s 594.5 m
(DESCRIPTION)s 586.0 m
(    The CACHE command loads the parameters of a task in memory.  The  CL)s 577.5 m
(    normally  reads  the  parameters  for  a task from disk whenever the)s 569.0 m
(    task is executed.  Cacheing the parameters for  frequently  executed)s 560.5 m
(    tasks  can  speed  up execution significantly.  This is particularly)s 552.0 m
(    important when the tasks are called from within a loop.)s 543.5 m
(    )s 535.0 m
(    If the CACHE command is entered without any arguments a list of  the)s 526.5 m
(    currently "cached" tasks is printed.)s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(EXAMPLES)s 492.5 m
(    1. Cache the parameters for the tasks DIRECTORY and PAGE.)s 484.0 m
(    )s 475.5 m
(            cl> cache dir page)s 467.0 m
(    )s 458.5 m
(    2.  Cache  the  parameters for the tasks called in a loop within the)s 450.0 m
(    body of a procedure script.  Note the use of  command  mode  in  the)s 441.5 m
(    script.)s 433.0 m
(    )s 424.5 m
(            begin)s 416.0 m
(                    cache \("alpha", "beta"\))s 407.5 m
(                    for \(i=1;  i <= 10;  i+=1\) {)s 399.0 m
(                        alpha \(i\))s 390.5 m
(                        beta \(i\))s 382.0 m
(                    })s 373.5 m
(            end)s 365.0 m
(    )s 356.5 m
(    )s 348.0 m
(BUGS)s 339.5 m
(    The  parameter  cache  should not be confused with the process cache)s 331.0 m
(    associated with the PRCACHE and FLPRCACHE commands.)s 322.5 m
(    )s 314.0 m
(    )s 305.5 m
(SEE ALSO)s 297.0 m
(    unlearn, update, lparam, eparam)s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 5 5
/m{18 exch moveto}bind def
756 m
(CASE \(Feb86\)                    language                    CASE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    switch -- switch case statement)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    switch \(expr\) {)s 671.0 m
(    case val1 [, val1,...]:)s 662.5 m
(        statements)s 654.0 m
(    case val3 [, val3,...]:)s 645.5 m
(        statements)s 637.0 m
(            \(etc.\))s 628.5 m
(    default:)s 620.0 m
(        statements)s 611.5 m
(    })s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(ELEMENTS)s 577.5 m
(    )s 569.0 m
(    expr)s 560.5 m
(        An  integer-valued  expression  tested  before  entry  into  the )s 552.0 m
(        switch block.)s 543.5 m
(    )s 535.0 m
(    valN)s 526.5 m
(        Integer valued constants used to match expression.)s 518.0 m
(    )s 509.5 m
(    statements)s 501.0 m
(        Simple   or   compound   statements  to  be  executed  when  the )s 492.5 m
(        appropriate case or default block is selected.)s 484.0 m
(        )s 475.5 m
(        )s 467.0 m
(DESCRIPTION)s 458.5 m
(    The SWITCH statement provides a  multiway  branch  capability.   The)s 450.0 m
(    switch  expression is evaluated and control branches to the matching)s 441.5 m
(    CASE block.  If there is no match the  DEFAULT  block,  if  present,)s 433.0 m
(    receives  control.   If  no  DEFAULT block is present, the switch is)s 424.5 m
(    skipped.)s 416.0 m
(    )s 407.5 m
(    Each CASE statement consists of a list of values defining the  case,)s 399.0 m
(    and  an  executable  statement \(possibly compound\) to be executed if)s 390.5 m
(    the case is selected by the switch.  Execution will  continue  until)s 382.0 m
(    the  next  case is reached, at which time a branch out of the SWITCH)s 373.5 m
(    statement occurs.  Note this difference  from  the  C  switch  case,)s 365.0 m
(    where  an explicit BREAK statement is required to exit a switch.  If)s 356.5 m
(    a BREAK is used in a CL switch, it will act upon the loop  statement)s 348.0 m
(    containing the switch, not the switch itself.)s 339.5 m
(    )s 331.0 m
(    Note  that  both the switch expression and the case constants may be)s 322.5 m
(    integers, or single characters which are evaluated  to  their  ASCII)s 314.0 m
(    equivalents.)s 305.5 m
(    )s 297.0 m
(    The  DEFAULT  statement  must  be  the  last statement in the switch)s 288.5 m
(    block.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CASE \(Feb86\)                    language                    CASE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(EXAMPLES)s 713.5 m
(    1. Multiple cases, no default case.)s 705.0 m
(    )s 696.5 m
(            switch \(opcode\) {)s 688.0 m
(            case 1:)s 679.5 m
(                task1 \(args\))s 671.0 m
(            case 2:)s 662.5 m
(                task2 \(args\))s 654.0 m
(            case 5:)s 645.5 m
(                task5 \(args\))s 637.0 m
(            })s 628.5 m
(    )s 620.0 m
(    2. Multiple values in a case.)s 611.5 m
(    )s 603.0 m
(            switch \(digit\) {)s 594.5 m
(            case '1','2','3','4','5','6','7':)s 586.0 m
(                n = n * 8 + digit - '0')s 577.5 m
(            default:)s 569.0 m
(                error \(1, "invalid number"\))s 560.5 m
(            })s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(BUGS)s 526.5 m
(    Only integer values are allowed \(no strings\).  The case values  must)s 518.0 m
(    be constants; ranges are not permitted.)s 509.5 m
(    )s 501.0 m
(    )s 492.5 m
(SEE ALSO)s 484.0 m
(    if else, goto)s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 6 6
/m{18 exch moveto}bind def
756 m
(CD \(Feb86\)                      language                      CD \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    chdir, cd -- change the current working directory)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    chdir [newdir]  or  cd [newdir])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    newdir)s 628.5 m
(        The  new  working directory.  The special name "." refers to the)s 620.0 m
(        current directory; ".." refers to the next higher directory.)s 611.5 m
(        )s 603.0 m
(        )s 594.5 m
(DESCRIPTION)s 586.0 m
(    CHDIR is used to change the current working directory.  When  called)s 577.5 m
(    without  any arguments, CHDIR sets the default directory to "home$",)s 569.0 m
(    the users home directory.  The new directory can be specified as  an)s 560.5 m
(    IRAF  logical  name, as a sub-directory of the current directory, as)s 552.0 m
(    a path from either a logical directory or the current directory,  or)s 543.5 m
(    as an operating system dependent name.)s 535.0 m
(    )s 526.5 m
(    The  names  CHDIR  and  CD are synonyms.  Note that the command BACK)s 518.0 m
(    may be called after a CHDIR to  return  to  the  previous  directory)s 509.5 m
(    without typing its name.)s 501.0 m
(    )s 492.5 m
(    )s 484.0 m
(EXAMPLES)s 475.5 m
(    1. Return to our home directory.)s 467.0 m
(    )s 458.5 m
(            cl> cd)s 450.0 m
(    )s 441.5 m
(    2. Go to the package logical directory "pkg$".)s 433.0 m
(    )s 424.5 m
(            cl> chdir pkg)s 416.0 m
(    )s 407.5 m
(    3.  Go  down  one level to the directory "dataio", a subdirectory of)s 399.0 m
(    "pkg".)s 390.5 m
(    )s 382.0 m
(            cl> cd dataio)s 373.5 m
(    )s 365.0 m
(    4. From "dataio", go back up to "pkg" and down into "images".)s 356.5 m
(    )s 348.0 m
(            cl> cd ../images)s 339.5 m
(    )s 331.0 m
(    5. Go to the "tv" directory, a subdirectory of "images",  regardless)s 322.5 m
(    of the current directory)s 314.0 m
(    )s 305.5 m
(            cl> cd pkg$images/tv)s 297.0 m
(    )s 288.5 m
(    6.  On  a  VMS system, define a new logical directory on a different)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CD \(Feb86\)                      language                      CD \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    disk device and  go  there.   Note  that  the  character  $  is  not)s 713.5 m
(    permitted in host file or directory names.)s 705.0 m
(    )s 696.5 m
(            cl> set dd = scr1:[data])s 688.0 m
(            cl> cd dd)s 679.5 m
(    )s 671.0 m
(    )s 662.5 m
(SEE ALSO)s 654.0 m
(    back, pathnames)s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 7 7
/m{18 exch moveto}bind def
756 m
(CHDIR \(Feb86\)                   language                   CHDIR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    chdir, cd -- change the current working directory)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    chdir [newdir]  or  cd [newdir])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    newdir)s 628.5 m
(        The  new  working directory.  The special name "." refers to the)s 620.0 m
(        current directory; ".." refers to the next higher directory.)s 611.5 m
(        )s 603.0 m
(        )s 594.5 m
(DESCRIPTION)s 586.0 m
(    CHDIR is used to change the current working directory.  When  called)s 577.5 m
(    without  any arguments, CHDIR sets the default directory to "home$",)s 569.0 m
(    the users home directory.  The new directory can be specified as  an)s 560.5 m
(    IRAF  logical  name, as a sub-directory of the current directory, as)s 552.0 m
(    a path from either a logical directory or the current directory,  or)s 543.5 m
(    as an operating system dependent name.)s 535.0 m
(    )s 526.5 m
(    The  names  CHDIR  and  CD are synonyms.  Note that the command BACK)s 518.0 m
(    may be called after a CHDIR to  return  to  the  previous  directory)s 509.5 m
(    without typing its name.)s 501.0 m
(    )s 492.5 m
(    )s 484.0 m
(EXAMPLES)s 475.5 m
(    1. Return to our home directory.)s 467.0 m
(    )s 458.5 m
(            cl> cd)s 450.0 m
(    )s 441.5 m
(    2. Go to the package logical directory "pkg$".)s 433.0 m
(    )s 424.5 m
(            cl> chdir pkg)s 416.0 m
(    )s 407.5 m
(    3.  Go  down  one level to the directory "dataio", a subdirectory of)s 399.0 m
(    "pkg".)s 390.5 m
(    )s 382.0 m
(            cl> cd dataio)s 373.5 m
(    )s 365.0 m
(    4. From "dataio", go back up to "pkg" and down into "images".)s 356.5 m
(    )s 348.0 m
(            cl> cd ../images)s 339.5 m
(    )s 331.0 m
(    5. Go to the "tv" directory, a subdirectory of "images",  regardless)s 322.5 m
(    of the current directory)s 314.0 m
(    )s 305.5 m
(            cl> cd pkg$images/tv)s 297.0 m
(    )s 288.5 m
(    6.  On  a  VMS system, define a new logical directory on a different)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CHDIR \(Feb86\)                   language                   CHDIR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    disk device and  go  there.   Note  that  the  character  $  is  not)s 713.5 m
(    permitted in host file or directory names.)s 705.0 m
(    )s 696.5 m
(            cl> set dd = scr1:[data])s 688.0 m
(            cl> cd dd)s 679.5 m
(    )s 671.0 m
(    )s 662.5 m
(SEE ALSO)s 654.0 m
(    back, pathnames)s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 8 8
/m{18 exch moveto}bind def
756 m
(CL \(Jun86\)                      language                      CL \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    cl    -- call the CL as a task)s 705.0 m
(    clbye -- like cl\(\), but closes current script file too)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(PARAMETERS)s 671.0 m
(    )s 662.5 m
(    gcur = "")s 654.0 m
(        Global graphics cursor.)s 645.5 m
(    )s 637.0 m
(    imcur = "")s 628.5 m
(        Global image cursor.)s 620.0 m
(    )s 611.5 m
(    abbreviate = yes)s 603.0 m
(        Permits  minimum match abbreviations of task and parameter names)s 594.5 m
(        \(disabled within scripts\).)s 586.0 m
(    )s 577.5 m
(    echo = no)s 569.0 m
(        Echo all commands received by the CL on the terminal.)s 560.5 m
(    )s 552.0 m
(    ehinit = "standout eol noverify")s 543.5 m
(        Ehistory options string.  \(See "ehistory"\))s 535.0 m
(    )s 526.5 m
(    epinit = "standout noshowall")s 518.0 m
(        Eparam options string.  \(See "eparam"\))s 509.5 m
(    )s 501.0 m
(    keeplog = no)s 492.5 m
(        Keep a log of all CL commands.)s 484.0 m
(    )s 475.5 m
(    logfile = "uparm$logfile")s 467.0 m
(        The name of the logfile, if command logging is enabled.)s 458.5 m
(    )s 450.0 m
(    logmode = "commands nobackground noerrors notrace")s 441.5 m
(        Logging mode control parameter.  \(See "logging"\))s 433.0 m
(    )s 424.5 m
(    lexmodes = yes)s 416.0 m
(        Enable automatic mode switching  between  "command  mode"  \(used)s 407.5 m
(        when  commands are being entered interactively at the terminal\),)s 399.0 m
(        and "compute mode" \(used to evaluate arithmetic expressions  and)s 390.5 m
(        argument  lists\).   If  LEXMODES  is  disabled  command  mode is)s 382.0 m
(        disabled.  Command mode is always disabled  within  scripts  and)s 373.5 m
(        within parenthesis, i.e., expressions or formal argument lists.)s 365.0 m
(    )s 356.5 m
(    menus = yes)s 348.0 m
(        If  MENUS  are  enabled,  a  table  will  be  printed whenever a)s 339.5 m
(        package is entered or exited listing the tasks \(or  subpackages\))s 331.0 m
(        in the new package.)s 322.5 m
(    )s 314.0 m
(    mode = "ql")s 305.5 m
(        The  parameter  mode  of  the CL, and of any tasks run by the CL)s 297.0 m
(        which do not specify their own mode \(i.e., which specify  `auto')s 288.5 m
(        mode\).   A  "q"  causes  a  query  to  be  generated  whenever a)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CL \(Jun86\)                      language                      CL \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(        parameter is used which was not set explicitly  on  the  command)s 713.5 m
(        line.   An  "m"  \(menu  mode\)  causes  EPARAM  to  be  called to)s 705.0 m
(        edit/check  a  task's  parameters   when   the   task   is   run )s 696.5 m
(        interactively.   An  "l" causes the parameter file for a task to)s 688.0 m
(        be updated on disk  whenever  the  task  is  run  interactively.)s 679.5 m
(        Note  that changing the mode at the CL level will have no affect)s 671.0 m
(        on the operation of an individual task unless "auto" mode is set)s 662.5 m
(        at  the  package, task, and parameter level, causing the mode to)s 654.0 m
(        defer to the global CL mode.)s 645.5 m
(    )s 637.0 m
(    notify = yes)s 628.5 m
(        If NOTIFY is enabled background jobs will  print  a  message  on)s 620.0 m
(        the  user  terminal  \(or  in  the  logfile  for  a  queued  job\) )s 611.5 m
(        notifying the user when the job completes.)s 603.0 m
(    )s 594.5 m
(    szprcache = \(a small number\))s 586.0 m
(        Controls the size of the process cache.   The  value  may  range)s 577.5 m
(        from  1  to  10.  A larger number reduces process spawns but the)s 569.0 m
(        idle processes may consume critical system/job resources.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(DESCRIPTION)s 535.0 m
(    The CL and CLBYE commands are used to call the CL as  a  task.   The)s 526.5 m
(    function  of  the  CL  task is to read and execute commands from its)s 518.0 m
(    standard input until BYE or end of file is  reached.   The  CL  task)s 509.5 m
(    may  be called with arguments or executed in the background like any)s 501.0 m
(    other task.  The CL task may be called from within  a  procedure  or)s 492.5 m
(    script  to  read  commands from the command stream which called that)s 484.0 m
(    procedure or task; this  is  usually  the  terminal  but  may  be  a)s 475.5 m
(    another script.)s 467.0 m
(    )s 458.5 m
(    When  the  CL  or  CLBYE  command  is  invoked, the command language)s 450.0 m
(    interpreter stores information about which tasks  and  packages  are)s 441.5 m
(    currently  defined.   When  the  command  is  finished  any tasks or)s 433.0 m
(    packages which  have  become  defined  since  invocation  are  lost,)s 424.5 m
(    unless  the  user  specifically  overrides  this  by  using the KEEP)s 416.0 m
(    command.)s 407.5 m
(    )s 399.0 m
(    The CLBYE command performs exactly like a  CL  followed  by  a  BYE,)s 390.5 m
(    except  that  when  called  from  a script the script file is closed)s 382.0 m
(    immediately, freeing its file descriptor for use elsewhere.   If  CL)s 373.5 m
(    is  used  instead of CLBYE in a script, the file is not closed until)s 365.0 m
(    after the CL returns.  If a CLBYE is used in a script, any  commands)s 356.5 m
(    following the CLBYE will not be executed.)s 348.0 m
(    )s 339.5 m
(    )s 331.0 m
(EXAMPLES)s 322.5 m
(    1. Execute CL commands from a file.)s 314.0 m
(    )s 305.5 m
(            cl> cl < cmdfile)s 297.0 m
(    )s 288.5 m
(    2. Execute CL commands from a pipe.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 9 9
/m{18 exch moveto}bind def
756 m
(CL \(Jun86\)                      language                      CL \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            cl> print \("!type ", fname\) | cl)s 713.5 m
(    )s 705.0 m
(    3.  Execute  CL,  taking  command  input  from  the terminal.  Since)s 696.5 m
(    command input is already from the terminal, the only  effect  is  to)s 688.0 m
(    mark  the  state  of  CL  memory,  to  allow  TASK,  SET,  and other)s 679.5 m
(    definitions to be made temporarily and later  freed  by  terminating)s 671.0 m
(    the CL with a BYE.)s 662.5 m
(    )s 654.0 m
(            cl> cl)s 645.5 m
(            cl> set pak = "home$tasks/")s 637.0 m
(            cl> task $mytask = pak$x_mytask.e)s 628.5 m
(                    \(execute the task\))s 620.0 m
(            cl> bye)s 611.5 m
(    )s 603.0 m
(    In  the  example  above,  the  declarations of the logical directory)s 594.5 m
(    "pak" and the task "mytask" are discarded when the BYE  is  entered,)s 586.0 m
(    terminating the CL.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(BUGS)s 552.0 m
(    Beware  that any changes made to the global CL parameters during the)s 543.5 m
(    execution of a CL remain in effect after the task terminates.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(SEE ALSO)s 509.5 m
(    bye, keep, logout)s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CLBYE \(Jun86\)                   language                   CLBYE \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    cl    -- call the CL as a task)s 705.0 m
(    clbye -- like cl\(\), but closes current script file too)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(PARAMETERS)s 671.0 m
(    )s 662.5 m
(    gcur = "")s 654.0 m
(        Global graphics cursor.)s 645.5 m
(    )s 637.0 m
(    imcur = "")s 628.5 m
(        Global image cursor.)s 620.0 m
(    )s 611.5 m
(    abbreviate = yes)s 603.0 m
(        Permits minimum match abbreviations of task and parameter  names)s 594.5 m
(        \(disabled within scripts\).)s 586.0 m
(    )s 577.5 m
(    echo = no)s 569.0 m
(        Echo all commands received by the CL on the terminal.)s 560.5 m
(    )s 552.0 m
(    ehinit = "standout eol noverify")s 543.5 m
(        Ehistory options string.  \(See "ehistory"\))s 535.0 m
(    )s 526.5 m
(    epinit = "standout noshowall")s 518.0 m
(        Eparam options string.  \(See "eparam"\))s 509.5 m
(    )s 501.0 m
(    keeplog = no)s 492.5 m
(        Keep a log of all CL commands.)s 484.0 m
(    )s 475.5 m
(    logfile = "uparm$logfile")s 467.0 m
(        The name of the logfile, if command logging is enabled.)s 458.5 m
(    )s 450.0 m
(    logmode = "commands nobackground noerrors notrace")s 441.5 m
(        Logging mode control parameter.  \(See "logging"\))s 433.0 m
(    )s 424.5 m
(    lexmodes = yes)s 416.0 m
(        Enable  automatic  mode  switching  between "command mode" \(used)s 407.5 m
(        when commands are being entered interactively at the  terminal\),)s 399.0 m
(        and  "compute mode" \(used to evaluate arithmetic expressions and)s 390.5 m
(        argument lists\).   If  LEXMODES  is  disabled  command  mode  is)s 382.0 m
(        disabled.   Command  mode  is always disabled within scripts and)s 373.5 m
(        within parenthesis, i.e., expressions or formal argument lists.)s 365.0 m
(    )s 356.5 m
(    menus = yes)s 348.0 m
(        If MENUS are  enabled,  a  table  will  be  printed  whenever  a)s 339.5 m
(        package  is entered or exited listing the tasks \(or subpackages\))s 331.0 m
(        in the new package.)s 322.5 m
(    )s 314.0 m
(    mode = "ql")s 305.5 m
(        The parameter mode of the CL, and of any tasks  run  by  the  CL)s 297.0 m
(        which  do not specify their own mode \(i.e., which specify `auto')s 288.5 m
(        mode\).  A  "q"  causes  a  query  to  be  generated  whenever  a)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 10 10
/m{18 exch moveto}bind def
756 m
(CLBYE \(Jun86\)                   language                   CLBYE \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(        parameter  is  used  which was not set explicitly on the command)s 713.5 m
(        line.  An  "m"  \(menu  mode\)  causes  EPARAM  to  be  called  to)s 705.0 m
(        edit/check   a   task's   parameters   when   the  task  is  run )s 696.5 m
(        interactively.  An "l" causes the parameter file for a  task  to)s 688.0 m
(        be  updated  on  disk  whenever  the  task is run interactively.)s 679.5 m
(        Note that changing the mode at the CL level will have no  affect)s 671.0 m
(        on the operation of an individual task unless "auto" mode is set)s 662.5 m
(        at the package, task, and parameter level, causing the  mode  to)s 654.0 m
(        defer to the global CL mode.)s 645.5 m
(    )s 637.0 m
(    notify = yes)s 628.5 m
(        If  NOTIFY  is  enabled  background jobs will print a message on)s 620.0 m
(        the  user  terminal  \(or  in  the  logfile  for  a  queued  job\) )s 611.5 m
(        notifying the user when the job completes.)s 603.0 m
(    )s 594.5 m
(    szprcache = \(a small number\))s 586.0 m
(        Controls  the  size  of  the process cache.  The value may range)s 577.5 m
(        from 1 to 10.  A larger number reduces process  spawns  but  the)s 569.0 m
(        idle processes may consume critical system/job resources.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(DESCRIPTION)s 535.0 m
(    The  CL  and  CLBYE commands are used to call the CL as a task.  The)s 526.5 m
(    function of the CL task is to read and  execute  commands  from  its)s 518.0 m
(    standard  input  until  BYE  or end of file is reached.  The CL task)s 509.5 m
(    may be called with arguments or executed in the background like  any)s 501.0 m
(    other  task.   The  CL task may be called from within a procedure or)s 492.5 m
(    script to read commands from the command stream  which  called  that)s 484.0 m
(    procedure  or  task;  this  is  usually  the  terminal  but may be a)s 475.5 m
(    another script.)s 467.0 m
(    )s 458.5 m
(    When the CL or  CLBYE  command  is  invoked,  the  command  language)s 450.0 m
(    interpreter  stores  information  about which tasks and packages are)s 441.5 m
(    currently defined.  When  the  command  is  finished  any  tasks  or)s 433.0 m
(    packages  which  have  become  defined  since  invocation  are lost,)s 424.5 m
(    unless the user  specifically  overrides  this  by  using  the  KEEP)s 416.0 m
(    command.)s 407.5 m
(    )s 399.0 m
(    The  CLBYE  command  performs  exactly  like a CL followed by a BYE,)s 390.5 m
(    except that when called from a script  the  script  file  is  closed)s 382.0 m
(    immediately,  freeing  its file descriptor for use elsewhere.  If CL)s 373.5 m
(    is used instead of CLBYE in a script, the file is not  closed  until)s 365.0 m
(    after  the CL returns.  If a CLBYE is used in a script, any commands)s 356.5 m
(    following the CLBYE will not be executed.)s 348.0 m
(    )s 339.5 m
(    )s 331.0 m
(EXAMPLES)s 322.5 m
(    1. Execute CL commands from a file.)s 314.0 m
(    )s 305.5 m
(            cl> cl < cmdfile)s 297.0 m
(    )s 288.5 m
(    2. Execute CL commands from a pipe.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CLBYE \(Jun86\)                   language                   CLBYE \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            cl> print \("!type ", fname\) | cl)s 713.5 m
(    )s 705.0 m
(    3. Execute CL,  taking  command  input  from  the  terminal.   Since)s 696.5 m
(    command  input  is  already from the terminal, the only effect is to)s 688.0 m
(    mark the  state  of  CL  memory,  to  allow  TASK,  SET,  and  other)s 679.5 m
(    definitions  to  be  made temporarily and later freed by terminating)s 671.0 m
(    the CL with a BYE.)s 662.5 m
(    )s 654.0 m
(            cl> cl)s 645.5 m
(            cl> set pak = "home$tasks/")s 637.0 m
(            cl> task $mytask = pak$x_mytask.e)s 628.5 m
(                    \(execute the task\))s 620.0 m
(            cl> bye)s 611.5 m
(    )s 603.0 m
(    In the example above, the  declarations  of  the  logical  directory)s 594.5 m
(    "pak"  and  the task "mytask" are discarded when the BYE is entered,)s 586.0 m
(    terminating the CL.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(BUGS)s 552.0 m
(    Beware that any changes made to the global CL parameters during  the)s 543.5 m
(    execution of a CL remain in effect after the task terminates.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(SEE ALSO)s 509.5 m
(    bye, keep, logout)s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s S
%%Page: 11 11
/m{18 exch moveto}bind def
756 m
(CLEAR \(Feb86\)                   language                   CLEAR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    clear -- clear the terminal screen)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    clear)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    The  CLEAR  command  clears  the  terminal screen.  For this to work)s 637.0 m
(    properly the environment variable TERMINAL must  correctly  identify)s 628.5 m
(    the  terminal currently in use.  If the terminal should get stuck in)s 620.0 m
(    reverse video mode, CLEAR will restore normal video mode as well  as)s 611.5 m
(    clearing the screen.)s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(EXAMPLES)s 577.5 m
(    1. Clear the screen and print the current directory.)s 569.0 m
(    )s 560.5 m
(            cl> cle;dir)s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(SEE ALSO)s 526.5 m
(    beep, stty)s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(COMMANDS \(Apr87\)                language                COMMANDS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    commands -- the CL command syntax)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    In COMMAND mode \(normal interactive commands\):)s 671.0 m
(    )s 662.5 m
(            taskname arg1 ... argN par=val ... par=val redir)s 654.0 m
(    )s 645.5 m
(    In COMPUTE mode \(algebraic mode, for expressions and procedures\))s 637.0 m
(    )s 628.5 m
(            taskname \(arg1, ... argN, par=val, ... par=val redir\))s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(ELEMENTS)s 594.5 m
(    )s 586.0 m
(    taskname)s 577.5 m
(        The name of the task to be executed.)s 569.0 m
(    )s 560.5 m
(    argN)s 552.0 m
(        The  positional  arguments  to the task.  An argument may be any)s 543.5 m
(        expression; in command mode, a parameter name must  be  enclosed)s 535.0 m
(        in  parenthesis  to  avoid  interpretation  as a string constant)s 526.5 m
(        \(e.g., filename\).)s 518.0 m
(    )s 509.5 m
(    param=value)s 501.0 m
(        Keyword equals value assignment.  The  value  of  the  parameter)s 492.5 m
(        named  on  the  left is set equal to the value of the expression)s 484.0 m
(        on the right.  Keyword equals value assignments must follow  any)s 475.5 m
(        positional   arguments.    To   save  typing,  boolean  \(yes/no\) )s 467.0 m
(        parameters may be set with a trailing + or -,  e.g.,  "verbose+")s 458.5 m
(        is the same as "verbose=yes".)s 450.0 m
(    )s 441.5 m
(    redir)s 433.0 m
(        A file redirection argument, e.g.:)s 424.5 m
(        )s 416.0 m
(        > file          spool output in a file)s 407.5 m
(        < file          read input from a file \(rather than the terminal\))s 399.0 m
(        >> file         append the output to a file)s 390.5 m
(        >& file         spool both error and regular output in a file)s 382.0 m
(        >>& file        append both error and regular output to a file)s 373.5 m
(        >[GIP]          redirect graphics output to a file, e.g, >G file)s 365.0 m
(        >>[GIP]         append graphics output to a file, e.g, >G file)s 356.5 m
(    )s 348.0 m
(    )s 339.5 m
(DESCRIPTION)s 331.0 m
(    A  CL  command is an invocation of a predefined CL task.  A task may)s 322.5 m
(    be one  of  the  numerous  builtin  functions  \(e.g.  time,  lparam,)s 314.0 m
(    ehistory\),  a  task  defined  in  a  package  supplied  to  the user)s 305.5 m
(    automatically, \(e.g., the DIRECTORY task in the SYSTEM package\),  or)s 297.0 m
(    a task the user has defined himself, using the TASK directive.)s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 12 12
/m{18 exch moveto}bind def
756 m
(COMMANDS \(Apr87\)                language                COMMANDS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    The  entire  argument  list of a command, including file redirection)s 713.5 m
(    arguments  may  be  enclosed  in  parentheses.   This   forces   all )s 705.0 m
(    arguments  to  be  evaluated  in  compute  mode.   In  command  mode )s 696.5 m
(    arguments are  delimited  by  spaces  and  most  characters  may  be)s 688.0 m
(    included  in  strings without need to quote the strings.  In compute)s 679.5 m
(    mode arguments are delimited by commas, all strings must be  quoted,)s 671.0 m
(    and  all  CL arithmetic and other operators are recognized.  Command)s 662.5 m
(    mode is the default everywhere, except within  parenthesis,  on  the)s 654.0 m
(    right  hand  side  of  a  "=  expr"  \(inspect  statement\), or within)s 645.5 m
(    procedures.  The sequence #{ <statements> #} may be  used  to  force)s 637.0 m
(    interpretation of a series of statements in compute mode.)s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(    1. ARGUMENTS)s 603.0 m
(    )s 594.5 m
(        The  task  name  may  be  followed  by  any number of positional)s 586.0 m
(    arguments and/or keyword=value  type  arguments,  switches,  or  i/o)s 577.5 m
(    redirection  arguments.   The  positional arguments must come first.)s 569.0 m
(    Arguments are most commonly simple numeric or string constants,  but)s 560.5 m
(    general expressions are allowed.  Some examples of arguments follow.)s 552.0 m
(    )s 543.5 m
(            "quoted string")s 535.0 m
(            \(cos\(.5\)**2 + sin\(.5\)**2\))s 526.5 m
(            "work" // 02)s 518.0 m
(            k + 2                   # valid only in compute mode)s 509.5 m
(            i+3                     # valid in both modes)s 501.0 m
(            \(i+3\)                   # same answer in both modes)s 492.5 m
(    )s 484.0 m
(    Within  an  argument  the treatment of unquoted strings depends upon)s 475.5 m
(    the current mode.  In command mode the string is  assumed  to  be  a)s 467.0 m
(    string  constant,  while  in compute mode it is taken to be the name)s 458.5 m
(    of a parameter.  For example, in command mode the expression)s 450.0 m
(    )s 441.5 m
(            i+3)s 433.0 m
(    )s 424.5 m
(    is equivalent to the string "i+3", while in compute mode this  would)s 416.0 m
(    evaluate  to  the  sum of the VALUE of the parameter "i" plus 3.  To)s 407.5 m
(    force evaluation of a string like i+3 as  a  arithmetic  expression,)s 399.0 m
(    enclose it in parenthesis.)s 390.5 m
(    )s 382.0 m
(    Positional  arguments  are assigned to the parameters of the task to)s 373.5 m
(    be executed.  The position of each task parameter is  determined  by)s 365.0 m
(    the  order  of  the  arguments  in  the  PROCEDURE  declaration of a)s 356.5 m
(    procedure script task,  or  by  the  order  of  declaration  of  the)s 348.0 m
(    parameters in a parameter file for other tasks.)s 339.5 m
(    )s 331.0 m
(    Hidden  parameters  cannot be assigned values positionally \(one must)s 322.5 m
(    use keywork assignment\).  It is an error  to  have  more  positional)s 314.0 m
(    arguments  than  there are corresponding parameters in the task, but)s 305.5 m
(    omitting positional arguments is legal.  In compute mode,  arguments)s 297.0 m
(    may  be  skipped  using  commas  to mark the skipped arguments, e.g.)s 288.5 m
(    a,,b.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(COMMANDS \(Apr87\)                language                COMMANDS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    Following the positional arguments  the  user  may  specify  keyword)s 713.5 m
(    arguments.   All  parameters  of a task, including hidden parameters)s 705.0 m
(    may be assigned to using keyword arguments.  The form of  a  keyword)s 696.5 m
(    argument is)s 688.0 m
(    )s 679.5 m
(            param=expr)s 671.0 m
(    )s 662.5 m
(    where  PARAM  is  the  name of the task's parameter, and EXPR is any)s 654.0 m
(    legal CL expression.  If the parameter  is  boolean  an  alternative)s 645.5 m
(    syntax called the "switch" syntax is available:)s 637.0 m
(    )s 628.5 m
(            param+          # same as param=yes)s 620.0 m
(            param-          # same as param=no)s 611.5 m
(    )s 603.0 m
(    A given parameter may only be assigned to once in a command line.)s 594.5 m
(    )s 586.0 m
(    )s 577.5 m
(    2. I/O REDIRECTION)s 569.0 m
(    )s 560.5 m
(        Following  the  argument  list  the user may specify one or more)s 552.0 m
(    file redirection parameters.  This permits the altering of  standard)s 543.5 m
(    i/o  streams  for  this  command  only.   Note  that  the  file name)s 535.0 m
(    specified is interpreted according to the current mode, i.e.)s 526.5 m
(    )s 518.0 m
(            > file)s 509.5 m
(    )s 501.0 m
(    sends output to a file with the name "file"  in  command  mode,  but)s 492.5 m
(    uses  the  VALUE  of the parameter "file" as the filename in compute)s 484.0 m
(    mode.)s 475.5 m
(    )s 467.0 m
(    The output from one command may also be directed  to  the  input  of)s 458.5 m
(    another using pipes.  The syntax is)s 450.0 m
(    )s 441.5 m
(            command1 | command2)s 433.0 m
(        or)s 424.5 m
(            command1 |& command2)s 416.0 m
(    )s 407.5 m
(    Here command1 and command2 are full commands, including the taskname)s 399.0 m
(    and all arguments.  In the first  example  the  standard  output  of)s 390.5 m
(    command1  becomes  the  standard  input  of  command2,  while in the)s 382.0 m
(    second the both the standard and error output are sent to command2.)s 373.5 m
(    )s 365.0 m
(    Once  two  commands  have  been  joined  by  a  pipe  they  function )s 356.5 m
(    effectively  as  a  single  command, and the combined command may be)s 348.0 m
(    joined by pipe to further commands.  The resulting  "command  block")s 339.5 m
(    is  executed  as a unit, and may be submitted as a background job by)s 331.0 m
(    following the command block with an "&" or "& queuename".)s 322.5 m
(    )s 314.0 m
(    )s 305.5 m
(EXAMPLES)s 297.0 m
(    1. Simple positional arguments only \(command mode\).)s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s S
%%Page: 13 13
/m{18 exch moveto}bind def
756 m
(COMMANDS \(Apr87\)                language                COMMANDS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            cl> copy file1 file2)s 713.5 m
(    )s 705.0 m
(    2. Simple positional arguments only \(compute mode\).)s 696.5 m
(    )s 688.0 m
(            cl> copy \("file1", "file2"\))s 679.5 m
(    )s 671.0 m
(    3. One positional argument, i.e., the string "file1,file",  and  one)s 662.5 m
(    keyword=value  type  argument.   Note that string need not be quoted)s 654.0 m
(    even though it contains the comma, provided there are no  spaces  in)s 645.5 m
(    the string.)s 637.0 m
(    )s 628.5 m
(            cl> lprint file1,file2 device=versatec)s 620.0 m
(    )s 611.5 m
(    4. Syntax for i/o redirection in compute mode, as in a script.)s 603.0 m
(    )s 594.5 m
(            type \("*.x", > "spool"\))s 586.0 m
(    )s 577.5 m
(    5. The same command in command mode.)s 569.0 m
(    )s 560.5 m
(            cl> type *.x > spool)s 552.0 m
(    )s 543.5 m
(    6.  Use  of  an  arithmetic  expression  in command mode; the scalar)s 535.0 m
(    value of the expression given as the third  positional  argument  is)s 526.5 m
(    added  to  the  value  of every pixel in image "pix1", writing a new)s 518.0 m
(    image "pix2" as output.)s 509.5 m
(    )s 501.0 m
(            cl> imarith pix1 + \(log\(4.2\)+10\) pix2)s 492.5 m
(    )s 484.0 m
(    Many additional examples may be found in the EXAMPLES section of the)s 475.5 m
(    manual pages throughout the system.)s 467.0 m
(    )s 458.5 m
(    )s 450.0 m
(SEE ALSO)s 441.5 m
(    procedure, parameters)s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -4-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    cursors -- cursor control for graphics and image display devices)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(1. INTRODUCTION)s 671.0 m
()s 662.5 m
(    In  IRAF,  all  cursor input is via the graphics cursor interface in)s 654.0 m
(the CL.  The CL supports two types of cursors, the graphics  cursor  and)s 645.5 m
(the  image  display  cursor,  represented in the CL by the two parameter)s 637.0 m
(datatypes GCUR and IMCUR.  To  read  either  cursor  from  a  task,  the)s 628.5 m
(programmer  declares  one  of the parameters of their task to be of type)s 620.0 m
(gcur or imcur, and then reads the value of the parameter.   The  act  of)s 611.5 m
(reading  a cursor type parameter causes the physical device cursor to be)s 603.0 m
(read.  To make it possible for the user to read  either  cursor  at  any)s 594.5 m
(time,  the CL provides two predefined global parameters also called GCUR)s 586.0 m
(and IMCUR \(or to be more precise, "cl.gcur" and "cl.imcur",  since  both)s 577.5 m
(parameters are local parameters of the CL task\).)s 569.0 m
()s 560.5 m
(Since  the  graphics  cursors  are interfaced as CL parameters, a cursor)s 552.0 m
(read is implied whenever a cursor type parameter is referenced in  a  CL)s 543.5 m
(expression.   The  simplest way to read a cursor is to use the "inspect")s 535.0 m
(statement to print the value of  the  parameter,  as  in  the  following)s 526.5 m
(example.   Exactly  the same thing happens when a program like IMPLOT or)s 518.0 m
(SPLOT reads the cursor.)s 509.5 m
()s 501.0 m
(        cl> = gcur)s 492.5 m
(        0.5005035 0.4980621 1 k )s 484.0 m
()s 475.5 m
(More complex accesses are occasionally useful, e.g.:)s 467.0 m
()s 458.5 m
(        cl> print \(gcur, > "curpos"\))s 450.0 m
()s 441.5 m
(writes the cursor value into a file, and)s 433.0 m
()s 424.5 m
(        cl> = fscan \(gcur, x, y\))s 416.0 m
()s 407.5 m
(leaves the X and Y coordinates of the cursor in parameters X and Y.)s 399.0 m
()s 390.5 m
(A cursor read returns a string value,  as  can  be  seen  in  the  above)s 382.0 m
(example.   The fields of the cursor value string are \(from the left\) the)s 373.5 m
(X and Y position of the cursor in world coordinates, the number  of  the)s 365.0 m
(world  coordinate  system  to  which  the coordinates refer, and the key)s 356.5 m
(value, or character typed to terminate the cursor read.  If the  key  is)s 348.0 m
(a  colon  \(":"\), a fourth field will be added, namely a character string)s 339.5 m
(entered by the user after typing the colon key.  This feature is  useful)s 331.0 m
(for passing arbitrary commands to programs via the cursor interface.)s 322.5 m
()s 314.0 m
(A  cursor  read  is  not  instantaneous.   A cursor read is initiated by)s 305.5 m
(reading a cursor type parameter, and  terminated  by  typing  any  lower)s 297.0 m
(case  or  nonalphanumeric  character  on  the keyboard.  The keyboard is)s 288.5 m
(used to terminate cursor reads from the image display as well as from  a)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 14 14
/m{18 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(graphics  terminal.   While  the cursor read is in progress, i.e., while)s 713.5 m
(the CL is waiting for a key to be typed on the terminal, the CL is  said)s 705.0 m
(to  be  in  CURSOR  MODE.   Cursor  mode  reserves all of the upper case)s 696.5 m
(characters and digits for cursor mode commands.  Since the  cursor  mode)s 688.0 m
(commands  are intercepted by cursor mode, they do not terminate a cursor)s 679.5 m
(read and are never seen by the program reading the cursor.)s 671.0 m
()s 662.5 m
(The cursor mode commands are  the  major  topic  of  discussion  in  the)s 654.0 m
(remainder  of  this  document.   In  brief, the cursor mode commands are)s 645.5 m
(used to zoom in on some portion of the graphics frame \(e.g.,  to  get  a)s 637.0 m
(more  accurate  cursor  position  measurement\),  to  roam  about at high)s 628.5 m
(magnification, to replot the frame,  to  make  a  hardcopy  on  a  batch)s 620.0 m
(plotter  device,  to save or restore the frame in a file, and so on.  In)s 611.5 m
(reading the rest of this document, take care not  to  get  lost  in  the)s 603.0 m
(complexities  of cursor mode, forgetting the essential simplicity of the)s 594.5 m
(cursor interface, namely that we are reading the  cursor  and  returning)s 586.0 m
(the cursor coordinates to the caller.)s 577.5 m
()s 569.0 m
(In  the  remainder  of  this  document  the discussion will focus on the)s 560.5 m
(graphics cursor to minimize confusion.  The same  interface  is  however)s 552.0 m
(used  to  access  both types of cursor, hence the discussion is relevant)s 543.5 m
(for the image display interface as well.)s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
(2. OVERVIEW)s 501.0 m
()s 492.5 m
()s 484.0 m
(2.1 INVOKING CURSOR MODE)s 475.5 m
()s 467.0 m
(    Many IRAF tasks produce a plot of some sort  and  then  bring  up  a)s 458.5 m
(graphics  cursor \(e.g. a crosshair\) and automatically leave the terminal)s 450.0 m
(in cursor mode.  Alternatively, the user can  invoke  cursor  mode  from)s 441.5 m
(the CL by typing:)s 433.0 m
()s 424.5 m
(        cl> = gcur)s 416.0 m
()s 407.5 m
(If  the  CL  environment  variable CMINIT is defined when cursor mode is)s 399.0 m
(first entered, the string value will be interpreted  as  a  cursor  mode)s 390.5 m
(command  and  used for initialization.  For example, to speed up drawing)s 382.0 m
(time you could set text quality to low and the  graphics  resolution  to)s 373.5 m
(200  points  in  X  and  100  points  in  Y  by adding the following SET)s 365.0 m
(declaration to one's "login.cl" file:)s 356.5 m
()s 348.0 m
(        set cminit = "xres=200; yres=150; txqual=low")s 339.5 m
()s 331.0 m
(An additional environment variable is provided  for  applications  which)s 322.5 m
(generate  very  complex plots.  There is a fixed upper limit on the size)s 314.0 m
(of the cursor mode  frame  buffer,  used  to  retain  all  the  graphics)s 305.5 m
(instructions  used to generate a plot.  If the buffer overflows the plot)s 297.0 m
(will come out correctly the first time, but  part  of  the  instructions)s 288.5 m
(used  to  generate  the  plot  will  be  discarded, hence it will not be)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(possible to regenerate the full plot in cursor mode.   If  this  happens)s 713.5 m
(the size of the cursor mode frame buffer may be increased, e.g.,)s 705.0 m
()s 696.5 m
(        set cmbuflen = 512000)s 688.0 m
()s 679.5 m
(would  set  the  size  of the frame buffer to 512K words, or 1 megabyte.)s 671.0 m
(This would be large enough to hold almost any plot.  A  call  to  GFLUSH)s 662.5 m
(may be required before the new buffer size takes effect.)s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
(2.2 CURSOR MODE HELP)s 620.0 m
()s 611.5 m
(    While  in  cursor  mode,  help  text may be obtained in at least two)s 603.0 m
(ways.  Help on the cursor mode commands themselves, i.e.  the  topic  of)s 594.5 m
(this  document, is available with the command ":.help" or just ":.".  By)s 586.0 m
(convention help  on  an  application  task  running  cursor  mode,  e.g.)s 577.5 m
(IMPLOT,  is  available  with  the  command  "?".   All  interactive IRAF)s 569.0 m
(graphics tasks are required to respond to the ? key with  a  summary  of)s 560.5 m
(the keystrokes recognized by that task.)s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
(2.3 CURSOR MODE COMMANDS AND OPTIONS)s 518.0 m
()s 509.5 m
(    While   in   cursor  mode,  whether  invoked  by  an  IRAF  task  or )s 501.0 m
(interactively via the command "=gcur", three  classes  of  commands  are)s 492.5 m
(available.   First,  single,  upper-case  letters  take  actions such as)s 484.0 m
(roaming and zooming, redrawing axes after  a  zoom,  and  prompting  for)s 475.5 m
(text  annotation.   Second,  cursor  mode  options  and more complicated)s 467.0 m
(commands may be entered after a  ":.",  for  example  sending  a  screen)s 458.5 m
(snapshot   to   a   hardcopy  plotter  and  changing  text  quality  and )s 450.0 m
(orientation.  Third, all other commands, namely the lower  case  letters)s 441.5 m
(and  most nonalphanumeric characters, are interpreted by the controlling)s 433.0 m
(task and will terminate a  cursor  read.   Thus,  if  any  keystroke  is)s 424.5 m
(entered  that is not shown below or handled by the governing application)s 416.0 m
(program, cursor mode exits and the keystroke and cursor coordinates  are)s 407.5 m
(reported.)s 399.0 m
()s 390.5 m
(Minimum  match  abbreviations  are  permitted  for  the cursor mode ":.")s 382.0 m
(command names.  Multiple commands may be given on one line, delimited by)s 373.5 m
(semicolons.)s 365.0 m
()s 356.5 m
(The following upper-case commands are interpreted by the graphics system)s 348.0 m
(and may therefore be entered from the keyboard either in  task  mode  or)s 339.5 m
(from  "=gcur"  \(this  is the same help panel you get from cursor mode by)s 331.0 m
(typing ":.help"\):)s 322.5 m
()s 314.0 m
(    A                   draw and label the axes of current viewport)s 305.5 m
(    B                   backup over last instruction in frame buffer)s 297.0 m
(    C                   print the cursor position as it moves)s 288.5 m
(    D                   draw a line by marking the endpoints)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s S
%%Page: 15 15
/m{18 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    E                   expand plot by setting window corners)s 713.5 m
(    F                   set fast cursor \(for HJKL\))s 705.0 m
(    H                   step cursor left)s 696.5 m
(    J                   step cursor down)s 688.0 m
(    K                   step cursor up)s 679.5 m
(    L                   step cursor right)s 671.0 m
(    M                   move point under cursor to center of screen)s 662.5 m
(    P                   zoom out \(restore previous expansion\))s 654.0 m
(    R                   redraw the screen)s 645.5 m
(    T                   draw a text string)s 637.0 m
(    U                   undo last frame buffer edit)s 628.5 m
(    V                   set slow cursor \(for HJKL\))s 620.0 m
(    W                   select WCS at current position of cursor)s 611.5 m
(    X                   zoom in, X only)s 603.0 m
(    Y                   zoom in, Y only)s 594.5 m
(    Z                   zoom in, both X and Y)s 586.0 m
(    <                   set lower limit of plot to the cursor y value)s 577.5 m
(    >                   set upper limit of plot to the cursor y value)s 569.0 m
(    \\                   escape next character)s 560.5 m
(    :                   set cursor mode options)s 552.0 m
(    :!                  send a command to the host system)s 543.5 m
(    =                   short for ":.snap")s 535.0 m
(    0                   reset and redraw)s 526.5 m
(   1-9                  roam)s 518.0 m
()s 509.5 m
(If the character : is typed while in cursor mode the alpha  cursor  will)s 501.0 m
(appear  at  the  bottom  of  the  screen,  allowing a command line to be)s 492.5 m
(entered.  Command lines which  begin  with  a  period,  e.g.,  ":."  are)s 484.0 m
(interpreted  by  the  graphics  system; any other command will terminate)s 475.5 m
(the cursor read.  If not running an  IRAF  task  which  interprets  that)s 467.0 m
(other  command,  cursor  mode  will  be  terminated and the cursor value)s 458.5 m
(reported.)s 450.0 m
()s 441.5 m
(    :.axes[+-]              draw axes of viewport whenever screen is redrawn)s 433.0 m
(    :.case[+-]              enable case sensitivity for keystrokes)s 424.5 m
(    :.clear                 clear alpha memory \(e.g, this text\))s 416.0 m
(    :.cursor n              select cursor \(0=normal,1=crosshair,2=lightpen\))s 407.5 m
(    :.gflush                flush plotter output)s 399.0 m
(    :.help                  print help text for cursor mode)s 390.5 m
(    :.init                  initialize the graphics system)s 382.0 m
(    :.markcur[+-]           mark cursor position after each cursor read)s 373.5 m
(    :.off [keys]            disable selected cursor mode keys)s 365.0 m
(    :.on [keys]             enable selected cursor mode keys)s 356.5 m
(    :.page[+-]              enable screen clear before printing help text)s 348.0 m
(    :.read file             fill frame buffer from a file)s 339.5 m
(    :.show                  print cursor mode and graphics kernel status)s 331.0 m
(    :.snap [device]         make hardcopy of graphics display)s 322.5 m
(    :.txqual qual           set character generator quality \(normal,l,m,h\))s 314.0 m
(    :.txset format          set text drawing parameters \(size,up,hj,vj,etc\))s 305.5 m
(    :.xres=value            set X resolution \(stdgraph only\))s 297.0 m
(    :.yres=value            set Y resolution \(stdgraph only\))s 288.5 m
(    :.viewport x1 x2 y1 y2  set workstation viewport in world coordinates)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -4-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    :.write[!][+] file      save frame buffer in a spool file)s 713.5 m
(    :.zero                  reset viewport and redraw frame)s 705.0 m
()s 696.5 m
()s 688.0 m
()s 679.5 m
(3. ADVANCED USAGE)s 671.0 m
()s 662.5 m
()s 654.0 m
(3.1 THE FRAME BUFFER)s 645.5 m
()s 637.0 m
(    The concept of the FRAME BUFFER is essential to an understanding  of)s 628.5 m
(cursor  mode.   IRAF  tasks  output  all  graphics  in  the  form of GKI)s 620.0 m
(metacode instructions.  These instructions may be stored in  a  file  if)s 611.5 m
(desired,  or,  if  the  task  is  run  from the CL, they will usually be)s 603.0 m
(stored automatically in the frame buffer.  This is a large storage  area)s 594.5 m
(internal  to  the  CL  process, and is transparent to the user.  What is)s 586.0 m
(important is that after producing a plot on the screen, all or  part  of)s 577.5 m
(the  information in the plot is still present in the frame buffer.  That)s 569.0 m
(means that it is possible to  enter  an  interactive  session  with  the)s 560.5 m
(plot,  whether as a part of the task that produced the plot in the first)s 552.0 m
(place or after the task exits by typing "=gcur" from the CL.)s 543.5 m
()s 535.0 m
(If one wishes to recall the last plot after the task  which  created  it)s 526.5 m
(has  exited,  and the screen has since been cleared, the plot will still)s 518.0 m
(be in the frame buffer and can be redrawn by entering  cursor  mode  and)s 509.5 m
(typing  0  \(the  digit  zero\).  If the desired plot was not the last one)s 501.0 m
(plotted, hence is no longer  in  the  frame  buffer,  it  can  still  be)s 492.5 m
(recalled  if  it  was  saved  earlier  in  a metacode file on disk.  The)s 484.0 m
(command ":.read fname" will refill the frame buffer from  file  "fname",)s 475.5 m
(and redraw the plot.)s 467.0 m
()s 458.5 m
(All  graphics  instructions output since the last time the device screen)s 450.0 m
(was cleared reside in the frame buffer  unless  there  is  an  extremely)s 441.5 m
(large  amount  of  information  in the plot, in which case only the last)s 433.0 m
(part of the plot will be  saved  \(the  frame  buffer  dynamically  sizes)s 424.5 m
(itself  to  fit  the frame, but there is a fixed upper limit on its size)s 416.0 m
(of about 100 Kb\).)s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
(3.2 FILLING AND WRITING THE FRAME BUFFER)s 373.5 m
()s 365.0 m
(    The graphics  system  will  automatically  clear  the  frame  buffer)s 356.5 m
(whenever  the  screen is cleared when plotting.  For example, in a heavy)s 348.0 m
(interactive graphics session,  the  frame  buffer  will  be  filled  and)s 339.5 m
(cleared  many times, and at the end only the last screenful will be left)s 331.0 m
(in the frame buffer.  When reading a metacode  file  containing  several)s 322.5 m
(frames  with  ":.read", all frames will be plotted in sequence, but only)s 314.0 m
(the last one will remain in the buffer when the sequence finishes.)s 305.5 m
()s 297.0 m
(Some tasks have application-specific functions that  append  to,  rather)s 288.5 m
(than  overwrite  the  frame  buffer.   For  example, the "j" function in)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -5-)s 254.5 m
()s S
%%Page: 16 16
/m{18 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(IMPLOT plots another line from the image.  On the  screen  the  previous)s 713.5 m
(data  vectors  are  erased and the new ones drawn over.  However, if you)s 705.0 m
(then do a zoom or a reset screen, you will see EACH of the sets of  data)s 696.5 m
(vectors  drawn in succession \(some people unfairly consider this to be a)s 688.0 m
(bug, but actually  it  is  a  highly  desirable  feature  which  we  are)s 679.5 m
(justifiably proud of\).)s 671.0 m
()s 662.5 m
(The  contents of the frame buffer may be written to a metacode file with)s 654.0 m
(":.write file".  By default the frame buffer is appended to the file  if)s 645.5 m
(it  already  exists.   If  you  wish  to "clobber" an existing file, use)s 637.0 m
(":.write! file".  Also by default, the frame that  is  written  is  what)s 628.5 m
(you  currently  see  on  the  screen,  i.e.,  if you have zoomed in on a)s 620.0 m
(feature only what you see on the screen will be  saved.   To  write  the)s 611.5 m
(full  frame  \(the  one  you  would  see  if  you  first  did a "0"\), use)s 603.0 m
(":.write+ file".  To overwrite an existing metacode file  in  full-frame)s 594.5 m
(mode, use ":.write!+ file".)s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
(3.3 MOVING THE CURSOR AND MODIFYING THE DISPLAY AREA)s 552.0 m
()s 543.5 m
(    A  number  of  special  keystrokes  are  recognized  for interactive)s 535.0 m
(display control.  These keystrokes may be used  to  redraw  all  or  any)s 526.5 m
(portion  of  the spooled graphics; e.g., one may zoom in on a portion of)s 518.0 m
(the plot and then roam about on the plot at high  magnification.   Since)s 509.5 m
(the  spooled graphics vectors often contain more information than can be)s 501.0 m
(displayed at normal magnification, zooming in on  a  feature  may  bring)s 492.5 m
(out  additional detail \(the maximum resolution is 32768 points in either)s 484.0 m
(axis\).  Increasing the magnification will increase the  precision  of  a)s 475.5 m
(cursor read by the same factor.)s 467.0 m
()s 458.5 m
(If  the  graphics frame is a typical vector plot with drawn and labelled)s 450.0 m
(axes, magnifying a portion of the plot may cause the axes  to  be  lost.)s 441.5 m
(If  this  is  not  what is desired a keystroke \("A"\) is provided to draw)s 433.0 m
(and  label  the  axes  of  the  displayed  window.   The  axes  will  be )s 424.5 m
(overplotted  on  the  current display and will not be saved in the frame)s 416.0 m
(buffer, hence they will be lost when the frame  is  redrawn.   New  axes)s 407.5 m
(may  optionally  be drawn every time the viewport changes after entry of)s 399.0 m
(the command ":.axes+".  In cursor mode the viewport is the full  display)s 390.5 m
(area  of the output device, hence the tick mark labels of the drawn axes)s 382.0 m
(are drawn inside the viewport, on top of the data.)s 373.5 m
()s 365.0 m
(By default the cursor  mode  keystrokes  are  all  upper  case  letters,)s 356.5 m
(reserving  lower  case  for  applications  programs.  The terminal shift)s 348.0 m
(lock key may be used to simplify typing in  lengthy  interactive  cursor)s 339.5 m
(mode  sessions.   Most  of  the  upper-case  commands involve moving the)s 331.0 m
(graphics cursor and/or  redisplaying  a  different  part  of  the  plot.)s 322.5 m
(Special  keystrokes are provided for stepwise cursor motions to increase)s 314.0 m
(the speed of cursor setting on terminals that do not  have  fast  cursor)s 305.5 m
(motions  \(e.g.,  the  Retro-Graphics  enhanced VT100\).  These keystrokes)s 297.0 m
(will only work if the terminal you are using permits positioning of  the)s 288.5 m
(cursor under software control.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -6-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(The  commands  H,  J, K, and L \(upper case!\) move the cursor left, down,)s 713.5 m
(up, and right \(as in the VI text editor and in  Forth/Camera  graphics\).)s 705.0 m
(The  step  size  of  each cursor motion can change in one of three ways.)s 696.5 m
("F" increases the step size by a factor over the current step size  each)s 688.0 m
(time it is used; "V" decreases it similarly.)s 679.5 m
()s 671.0 m
(In  practice  the  F/V  speed  keys  are  rarely used because the cursor)s 662.5 m
(positioning algorithm will automatically adjust the  step  size  as  you)s 654.0 m
(move  the  cursor.   A large step size is used to cross the screen, then)s 645.5 m
(the step size is  automatically  decreased  as  you  get  close  to  the)s 637.0 m
(desired  feature.   Some  practice  is required to become adept at this,)s 628.5 m
(but soon it becomes natural and fast.)s 620.0 m
()s 611.5 m
(Arrow keys, thumbwheels, etc., if present on a  keyboard,  may  also  be)s 603.0 m
(used  for  cursor motions.  However, moving the cursor this way does not)s 594.5 m
(automatically report the position to the graphics system,  thus  if  the)s 586.0 m
(command  "C"  is  given,  you  will not get a position report after each)s 577.5 m
(motion.)s 569.0 m
()s 560.5 m
(The numeric keypad of the terminal \(if it has one\) is used to roam about)s 552.0 m
(when the zoom factor is greater than one.  A numeric key must be escaped)s 543.5 m
(to use it to exit cursor mode, i.e., if the applications program reading)s 535.0 m
(the   cursor   recognizes   the   digit  characters  as  commands.   The )s 526.5 m
(directional significance of the numeric keys in roam mode is obvious  if)s 518.0 m
(the terminal has a keypad, and is illustrated below.)s 509.5 m
()s 501.0 m
()s 492.5 m
(        7   8   9       135 090 045)s 484.0 m
()s 475.5 m
(        4   5   6       180 000 000)s 467.0 m
()s 458.5 m
(        1   2   3      -135 -90 -45)s 450.0 m
()s 441.5 m
()s 433.0 m
(Even  if the terminal has a keypad, it may not be possible to use it for)s 424.5 m
(roam on some terminals.  If the keypad does not work, the normal numeric)s 416.0 m
(keys  at  the  top of the keyboard will, after a glance at the keypad to)s 407.5 m
(see which digit to use.)s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
(3.4 REPORTING AND MARKING THE CURSOR POSITION)s 365.0 m
()s 356.5 m
(    If you wish to know the world \(data\) coordinates of a point  on  the)s 348.0 m
(screen,  issue  the  command  "C".  Then, every time you move the cursor)s 339.5 m
(with HJKL, the world coordinates at each new position will  be  reported)s 331.0 m
(on the lower left line of the screen.)s 322.5 m
()s 314.0 m
(If  the  cursor  mode  option  ":.markcur+"  is set, the position of the)s 305.5 m
(cursor will be marked with a small  plus  sign  when  time  cursor  mode)s 297.0 m
(exits,  returning  the  cursor position to the calling program.  This is)s 288.5 m
(useful when marking the positions of a large number of objects, to  keep)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -7-)s 254.5 m
()s S
%%Page: 17 17
/m{18 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(track  of  the  objects already marked.  The cursor position will not be)s 713.5 m
(marked until cursor mode exits, i.e., no cursor mode command will  cause)s 705.0 m
(the  mark  to  be drawn.  The mark cursor option remains in effect until)s 696.5 m
(you explitictly turn it off with ":.markcur-" or by typing GFLUSH.   The)s 688.0 m
(marks  are  drawn  in the frame buffer, hence they will survive zoom and)s 679.5 m
(roam or screen reset \(they can be erased with  repeated  B  commands  if)s 671.0 m
(desired\).)s 662.5 m
()s 654.0 m
(Some  plots  have  more than one world coordinate system \(WCS, the third)s 645.5 m
(value in the cursor value string\).  Suppose you are in cursor  mode  and)s 637.0 m
(the  frame  contains  two  separate plots, or there is only one plot but)s 628.5 m
(the lower x-axis is in Angstroms while  the  upper  one  is  in  inverse)s 620.0 m
(centimeters.   By  default the graphics system will automatically select)s 611.5 m
(the WCS \(viewport\) closest to the position of the  cursor,  returning  a)s 603.0 m
(cursor  position  in  that  coordinate  system.   If this is not what is)s 594.5 m
(desired, move the cursor to a position  that  belongs  unambiguously  to)s 586.0 m
(one  of  the  coordinate  systems and type "W".  Subsequent cursor reads)s 577.5 m
(will refer to the coordinate system you have  specified,  regardless  of)s 569.0 m
(the  position  of  the  cursor on the screen.  When the frame is cleared)s 560.5 m
(the WCS "lock" will be cleared as well.)s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
(3.5 ANNOTATING PLOTS)s 518.0 m
()s 509.5 m
(    The "T" command will prompt you for a  text  string  to  be  entered)s 501.0 m
(from  the  keyboard,  followed by a RETURN.  The text will appear on the)s 492.5 m
(screen \(and get stored in the frame buffer\), normally located  with  its)s 484.0 m
(lower  left  corner at the current cursor position.  This command may be)s 475.5 m
(used in conjunction with the "D" command to draw a line  from  the  text)s 467.0 m
(annotation  to  a feature of interest in the plot.  Notice that the text)s 458.5 m
(size  is  constant  in   cursor   mode   regardless   of   the   current )s 450.0 m
(magnification.   In order that text entered with "T" will look as nearly)s 441.5 m
(the same as possible on a hardcopy snapshot as it does  on  the  screen,)s 433.0 m
(you should set text quality to high.)s 424.5 m
()s 416.0 m
(Text  attributes  are controlled by two command options.  Use ":.txqual")s 407.5 m
(to set text quality to  "normal"  \(the  default\),  "low",  "medium",  or)s 399.0 m
("high".   Low-quality  text plots the fastest, high-quality the slowest.)s 390.5 m
(On terminals with hardware text generation such  as  the  Retro-Graphics)s 382.0 m
(Enhanced  VT100,  low-quality  characters  may  always come out upright,)s 373.5 m
(even if the whole text string's up-vector is not at 90 degrees.)s 365.0 m
()s 356.5 m
(Low-quality text sizes are also fixed on most devices, so in a  hardcopy)s 348.0 m
(snapshot of a plot the text will not necessarily look the same as it did)s 339.5 m
(on the screen \(in particular  it  may  overwrite  data  vectors\).   With)s 331.0 m
(low-quality  text  other  options such as "font=italic" will not work on)s 322.5 m
(most terminals \(although they may  come  out  correctly  on  a  hardcopy)s 314.0 m
(device\).   In  general,  set  ":.txqual=h"  if  you  are planning to get)s 305.5 m
(hardcopy output from a plot  you  are  annotating.   Changing  the  text)s 297.0 m
(quality  only  applies  to  text  entered with "T" AFTER the change; you)s 288.5 m
(cannot automatically set  all  text  to  high  quality  after  you  have)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -8-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(entered it.)s 713.5 m
()s 705.0 m
(There  are  several  ways to change the position of text relative to the)s 696.5 m
(cursor, its size, font, and orientation.  Use ":.txset"  to  change  the)s 688.0 m
(text drawing parameters as follows:)s 679.5 m
()s 671.0 m
(    keyword     values                                  default)s 662.5 m
()s 654.0 m
(    up          degrees counterclockwise, zero = +x     90)s 645.5 m
(    size        character size scale factor             1.0)s 637.0 m
(    path        left, right, up, down                   right)s 628.5 m
(    hjustify    normal, center, left, right             left)s 620.0 m
(    vjustify    normal, center, top, bottom             bottom)s 611.5 m
(    font        roman, greek, italic, bold              roman)s 603.0 m
(    quality     normal, low, medium, high               normal)s 594.5 m
(    color       integers greater than one               1)s 586.0 m
()s 577.5 m
(The "up" keyword controls the orientation of the character and the whole)s 569.0 m
(text string.  A text string oriented at +45 degrees to  the  horizontal,)s 560.5 m
(from left to right, would have "up=135".)s 552.0 m
()s 543.5 m
(Character sizes are all specified relative to a base size characteristic)s 535.0 m
(of each plotting device.  The size is a linear magnification factor,  so)s 526.5 m
("size=2.0" results in a character with four times the area.)s 518.0 m
()s 509.5 m
(Path  is relative to the up vector; a string of characters consecutively)s 501.0 m
(underneath each other with the normal  upright  orientation  would  have)s 492.5 m
("up=90;path=down".)s 484.0 m
()s 475.5 m
(The  justify parameters refer to the placement of the entire text string)s 467.0 m
(relative to the current  cursor  position.   To  center  a  text  string)s 458.5 m
(horizontally  over  a spike in a plot, position the cursor to just above)s 450.0 m
(the spike and set "h=c;v=b".)s 441.5 m
()s 433.0 m
(Font and quality were discussed above.  Setting the color will only have)s 424.5 m
(an effect on devices supporting it; if you have a color pen plotter, you)s 416.0 m
(must remember the current color setting, because there you cannot see it)s 407.5 m
(on the screen \(":.show" will reveal it however\).)s 399.0 m
()s 390.5 m
(If  you  make  a  mistake  or  don't like the appearance of the text you)s 382.0 m
(entered, all is not lost.  Use the command "B" to back up over the  last)s 373.5 m
(instruction  and  redraw  \(e.g.  with "0"\) until you're ready to reenter)s 365.0 m
(the text.  If you back up one instruction too far \(you lose some of  the)s 356.5 m
(data  vectors  for instance\) just type "U" to undo the last frame buffer)s 348.0 m
(edit, i.e. the backup.)s 339.5 m
()s 331.0 m
(For example,  to  annotate  a  spectral  line  with  "H-alpha",  written)s 322.5 m
(sideways up the screen from the current position in italics:)s 314.0 m
()s 305.5 m
(        :.txqual high)s 297.0 m
(        :.txset up=180;font=italic)s 288.5 m
(        T)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -9-)s 254.5 m
()s S
%%Page: 18 18
/m{18 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(        text: H-alpha)s 713.5 m
()s 705.0 m
(On  the last line, cursor mode provided the "text: " prompt.  The format)s 696.5 m
(could have been shortened to "u=180;f=i".)s 688.0 m
()s 679.5 m
()s 671.0 m
()s 662.5 m
(3.6 HARDCOPY SNAPSHOTS)s 654.0 m
()s 645.5 m
(    There are two main ways to get a hardcopy of the frame  buffer.   To)s 637.0 m
(get a copy of what you see on the screen directly on a hardcopy plotter,)s 628.5 m
(simply use ":.snap plottername".  When  you  do  so,  you  are  actually)s 620.0 m
(sending  the output down a buffered stream.  That is, you can do several)s 611.5 m
(":.snap"'s before anything actually comes out on the plotter.   This  is)s 603.0 m
(because  many plotters use several pages worth of blank paper before and)s 594.5 m
(after the actual plot.   If  you  are  planning  to  make  a  number  of)s 586.0 m
(snapshots  in  succession,  even  if  they  are  from  different "=gcur")s 577.5 m
(sessions, simply use ":.snap" for each one  until  you  are  done,  then)s 569.0 m
(issue  ":.gflush".  You can also flush graphics output to a plotter from)s 560.5 m
(the CL using the Language Package task GFLUSH:)s 552.0 m
()s 543.5 m
(        cl> =gcur)s 535.0 m
(        ...)s 526.5 m
(        :.snap versatec)s 518.0 m
(        ...)s 509.5 m
(        :.snap versatec)s 501.0 m
(        <RETURN>)s 492.5 m
(        cl>)s 484.0 m
(        cl> gflush)s 475.5 m
()s 467.0 m
()s 458.5 m
(Alternatively, you can  use  ":.write  mcodefile"  as  discussed  above,)s 450.0 m
(appending  as many different frames as you wish, then later from the CL,)s 441.5 m
(send the metacode file to a plotter with one of the graphics kernels:)s 433.0 m
()s 424.5 m
(        cl> implot)s 416.0 m
(        ...                             \(interactive session\))s 407.5 m
(        :.write file1.mc)s 399.0 m
(        <RETURN>)s 390.5 m
(        cl> stdplot file1.mc)s 382.0 m
()s 373.5 m
(                or)s 365.0 m
()s 356.5 m
(        cl> calcomp file1.mc            \(etc.\))s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
(3.7 ALTERNATE CURSOR INPUT)s 305.5 m
()s 297.0 m
(    Any program which uses cursor input may be run  noninteractively  as)s 288.5 m
(well  as in batch mode.  For example, suppost the task has a cursor type)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                 -10-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(parameter called "coords".  In normal interactive use a hardware  cursor)s 713.5 m
(read  will  occur every time the program reads the value of the "coords")s 705.0 m
(parameter.  To run the program in batch mode we  must  first  prepare  a)s 696.5 m
(list  of  cursor  values  in  a  text  file,  e.g., with the RGCURSOR or)s 688.0 m
(RIMCURSOR tasks in the LISTS package.  We then run  the  task  assigning)s 679.5 m
(the  name  of  the  cursor  list  file  to  the parameter "coords".  For)s 671.0 m
(example, to run the APPHOT task in batch, with the cursor  list  in  the)s 662.5 m
(file "starlist":)s 654.0 m
()s 645.5 m
(        cl> apphot arg1 arg2 ... argN coords=starlist &)s 637.0 m
()s 628.5 m
(The  program  will  then read successive cursor values from the starlist)s 620.0 m
(file, not knowing that the cursor values are coming  from  a  text  file)s 611.5 m
(rather than from actual cursor reads.)s 603.0 m
()s 594.5 m
(A  second  mechanism  is  available  for redirecting cursor input to the)s 586.0 m
(terminal.  This is most useful when working from a  terminal  that  does)s 577.5 m
(not  have  graphics,  or  when debugging software.  To work this way one)s 569.0 m
(must first set the value of the environment variable  STDGCUR  \(for  the)s 560.5 m
(graphics  cursor\)  or STDIMCUR \(for the image cursor\).  Set the value to)s 552.0 m
("text" to direct cursor reads to the terminal, e.g.:)s 543.5 m
()s 535.0 m
(        cl> set stdgcur = text)s 526.5 m
()s 518.0 m
(The cursor value will then  be  a  line  of  text  read  from  the  user)s 509.5 m
(terminal.   In  this  mode  the  user  enters at least two of the fields)s 501.0 m
(defining a cursor value.  Missing fields are  assigned  the  value  zero)s 492.5 m
(\(the  user  presumably will know that the program does not use the extra)s 484.0 m
(fields\).)s 475.5 m
()s 467.0 m
(        cl> = gcur)s 458.5 m
(        gcur: 345.33 23.22 1 c)s 450.0 m
(        345.33 23.22 1 c)s 441.5 m
(        cl>)s 433.0 m
()s 424.5 m
(An example of a cursor read request entered interactively by  the  user,)s 416.0 m
(taking  input  from  the terminal and sending output to the terminal, is)s 407.5 m
(shown above \(the CL typed the "gcur: " query and the  user  entered  the)s 399.0 m
(remainder  of  that  line\).  If the cursor device were "stdgraph" a real)s 390.5 m
(cursor read would occur and the equivalent interaction might  appear  as)s 382.0 m
(shown  below.   The  cursor  position  is returned in world coordinates,)s 373.5 m
(where the world coordinate system was defined by the last plot output to)s 365.0 m
(the  device.  For an imaging device the world coordinates will typically)s 356.5 m
(be the pixel coordinates of the image section being displayed.)s 348.0 m
()s 339.5 m
(        cl> = gcur)s 331.0 m
(        345.33 23.22 1 c)s 322.5 m
(        cl>)s 314.0 m
()s 305.5 m
(Redirecting cursor input to the terminal is useful when working  from  a)s 297.0 m
(nongraphics  workstation  and  when  debugging  programs.   ASCII cursor)s 288.5 m
(queries are the  only  type  supported  when  running  an  IRAF  program)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                 -11-)s 254.5 m
()s S
%%Page: 19 19
/m{18 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(outside  the  CL.   Cursor  input  may also be taken from a list file by)s 713.5 m
(assigning a filename to a cursor parameter, i.e., by  assigning  a  list)s 705.0 m
(file to a list structured parameter and overriding query mode:)s 696.5 m
()s 688.0 m
(        cl> gcur = filename)s 679.5 m
(        cl> = gcur)s 671.0 m
(        345.33 23.22 1 c)s 662.5 m
(        cl>)s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
(3.8 EXAMINING THE STATUS OF THE GRAPHICS SYSTEM)s 620.0 m
()s 611.5 m
(    The command ":.show" writes out a page of information concerning the)s 603.0 m
(state of the graphics system.  This is  an  example  of  such  a  status)s 594.5 m
(report:)s 586.0 m
()s 577.5 m
(    Cursor Mode Parameters:)s 569.0 m
()s 560.5 m
(        case    = YES)s 552.0 m
(        markcur = YES)s 543.5 m
(        page    = YES)s 535.0 m
(        axes    = NO)s 526.5 m
(        view    = full screen)s 518.0 m
(        keys    = ABCDEFGHIJKLMNOPQRSTUVWXYZ<>0123456789?:)s 509.5 m
(                ->ABCDEFGHIJKLMNOPQRSTUVWXYZ<>0123456789?:)s 501.0 m
()s 492.5 m
()s 484.0 m
(    Graphics Kernel Status:)s 475.5 m
()s 467.0 m
(        STDGRAPH: kernel=cl, device=vt640)s 458.5 m
(            memory=9472 \(8192fb+256sb+1024fio\), frame=1114+0 words)s 450.0 m
(            spool=yes, nopen=0, pid=0, in=0, out=0, redir=-6, wcs=0)s 441.5 m
(            text size = 1., up=90, path=right, hj=left, vj=bottom, color=1)s 433.0 m
()s 424.5 m
(        STDIMAGE:       disconnected)s 416.0 m
(        STDPLOT:        disconnected)s 407.5 m
()s 399.0 m
(The cursor mode parameters report the current values of the ":." command)s 390.5 m
(options; these options are in effect  for  all  of  three  the  standard)s 382.0 m
(graphics  streams, i.e., STDGRAPH \(the graphics terminal\), STDIMAGE \(the)s 373.5 m
(image display\), and STDPLOT \(batch plotters\).)s 365.0 m
()s 356.5 m
(The graphics kernel status reports the  status  of  each  of  the  three)s 348.0 m
(graphics  streams.   These  streams are independent and in principle any)s 339.5 m
(graphics device may be connected to any stream.  The KERNEL field  gives)s 331.0 m
(the  name  of  the  kernel  connected to that stream, if any.  The value)s 322.5 m
("cl" refers to the STDGRAPH kernel, which is  built  into  the  CL,  and)s 314.0 m
(which  can  only  talk  to  graphics  terminals.  Any other value is the)s 305.5 m
(filename of an external graphics kernel, running as a subprocess of  the)s 297.0 m
(CL  process.  The DEVICE field gives the name of the device named in the)s 288.5 m
(last "open workstation" command on that stream.  This is the device  the)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                 -12-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(stream is currently writing plots to.)s 713.5 m
()s 705.0 m
(The  significance  of  the  remaining  kernel status fields is described)s 696.5 m
(below.)s 688.0 m
()s 679.5 m
()s 671.0 m
(        memory          - total memory used, chars)s 662.5 m
(        fb              - size of primary frame buffer, chars)s 654.0 m
(        sb              - size of scratch frame buffer \(used by A\))s 645.5 m
(        fio             - size of the FIO buffer for the stream)s 637.0 m
(        frame           - amount of data in the frame + data in SB)s 628.5 m
()s 620.0 m
(        spool           - enable spooling of graphics in frame buffer?)s 611.5 m
(        nopen           - open count \(should be zero\))s 603.0 m
(        pid             - process id of kernel subprocess)s 594.5 m
(        in              - fd of process in, if subkernel)s 586.0 m
(        out             - fd of process out, if subkernel)s 577.5 m
(        redir           - redirection information for pseudofile i/o)s 569.0 m
(        wcs             - current WCS, zero if not locked with W)s 560.5 m
()s 552.0 m
(        text size       - current text size relative to device's base size)s 543.5 m
(        up              - text up vector)s 535.0 m
(        path            - text character drawing path)s 526.5 m
(        hj              - horizontal justification)s 518.0 m
(        vj              - vertical justification)s 509.5 m
(        color           - index of current color attribute)s 501.0 m
()s 492.5 m
()s 484.0 m
(This status report reflects only the information known to the  CL.   The)s 475.5 m
(graphics  subkernels,  which  are subprocesses of the CL, may themselves)s 467.0 m
(have subprocesses, sometimes on different nodes in the local network.)s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
(3.9 INITIALIZING THE GRAPHICS SYSTEM)s 424.5 m
()s 416.0 m
(    The graphics system can normally be initialized  by  typing  GFLUSH.)s 407.5 m
(This  will  clear  the  frame buffer and disconnect all kernels, freeing)s 399.0 m
(memory  and  file  descriptors,  and  reducing  the  subprocess   count. )s 390.5 m
(Shutting  down  a  graphics subkernel automatically flushes any buffered)s 382.0 m
(graphics output.  The CL automatically calls  GFLUSH  during  logout  to)s 373.5 m
(shutdown the graphics system in an orderly fashion.)s 365.0 m
()s 356.5 m
()s 348.0 m
(BUGS)s 339.5 m
(    Despite  the  fact  that the CL has graphics and image cursor access)s 331.0 m
(    capabilities, there is no guarantee that one can access  the  cursor)s 322.5 m
(    on  a  particular  device.   A GRAPHCAP entry for the device is also)s 314.0 m
(    required,  as  is  a  graphics  kernel  if  the  device  is  not   a )s 305.5 m
(    conventional  graphics terminal \(e.g., an image display\).  If all of)s 297.0 m
(    these pieces are not in place, the  system  will  abort  the  cursor)s 288.5 m
(    read,  complaining  that  it cannot find a termcap or graphcap entry)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                 -13-)s 254.5 m
()s S
%%Page: 20 20
/m{18 exch moveto}bind def
756 m
(CURSORS \(Apr87\)                 language                 CURSORS \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    for the device, or that it cannot open a connected  subprocess  \(the)s 713.5 m
(    subkernel\).)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SEE ALSO)s 679.5 m
(    The GIO Reference Manual)s 671.0 m
()s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                 -14-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(DECLARATIONS \(Feb86\)            language            DECLARATIONS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    declarations -- parameter and variable declarations)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    vartype [*]varname[index_list] [= init_value] [{options}] [, ...])s 671.0 m
(    )s 662.5 m
(      or)s 654.0 m
(    )s 645.5 m
(    vartype [*]varname[index_list] [{init_value [, options]}] [, ...])s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(ELEMENTS)s 611.5 m
(    )s 603.0 m
(    vartype)s 594.5 m
(        One of the legal variable types, i.e.:)s 586.0 m
(        )s 577.5 m
(                int, bool, char, real, gcur, imcur, struct, file)s 569.0 m
(    )s 560.5 m
(    varname)s 552.0 m
(        The name of the variable or parameter.  The name must begin with)s 543.5 m
(        an alphabetic character or '_'  and  should  be  fewer  than  64)s 535.0 m
(        characters  in  length.   If the name is preceded by a '*', then)s 526.5 m
(        the variable is 'list-directed', meaning that  a  new  value  is)s 518.0 m
(        taken from a list each time the parameter is read.)s 509.5 m
(    )s 501.0 m
(    index_list)s 492.5 m
(        The  index_list  consists  of  a  series  of  ranges enclosed in)s 484.0 m
(        square brackets.  A range may be a single integer in which  case)s 475.5 m
(        the  range  is from 1 to that integer, or two integers separated)s 467.0 m
(        by a colon.  The second integer must be larger than  the  first.)s 458.5 m
(        Ranges  are  separated  by  commas.  In the special case that no)s 450.0 m
(        ranges are specified by the user, the variable is assumed to  be)s 441.5 m
(        a  one-dimensional  array  with a  range from 1 to the number of)s 433.0 m
(        elements in the initialization list.)s 424.5 m
(    )s 416.0 m
(    init_value)s 407.5 m
(        The  initialization  value  is  a  single   value   for   scalar )s 399.0 m
(        parameters  but may be a list for array.  A repetition count may)s 390.5 m
(        be specified in the form)s 382.0 m
(        )s 373.5 m
(                rep_count \(value\))s 365.0 m
(        )s 356.5 m
(        )s 348.0 m
(        which is equivalent to value repeated the rep_count times.   The)s 339.5 m
(        values in the initialization list are separated by commas.)s 331.0 m
(    )s 322.5 m
(    options)s 314.0 m
(        Options  define  certain characteristics of the variables.  Each)s 305.5 m
(        options has the form opt_name=value where value is  a  constant.)s 297.0 m
(        The current options are:)s 288.5 m
(        )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 21 21
/m{18 exch moveto}bind def
756 m
(DECLARATIONS \(Feb86\)            language            DECLARATIONS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(        mode)s 713.5 m
(            Determines  whether the parameter is queried for and whether)s 705.0 m
(            it is learned after task execution.  The  default  mode  for)s 696.5 m
(            parameters  declared  in the argument list of a CL procedure)s 688.0 m
(            is "a", and "h" otherwise.)s 679.5 m
(        )s 671.0 m
(        min The minimum allowable value for the parameter.  If  omitted,)s 662.5 m
(            no min checking is performed.)s 654.0 m
(        )s 645.5 m
(        max The  maximum allowable value for the parameter.  If omitted,)s 637.0 m
(            no max checking is performed.)s 628.5 m
(        )s 620.0 m
(        prompt)s 611.5 m
(            The prompt to be used when the parameter is queried for.)s 603.0 m
(        )s 594.5 m
(        enum)s 586.0 m
(            The set of allowable  string  values  for  a  string  valued)s 577.5 m
(            parameter.     The   character   '|'   delimits   successive  )s 569.0 m
(            enumerated strings.)s 560.5 m
(        )s 552.0 m
(        filetype)s 543.5 m
(            For a FILE type parameter, a  string  containing  characters)s 535.0 m
(            giving  file characteristics to be checked for when the file)s 526.5 m
(            parameter is used.)s 518.0 m
(            )s 509.5 m
(                r       file exists and is readable)s 501.0 m
(                w       file exists and is is writable)s 492.5 m
(                n       file does not exist)s 484.0 m
(                b       file is a binary file)s 475.5 m
(                t       file is a text file)s 467.0 m
(        )s 458.5 m
(        length)s 450.0 m
(            For a string type parameter, the  number  of  characters  of)s 441.5 m
(            storage  to  allocate  for the string.  If the actual length)s 433.0 m
(            of a string later exceeds the  allocated  value  the  string)s 424.5 m
(            will be silently truncated.)s 416.0 m
(        )s 407.5 m
(        Note  that  all  string  constants  in  an  options list must be)s 399.0 m
(        enclosed in quotes.)s 390.5 m
(    )s 382.0 m
(    )s 373.5 m
(    )s 365.0 m
(DESCRIPTION)s 356.5 m
(    Declaration  statements  are  used   for   inline   declaration   of )s 348.0 m
(    parameters  and  local  variables.    A  declaration after the begin)s 339.5 m
(    statement of  a  procedure  script  is  a  declaration  of  a  local)s 331.0 m
(    variable,   but   any   other   declaration   defines  a  parameter. )s 322.5 m
(    Parameters are generally  saved  between  invocations  of  a  script)s 314.0 m
(    while local variables are not.)s 305.5 m
(    )s 297.0 m
(    Parameter and variable declarations should always precede executable)s 288.5 m
(    statements with  a  script.   Certain  functions  are  legal  before)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(DECLARATIONS \(Feb86\)            language            DECLARATIONS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    declarations,  but  this  depends  upon  certain  hidden  aspects of)s 713.5 m
(    declarations which are not obvious to the user.)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(EXAMPLES)s 679.5 m
(    )s 671.0 m
(    real    x)s 662.5 m
(    int     ii=32)s 654.0 m
(    int     y {min=0, max=14})s 645.5 m
(    char    z="abc" {enum="abc|def|ghi", mode="q"})s 637.0 m
(    )s 628.5 m
(    bool    isotest {YES, mode="ql",)s 620.0 m
(                prompt="Do you want to test for isotropy?"})s 611.5 m
(    )s 603.0 m
(    int     ii=1 {min=0,max=10, prompt="Number of images", mode="h"})s 594.5 m
(    file    infile="testfile" {filetype="r"})s 586.0 m
(    struct  line {length=80, mode="h"})s 577.5 m
(    )s 569.0 m
(    real    array[10])s 560.5 m
(    int     iarray[15]=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15 {min=0, max=100})s 552.0 m
(    int     jarray[15] { 5\(0\), 5\(2\), 5\(4\), min=0, max=400})s 543.5 m
(    char    carray[5]= 5\("Junk"\))s 535.0 m
(    bool    flags[4,-3:3] = 28\(NO\) {mode="h", prompt="Value set"})s 526.5 m
(    file    inp_files[3]= "fil1.inp", "fil2.inp", "fil3.inp")s 518.0 m
(    )s 509.5 m
(    int     karray[3]=1     # \(note second and third elements are undefined\))s 501.0 m
(    struct  *list="inputfile.list" {mode="q"})s 492.5 m
(    int     *ilist="infile.inp" {mode="h", min=0, max=100})s 484.0 m
(    )s 475.5 m
(    )s 467.0 m
(BUGS)s 458.5 m
(    Options are only permitted for parameters, not local variables.)s 450.0 m
(    The filetype options are recognized but are not implemented internally.)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(SEE ALSO)s 416.0 m
(    parameters, procedure, begin)s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s S
%%Page: 22 22
/m{18 exch moveto}bind def
756 m
(DEFAULT \(Feb86\)                 language                 DEFAULT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    switch -- switch case statement)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    switch \(expr\) {)s 671.0 m
(    case val1 [, val1,...]:)s 662.5 m
(        statements)s 654.0 m
(    case val3 [, val3,...]:)s 645.5 m
(        statements)s 637.0 m
(            \(etc.\))s 628.5 m
(    default:)s 620.0 m
(        statements)s 611.5 m
(    })s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(ELEMENTS)s 577.5 m
(    )s 569.0 m
(    expr)s 560.5 m
(        An  integer-valued  expression  tested  before  entry  into  the )s 552.0 m
(        switch block.)s 543.5 m
(    )s 535.0 m
(    valN)s 526.5 m
(        Integer valued constants used to match expression.)s 518.0 m
(    )s 509.5 m
(    statements)s 501.0 m
(        Simple   or   compound   statements  to  be  executed  when  the )s 492.5 m
(        appropriate case or default block is selected.)s 484.0 m
(        )s 475.5 m
(        )s 467.0 m
(DESCRIPTION)s 458.5 m
(    The SWITCH statement provides a  multiway  branch  capability.   The)s 450.0 m
(    switch  expression is evaluated and control branches to the matching)s 441.5 m
(    CASE block.  If there is no match the  DEFAULT  block,  if  present,)s 433.0 m
(    receives  control.   If  no  DEFAULT block is present, the switch is)s 424.5 m
(    skipped.)s 416.0 m
(    )s 407.5 m
(    Each CASE statement consists of a list of values defining the  case,)s 399.0 m
(    and  an  executable  statement \(possibly compound\) to be executed if)s 390.5 m
(    the case is selected by the switch.  Execution will  continue  until)s 382.0 m
(    the  next  case is reached, at which time a branch out of the SWITCH)s 373.5 m
(    statement occurs.  Note this difference  from  the  C  switch  case,)s 365.0 m
(    where  an explicit BREAK statement is required to exit a switch.  If)s 356.5 m
(    a BREAK is used in a CL switch, it will act upon the loop  statement)s 348.0 m
(    containing the switch, not the switch itself.)s 339.5 m
(    )s 331.0 m
(    Note  that  both the switch expression and the case constants may be)s 322.5 m
(    integers, or single characters which are evaluated  to  their  ASCII)s 314.0 m
(    equivalents.)s 305.5 m
(    )s 297.0 m
(    The  DEFAULT  statement  must  be  the  last statement in the switch)s 288.5 m
(    block.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(DEFAULT \(Feb86\)                 language                 DEFAULT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(EXAMPLES)s 713.5 m
(    1. Multiple cases, no default case.)s 705.0 m
(    )s 696.5 m
(            switch \(opcode\) {)s 688.0 m
(            case 1:)s 679.5 m
(                task1 \(args\))s 671.0 m
(            case 2:)s 662.5 m
(                task2 \(args\))s 654.0 m
(            case 5:)s 645.5 m
(                task5 \(args\))s 637.0 m
(            })s 628.5 m
(    )s 620.0 m
(    2. Multiple values in a case.)s 611.5 m
(    )s 603.0 m
(            switch \(digit\) {)s 594.5 m
(            case '1','2','3','4','5','6','7':)s 586.0 m
(                n = n * 8 + digit - '0')s 577.5 m
(            default:)s 569.0 m
(                error \(1, "invalid number"\))s 560.5 m
(            })s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(BUGS)s 526.5 m
(    Only integer values are allowed \(no strings\).  The case values  must)s 518.0 m
(    be constants; ranges are not permitted.)s 509.5 m
(    )s 501.0 m
(    )s 492.5 m
(SEE ALSO)s 484.0 m
(    if else, goto)s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 23 23
/m{18 exch moveto}bind def
756 m
(DEFPAC \(Feb86\)                  language                  DEFPAC \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    defpac  -- test if the named package is defined)s 705.0 m
(    deftask -- test if the named task is defined)s 696.5 m
(    defpar  -- test if the named parameter is defined)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(USAGE)s 662.5 m
(    defpac  \(pacname\))s 654.0 m
(    deftask \(taskname\))s 645.5 m
(    defpar  \(param\))s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(PARAMETERS)s 611.5 m
(    )s 603.0 m
(    pacname)s 594.5 m
(        An IRAF package name.)s 586.0 m
(    )s 577.5 m
(    taskname)s 569.0 m
(        An  IRAF  taskname.   It  may  be  specified as "taskname" or as)s 560.5 m
(        "packagename.taskname".)s 552.0 m
(    )s 543.5 m
(    param)s 535.0 m
(        An IRAF parameter name.  It may  be  specified  as  "paramname",)s 526.5 m
(        "taskname.paramname" or "packagename.taskname.paramname".)s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(DESCRIPTION)s 492.5 m
(    These  routines  return  a  boolean  value  indicating  whether  the )s 484.0 m
(    relevant parameter, task  or  package  has  been  defined.   A  task)s 475.5 m
(    becomes  defined when the package to which it belongs is "loaded" by)s 467.0 m
(    entering the name of the package as a command, or  whenever  a  TASK)s 458.5 m
(    declaration  is  input  to the CL.  A parameter becomes defined when)s 450.0 m
(    the task to which it belongs  is  defined;  the  task  need  not  be)s 441.5 m
(    currently  executing  for  its  parameters  to  be  defined.  When a)s 433.0 m
(    package is exited, e.g., after entry of the  BYE  command,  all  the)s 424.5 m
(    task and parameter declarations for the package are discarded.)s 416.0 m
(    )s 407.5 m
(    )s 399.0 m
(EXAMPLES)s 390.5 m
(    1. Test if a task exists.)s 382.0 m
(    )s 373.5 m
(            cl> if \(deftask \("system.page"\)\))s 365.0 m
(            >>>     print \("task page exists"\))s 356.5 m
(            >>> else)s 348.0 m
(            >>>     print \("task page not found"\))s 339.5 m
(            task page exists)s 331.0 m
(            cl>)s 322.5 m
(    )s 314.0 m
(    2.  Add the value of the named parameter into a sum, but only if the)s 305.5 m
(    parameter exists \(the example is for a script\).)s 297.0 m
(    )s 288.5 m
(            sum = 0)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(DEFPAC \(Feb86\)                  language                  DEFPAC \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            for \(i=0;  i <= 10;  i+=1\) {)s 713.5 m
(                parname = "data" // i)s 705.0 m
(                if \(defpar \(parname\))s 696.5 m
(                    sum += parname)s 688.0 m
(            })s 679.5 m
(    )s 671.0 m
(    )s 662.5 m
(SEE ALSO)s 654.0 m
(    package, task, redefine, lparam)s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 24 24
/m{18 exch moveto}bind def
756 m
(DEFPAR \(Feb86\)                  language                  DEFPAR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    defpac  -- test if the named package is defined)s 705.0 m
(    deftask -- test if the named task is defined)s 696.5 m
(    defpar  -- test if the named parameter is defined)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(USAGE)s 662.5 m
(    defpac  \(pacname\))s 654.0 m
(    deftask \(taskname\))s 645.5 m
(    defpar  \(param\))s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(PARAMETERS)s 611.5 m
(    )s 603.0 m
(    pacname)s 594.5 m
(        An IRAF package name.)s 586.0 m
(    )s 577.5 m
(    taskname)s 569.0 m
(        An IRAF taskname.  It may  be  specified  as  "taskname"  or  as)s 560.5 m
(        "packagename.taskname".)s 552.0 m
(    )s 543.5 m
(    param)s 535.0 m
(        An  IRAF  parameter  name.   It may be specified as "paramname",)s 526.5 m
(        "taskname.paramname" or "packagename.taskname.paramname".)s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(DESCRIPTION)s 492.5 m
(    These  routines  return  a  boolean  value  indicating  whether  the )s 484.0 m
(    relevant  parameter,  task  or  package  has  been  defined.  A task)s 475.5 m
(    becomes defined when the package to which it belongs is "loaded"  by)s 467.0 m
(    entering  the  name  of the package as a command, or whenever a TASK)s 458.5 m
(    declaration is input to the CL.  A parameter  becomes  defined  when)s 450.0 m
(    the  task  to  which  it  belongs  is  defined; the task need not be)s 441.5 m
(    currently executing for  its  parameters  to  be  defined.   When  a)s 433.0 m
(    package  is  exited,  e.g.,  after entry of the BYE command, all the)s 424.5 m
(    task and parameter declarations for the package are discarded.)s 416.0 m
(    )s 407.5 m
(    )s 399.0 m
(EXAMPLES)s 390.5 m
(    1. Test if a task exists.)s 382.0 m
(    )s 373.5 m
(            cl> if \(deftask \("system.page"\)\))s 365.0 m
(            >>>     print \("task page exists"\))s 356.5 m
(            >>> else)s 348.0 m
(            >>>     print \("task page not found"\))s 339.5 m
(            task page exists)s 331.0 m
(            cl>)s 322.5 m
(    )s 314.0 m
(    2. Add the value of the named parameter into a sum, but only if  the)s 305.5 m
(    parameter exists \(the example is for a script\).)s 297.0 m
(    )s 288.5 m
(            sum = 0)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(DEFPAR \(Feb86\)                  language                  DEFPAR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            for \(i=0;  i <= 10;  i+=1\) {)s 713.5 m
(                parname = "data" // i)s 705.0 m
(                if \(defpar \(parname\))s 696.5 m
(                    sum += parname)s 688.0 m
(            })s 679.5 m
(    )s 671.0 m
(    )s 662.5 m
(SEE ALSO)s 654.0 m
(    package, task, redefine, lparam)s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 25 25
/m{18 exch moveto}bind def
756 m
(DEFTASK \(Feb86\)                 language                 DEFTASK \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    defpac  -- test if the named package is defined)s 705.0 m
(    deftask -- test if the named task is defined)s 696.5 m
(    defpar  -- test if the named parameter is defined)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(USAGE)s 662.5 m
(    defpac  \(pacname\))s 654.0 m
(    deftask \(taskname\))s 645.5 m
(    defpar  \(param\))s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(PARAMETERS)s 611.5 m
(    )s 603.0 m
(    pacname)s 594.5 m
(        An IRAF package name.)s 586.0 m
(    )s 577.5 m
(    taskname)s 569.0 m
(        An  IRAF  taskname.   It  may  be  specified as "taskname" or as)s 560.5 m
(        "packagename.taskname".)s 552.0 m
(    )s 543.5 m
(    param)s 535.0 m
(        An IRAF parameter name.  It may  be  specified  as  "paramname",)s 526.5 m
(        "taskname.paramname" or "packagename.taskname.paramname".)s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(DESCRIPTION)s 492.5 m
(    These  routines  return  a  boolean  value  indicating  whether  the )s 484.0 m
(    relevant parameter, task  or  package  has  been  defined.   A  task)s 475.5 m
(    becomes  defined when the package to which it belongs is "loaded" by)s 467.0 m
(    entering the name of the package as a command, or  whenever  a  TASK)s 458.5 m
(    declaration  is  input  to the CL.  A parameter becomes defined when)s 450.0 m
(    the task to which it belongs  is  defined;  the  task  need  not  be)s 441.5 m
(    currently  executing  for  its  parameters  to  be  defined.  When a)s 433.0 m
(    package is exited, e.g., after entry of the  BYE  command,  all  the)s 424.5 m
(    task and parameter declarations for the package are discarded.)s 416.0 m
(    )s 407.5 m
(    )s 399.0 m
(EXAMPLES)s 390.5 m
(    1. Test if a task exists.)s 382.0 m
(    )s 373.5 m
(            cl> if \(deftask \("system.page"\)\))s 365.0 m
(            >>>     print \("task page exists"\))s 356.5 m
(            >>> else)s 348.0 m
(            >>>     print \("task page not found"\))s 339.5 m
(            task page exists)s 331.0 m
(            cl>)s 322.5 m
(    )s 314.0 m
(    2.  Add the value of the named parameter into a sum, but only if the)s 305.5 m
(    parameter exists \(the example is for a script\).)s 297.0 m
(    )s 288.5 m
(            sum = 0)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(DEFTASK \(Feb86\)                 language                 DEFTASK \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            for \(i=0;  i <= 10;  i+=1\) {)s 713.5 m
(                parname = "data" // i)s 705.0 m
(                if \(defpar \(parname\))s 696.5 m
(                    sum += parname)s 688.0 m
(            })s 679.5 m
(    )s 671.0 m
(    )s 662.5 m
(SEE ALSO)s 654.0 m
(    package, task, redefine, lparam)s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 26 26
/m{18 exch moveto}bind def
756 m
(DPARAM \(Apr87\)                  language                  DPARAM \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    dparam -- dump the parameters of a pset as a series of assignments)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    dparam pset [pset ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    pset)s 628.5 m
(        The name of the parameter set to be listed.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    DPARAM lists one  or  more  parameter  sets.   Psets  are  specified)s 586.0 m
(    either  by  the  name of the task with which the pset is associated,)s 577.5 m
(    or by filename \(pset files have the ".par" extension\).   If  a  file)s 569.0 m
(    type  pset is listed the extension must be included, since it is the)s 560.5 m
(    presence or absence of the filename extension which DPARAM  uses  to)s 552.0 m
(    distinguish between task-psets and named \(file\) psets.)s 543.5 m
(    )s 535.0 m
(    Each parameter is listed on a single line with the following format.)s 526.5 m
(    The list of assignments is terminated by the string "# EOF" so  that)s 518.0 m
(    programs  reading  the list from a stream can easily distinguish the)s 509.5 m
(    end of the variable length list of parameters.)s 501.0 m
(    )s 492.5 m
(            task.param = value)s 484.0 m
(    )s 475.5 m
(    Here "task.param" is the name of the parameter, and "value"  is  the)s 467.0 m
(    current  value  of  the parameter.  The assignment is skipped if the)s 458.5 m
(    value is undefined.  There is no way to distinguish  between  hidden)s 450.0 m
(    parameters and query parameters.)s 441.5 m
(    )s 433.0 m
(    The  output  from DPARAM is often used as input to programs, whereas)s 424.5 m
(    the output from LPARAM is formatted in a way which makes  it  easier)s 416.0 m
(    for  humans  to  read.   For  example, the output from DPARAM may be)s 407.5 m
(    redirected into a file and used on the IRAF  main  command  line  to)s 399.0 m
(    set the task's parameters, when debugging a task standalone.)s 390.5 m
(    )s 382.0 m
(    )s 373.5 m
(EXAMPLES)s 365.0 m
(    1. List the parameter for the task DELETE.  Note that the positional)s 356.5 m
(    parameters are listed first, in the order  in  which  they  must  be)s 348.0 m
(    specified on the command line, followed by the hidden parameters.)s 339.5 m
(    )s 331.0 m
(            cl> dparam delete)s 322.5 m
(            delete.files = "temp")s 314.0 m
(            delete.go_ahead = yes)s 305.5 m
(            delete.verify = no)s 297.0 m
(            delete.default_action = yes)s 288.5 m
(            delete.allversions = yes)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(DPARAM \(Apr87\)                  language                  DPARAM \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            delete.subfiles = yes)s 713.5 m
(            delete.mode = "ql")s 705.0 m
(            # EOF)s 696.5 m
(    )s 688.0 m
(    2.  List  the  contents  of the file pset "delete.par".  Named psets)s 679.5 m
(    such as this are most commonly  produced  using  the  ":W  FILENAME")s 671.0 m
(    colon   command  in  EPARAM,  e.g.,  to  prepare  several  different )s 662.5 m
(    versions of the parameter set for a task.)s 654.0 m
(    )s 645.5 m
(            cl> dparam delete.par)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(BUGS)s 603.0 m
(    You cannot list the parameters of  a  task  that  does  not  have  a)s 594.5 m
(    parameter file \(e.g., all builtin tasks\).)s 586.0 m
(    )s 577.5 m
(    )s 569.0 m
(SEE ALSO)s 560.5 m
(    eparam, lparam, cache)s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 27 27
/m{18 exch moveto}bind def
756 m
(EDIT \(Apr87\)                    language                    EDIT \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    edit -- edit a text file)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    edit files [files...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    files)s 628.5 m
(        The file or files to be edited.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    The EDIT task invokes a host system editor to edit the named file or)s 586.0 m
(    files.  The editor to be used is determined by the value of  the  CL)s 577.5 m
(    environment  variable  EDITOR.   Filename  mapping is applied to the)s 569.0 m
(    FILES argument  strings  to  convert  virtual  filenames  into  host)s 560.5 m
(    system  filenames.   File  templates  are  not supported, unless the)s 552.0 m
(    host system editor supports them.)s 543.5 m
(    )s 535.0 m
(    The EDT, EMACS,  and  VI  editors  are  currently  supported.   Each)s 526.5 m
(    editor  interface  is  controlled  by  an  EDCAP  table  file in the)s 518.0 m
(    logical directory "dev$"; these files are also used by the  EHISTORY)s 509.5 m
(    and  EPARAM  screen  editors.  For example, the file "dev$edt.ed" is)s 501.0 m
(    required to run the EDT editor.  The EDITOR_CMD field of  the  EDCAP)s 492.5 m
(    file  defines  the  command to be send to the host system to run the)s 484.0 m
(    editor; this is  not  necessarily  the  same  as  the  name  of  the)s 475.5 m
(    editor.   Support  for  additional editors is easily added by adding)s 467.0 m
(    new EDCAP files.)s 458.5 m
(    )s 450.0 m
(    )s 441.5 m
(EXAMPLES)s 433.0 m
(    1. Edit the login.cl file.)s 424.5 m
(    )s 416.0 m
(            cl> edit home$login.cl)s 407.5 m
(    )s 399.0 m
(    2. Edit the file "temp" in the current directory.)s 390.5 m
(    )s 382.0 m
(            cl> edit temp)s 373.5 m
(    )s 365.0 m
(    3. On a UNIX  system,  edit  all  the  ".x"  files  in  the  current)s 356.5 m
(    directory.   Filename  templates  cannot  be  used  with  the editor)s 348.0 m
(    unless the editor itself, or the host system, expands  the  filename)s 339.5 m
(    template.)s 331.0 m
(    )s 322.5 m
(            cl> edit *.x)s 314.0 m
(    )s 305.5 m
(    )s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(EDIT \(Apr87\)                    language                    EDIT \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(BUGS)s 713.5 m
(    The  EOF  control  character is set in the edcap file for the editor)s 705.0 m
(    language in use, e.g., "dev$vi.ed" for the VI editor.  The value  in)s 696.5 m
(    this  file may differ from that used on the local system; if this is)s 688.0 m
(    the case, the system installer should edit the file and  change  the)s 679.5 m
(    value of the parameter EXIT_UPDATE.)s 671.0 m
(    )s 662.5 m
(    The  control  sequences for the keyboard arrow keys are also defined)s 654.0 m
(    in the ".ed" edcap file; TERMCAP should be used instead.)s 645.5 m
(    )s 637.0 m
(    )s 628.5 m
(SEE ALSO)s 620.0 m
(    ehistory, eparam)s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 28 28
/m{18 exch moveto}bind def
756 m
(EHISTORY \(Jun86\)                language                EHISTORY \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    ehistory -- edit and re-execute previous commands)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    ehistory \(or just "e"\))s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    None.)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(DESCRIPTION)s 611.5 m
(    The EHISTORY command calls up a screen  editor  to  edit  previously)s 603.0 m
(    executed  commands,  executing  the  edited  command  when return is)s 594.5 m
(    typed.  Interrupt \(e.g., <ctrl/c> may be used  to  escape  from  the)s 586.0 m
(    editor  at  any  time.   The  type  of editor commands recognized is)s 577.5 m
(    determined by the value  of  the  CL  environment  variable  EDITOR,)s 569.0 m
(    which may currently be set to "edt", "emacs", or "vi".)s 560.5 m
(    )s 552.0 m
(    After  the  EHISTORY  command  is  entered,  the previous command is)s 543.5 m
(    displayed at the bottom of the terminal.  If  the  previous  command)s 535.0 m
(    was a compound statement, or if it extended over more than one line,)s 526.5 m
(    all the lines  of  the  command  will  be  displayed.   To  reach  a)s 518.0 m
(    different  command simply enter the appropriate cursor movement keys)s 509.5 m
(    for the editor type being used.  When the cursor  attempts  to  move)s 501.0 m
(    above  the  current  command the previous command will be displayed.)s 492.5 m
(    Similarly when it attempts to move  below,  the  next  command  will)s 484.0 m
(    appear.   Hitting  the return key will execute the command currently)s 475.5 m
(    being edited.)s 467.0 m
(    )s 458.5 m
(    The CL parameter "ehinit" may be used to set the following options:)s 450.0 m
(    )s 441.5 m
(    [no]standout)s 433.0 m
(        Controls whether the  command  to  be  edited  is  displayed  in)s 424.5 m
(        reverse or normal video.)s 416.0 m
(    )s 407.5 m
(    eol The  editor  is  entered with the cursor positioned to be end of)s 399.0 m
(        the command line.)s 390.5 m
(    )s 382.0 m
(    bol The  editor  is  entered  with  the  cursor  positioned  to   be )s 373.5 m
(        beginning of the command line.)s 365.0 m
(    )s 356.5 m
(    [no]verify)s 348.0 m
(        If  VERIFY  is specified, EHISTORY will be automatically entered)s 339.5 m
(        when  history  commands  are  entered  to  recall  and   execute )s 331.0 m
(        previous  commands.   If NOVERIFY is specified, the commands are)s 322.5 m
(        recalled and immediately executed.)s 314.0 m
(    )s 305.5 m
(    )s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(EHISTORY \(Jun86\)                language                EHISTORY \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(EXAMPLES)s 713.5 m
(    1. Set no standout and verify modes.)s 705.0 m
(    )s 696.5 m
(            cl> ehinit = "nostandout verify".)s 688.0 m
(    )s 679.5 m
(    2. Recall the last "xc" command from the history list and  edit  it.)s 671.0 m
(    If VERIFY were not enabled the command would simply be repeated.)s 662.5 m
(    )s 654.0 m
(            cl> ^xc)s 645.5 m
(    )s 637.0 m
(    )s 628.5 m
(BUGS)s 620.0 m
(    The  command editor really only works well for single line commands;)s 611.5 m
(    multiline command blocks are not easily edited at  present.   VI  is)s 603.0 m
(    poorly  emulated  at present since only control code editor commands)s 594.5 m
(    are possible.)s 586.0 m
(    )s 577.5 m
(    )s 569.0 m
(SEE ALSO)s 560.5 m
(    eparam)s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 29 29
/m{18 exch moveto}bind def
756 m
(ELSE \(Feb86\)                    language                    ELSE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    if else -- conditional execution of a statement)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    IF \(expression\) statement1 [ELSE statement2])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(ELEMENTS)s 645.5 m
(    )s 637.0 m
(    expression)s 628.5 m
(        A boolean valued expression.)s 620.0 m
(    )s 611.5 m
(    statement1, statement2)s 603.0 m
(        The  statements  to  be  executed  \(possibly   compound,   i.e., )s 594.5 m
(        enclosed in curly braces\).)s 586.0 m
(    )s 577.5 m
(    )s 569.0 m
(DESCRIPTION)s 560.5 m
(    The  IF  statement  is  used  to  execute  a  statement  only if the)s 552.0 m
(    specified condition is true.  An optional ELSE clause may  be  given)s 543.5 m
(    to execute a different statement if the condition is false.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(EXAMPLES)s 509.5 m
(    1. Add X to Y only if X is less than Y.)s 501.0 m
(    )s 492.5 m
(            if \(x < y\))s 484.0 m
(                y += x)s 475.5 m
(    )s 467.0 m
(    2. If X is less than 10 print "small", else print "big".)s 458.5 m
(    )s 450.0 m
(            if \(x < 10\))s 441.5 m
(                print \("small"\))s 433.0 m
(            else)s 424.5 m
(                print \("big"\))s 416.0 m
(    )s 407.5 m
(    3. The ELSE IF construct.)s 399.0 m
(    )s 390.5 m
(            if \(str == "+"\))s 382.0 m
(                val += x)s 373.5 m
(            else if \(str == "-"\))s 365.0 m
(                val -= x)s 356.5 m
(            else if)s 348.0 m
(                ...)s 339.5 m
(    )s 331.0 m
(    4. Nesting, use of braces.)s 322.5 m
(    )s 314.0 m
(            if \(i > 0\) {)s 305.5 m
(                if \(i < 10\) {)s 297.0 m
(                    print \("0"\))s 288.5 m
(                    sum = sum * 10 + i)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(ELSE \(Feb86\)                    language                    ELSE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(                } else)s 713.5 m
(                    print \(" "\))s 705.0 m
(            })s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(SEE ALSO)s 671.0 m
(    for, case, break, next)s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 30 30
/m{18 exch moveto}bind def
756 m
(ENVGET \(Feb86\)                  language                  ENVGET \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    envget -- get the string value of an environment variable)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    envget varname)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    varname)s 628.5 m
(        The environment variable whose value is to be returned.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    ENVGET  returns  the string value of the named environment variable.)s 586.0 m
(    The user is prompted for the value if the variable has not yet  been)s 577.5 m
(    defined.)s 569.0 m
(    )s 560.5 m
(    )s 552.0 m
(EXAMPLES)s 543.5 m
(    1.  Construct a filename using the value of the environment variable)s 535.0 m
(    "editor", and page the file thus named.)s 526.5 m
(    )s 518.0 m
(            cl> page \("dev$" // envget \("editor"\) // ".ed"\))s 509.5 m
(    )s 501.0 m
(    2. Compute and print the center line on the terminal screen.)s 492.5 m
(    )s 484.0 m
(            cl> = \(\(int \(envget \("ttynlines"\)\) + 1\) / 2\))s 475.5 m
(    )s 467.0 m
(    )s 458.5 m
(SEE ALSO)s 450.0 m
(    set, show)s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(EPARAM \(Apr87\)                  language                  EPARAM \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    eparam -- edit a task's parameters)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    eparam task [task ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    task)s 628.5 m
(        The name of the task whose parameter set is to be edited.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    The EPARAM command calls up an interactive  screen  editor  to  edit)s 586.0 m
(    the  parameters  of the named task or tasks.  The syntax of the page)s 577.5 m
(    editor is controlled by the environment variable `editor' which  may)s 569.0 m
(    have  the  values  "edt",  "emacs",  or  "vi".   The  user  may also)s 560.5 m
(    customize the editor by copying the associated  "dev$*.ed"  file  to)s 552.0 m
(    their home directory, and editing the file.)s 543.5 m
(    )s 535.0 m
(    The CL parameter "epinit" may be used to set the following options:)s 526.5 m
(    )s 518.0 m
(    [no]standout)s 509.5 m
(        Enables  or disables use of standout mode \(reverse video\) in the)s 501.0 m
(        display.)s 492.5 m
(    )s 484.0 m
(    [no]showall)s 475.5 m
(        Controls whether or not  hidden  parameters  are  displayed  and)s 467.0 m
(        edited.)s 458.5 m
(    )s 450.0 m
(    The  EPARAM  task may be used to edit either ordinary task parameter)s 441.5 m
(    sets, or named parameter files.  The presence or absence of  a  .PAR)s 433.0 m
(    filename  extension  is  used  to  determine whether an operand is a)s 424.5 m
(    taskname or a filename.  For example,)s 416.0 m
(    )s 407.5 m
(            cl> eparam skypars.par)s 399.0 m
(    )s 390.5 m
(    will edit the parameter FILE SKYPARS.PAR in the  current  directory,)s 382.0 m
(    whereas)s 373.5 m
(    )s 365.0 m
(            cl> eparam skypars)s 356.5 m
(    )s 348.0 m
(    will  edit  the  parameter  set  for the pset-task SKYPARS.  Lastly,)s 339.5 m
(    since SPYPARS is a pset-task, we could just type)s 331.0 m
(    )s 322.5 m
(            cl> skypars)s 314.0 m
(    )s 305.5 m
(    to edit or review the contents of the pset.)s 297.0 m
(    )s 288.5 m
(    The parameter file SKYPARS.PAR in the above example  would  probably)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 31 31
/m{18 exch moveto}bind def
756 m
(EPARAM \(Apr87\)                  language                  EPARAM \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    be  created  using  the new colon-command extensions to eparam.  The)s 713.5 m
(    original eparam supported only single  keystroke  editing  commands.)s 705.0 m
(    The  new colon commands are used to enter command lines of arbitrary)s 696.5 m
(    length to be processed by eparam.)s 688.0 m
(    )s 679.5 m
(    A colon command is entered by typing the colon character \(`:'\) while)s 671.0 m
(    the  cursor  is positioned to the starting column of any value field)s 662.5 m
(    of the parameter set being  edited.   The  colon  character  is  not)s 654.0 m
(    recognized  as  a  special  character  beyond column one, e.g., when)s 645.5 m
(    entering the string value of a parameter.  When colon  command  mode)s 637.0 m
(    is  entered,  the colon character will be echoed at the start of the)s 628.5 m
(    bottom line  on  the  screen,  and  the  cursor  will  move  to  the)s 620.0 m
(    character  following  the  colon,  waiting  for  the  command  to be)s 611.5 m
(    entered.  The command is read in raw mode,  but  the  usual  delete,)s 603.0 m
(    <ctrl/c>, <ctrl/u>, etc. sequences are recognized.)s 594.5 m
(    )s 586.0 m
(    The  following  eparam  colon commands are currently supported.  All)s 577.5 m
(    commands are carefully error checked before being executed to  avoid)s 569.0 m
(    having  eparam  abort  with  a  stack  trace.   An illegal operation)s 560.5 m
(    causes colon command entry mode  to  be  exited,  leaving  an  error)s 552.0 m
(    message  on  the  command  entry  line.   All  commands  which cause)s 543.5 m
(    editing  of  the  current  pset  to  terminate  may  include  the  ! )s 535.0 m
(    character  to  avoid updating the current pset before reading in the)s 526.5 m
(    new one or exiting eparam.  The default is  to  update  the  current)s 518.0 m
(    pset.   In  all  cases, PSET may be either the name of a task or the)s 509.5 m
(    name of a parameter file.  Parameter files are always  indicated  by)s 501.0 m
(    a  .PAR  extension,  even  though the actual file may be a .CL file:)s 492.5 m
(    only .PAR files will be written, although either type of file may be)s 484.0 m
(    read.)s 475.5 m
(    )s 467.0 m
(    )s 458.5 m
(    :e[!] [pset])s 450.0 m
(        Edit  a  new  pset.   If  PSET  is  omitted  and  the cursor was)s 441.5 m
(        positioned to a  pset  parameter  when  the  colon  command  was)s 433.0 m
(        entered  then  eparam  descends  into  the referenced pset; when)s 424.5 m
(        editing of the sub-pset is complete eparam  returns  to  editing)s 416.0 m
(        the  higher  level  pset  at the point at which the ':E' command)s 407.5 m
(        was entered.  If a pset is named the editor context is  switched)s 399.0 m
(        to  the  new  pset,  updating  the current pset first unless the)s 390.5 m
(        ':E!' command was given.)s 382.0 m
(    )s 373.5 m
(    :q[!])s 365.0 m
(        Exit eparam for the current  pset;  equivalent  to  a  <ctrl/z>.)s 356.5 m
(        The  variant  ':Q!'  causes eparam to be exited without updating)s 348.0 m
(        the  current  pset.   Entering  this  command  when  editing   a )s 339.5 m
(        sub-pset  causes  an  exit  to  the higher level pset.  To abort)s 331.0 m
(        eparam entirely without updating anything,  <ctrl/c>  should  be)s 322.5 m
(        used.)s 314.0 m
(    )s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(EPARAM \(Apr87\)                  language                  EPARAM \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    :r[!] [pset])s 713.5 m
(        Read in a new pset.  If the command is ':R', an error message is)s 705.0 m
(        printed.  If the command  is  ':R!'  the  pset  currently  being)s 696.5 m
(        edited  is  reread,  cancelling any modifications made since the)s 688.0 m
(        last update.  If a pset is specified the contents of  the  named)s 679.5 m
(        pset  are  merged into the current pset, i.e., the named pset is)s 671.0 m
(        loaded into the current pset, overwriting the  contents  of  the)s 662.5 m
(        current  pset.   The  command ':R PFILE.PAR' is commonly used to)s 654.0 m
(        load a pset formerly saved in a user file  with  ':W  PFILE.PAR')s 645.5 m
(        into the UPARM version of the parameter set for a task.)s 637.0 m
(    )s 628.5 m
(    :w[!] pset)s 620.0 m
(        Write  or  update a pset.  If PSET is omitted the pset currently)s 611.5 m
(        being edited is updated on disk.  If PSET  is  given  it  should)s 603.0 m
(        normally  be the name of a parameter file to be written.  If the)s 594.5 m
(        file exists an error message will be printed unless the  command)s 586.0 m
(        ':W! PFILE.PAR' is given to force the file to be overwritten.)s 577.5 m
(    )s 569.0 m
(    :g[o][!])s 560.5 m
(        Run  the  task.  Eparam exits, updating the pset and running the)s 552.0 m
(        task whose pset  was  being  edited.   This  is  implemented  by)s 543.5 m
(        pushing  a  command back into the input stream of the task which)s 535.0 m
(        called eparam, hence if eparam was called in a  script  or  with)s 526.5 m
(        other  commands on the same line, execution may be delayed until)s 518.0 m
(        these other commands have been edited.   The  feature  works  as)s 509.5 m
(        expected  when  used  interactively.   Since  the run command is)s 501.0 m
(        pushed back into the command input stream it will appear in  the)s 492.5 m
(        history record and in any log files.)s 484.0 m
(    )s 475.5 m
(    To  get  out  of  colon  command mode without doing anything, simply)s 467.0 m
(    type delete until  the  colon  prompt  is  deleted  and  the  cursor)s 458.5 m
(    returns  to  the  parameter  it was positioned to when colon command)s 450.0 m
(    entry mode was entered.)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(EXAMPLES)s 416.0 m
(    1. Set standout mode and disable the editing  of  hidden  parameters)s 407.5 m
(    \(leaving only the positional parameters\).)s 399.0 m
(    )s 390.5 m
(            cl> epinit = "standout noshowall")s 382.0 m
(    )s 373.5 m
(    2. Edit the parameters for the DELETE task.)s 365.0 m
(    )s 356.5 m
(            cl> ep delete)s 348.0 m
(    )s 339.5 m
(    )s 331.0 m
(SEE ALSO)s 322.5 m
(    lparam, ehistory)s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s S
%%Page: 32 32
/m{18 exch moveto}bind def
756 m
(ERROR \(Feb86\)                   language                   ERROR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    error -- abort a task)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    error errcode errmsg)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    errcode)s 628.5 m
(        An  integer  code  identifying the error \(not used at present in)s 620.0 m
(        the CL since error handlers are not supported\).)s 611.5 m
(    )s 603.0 m
(    errmsg)s 594.5 m
(        A string describing the error.)s 586.0 m
(        )s 577.5 m
(        )s 569.0 m
(DESCRIPTION)s 560.5 m
(    ERROR may be used to force an error exit from a script.   The  error)s 552.0 m
(    message  will  be  displayed,  and  control  will return to the most)s 543.5 m
(    recent interactive cl.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(EXAMPLES)s 509.5 m
(    1. Abort the current task if  there  is  an  attempt  to  compute  a)s 501.0 m
(    negative square root.)s 492.5 m
(    )s 484.0 m
(            if \(x < 0\))s 475.5 m
(                error \(1, "sqrt of a negative number \(x=" // x // "\)"\))s 467.0 m
(            else)s 458.5 m
(                y = sqrt \(x\))s 450.0 m
(    )s 441.5 m
(    )s 433.0 m
(BUGS)s 424.5 m
(    There  is  currently  no  way  to  post  an error handler to receive)s 416.0 m
(    control if ERROR is called.)s 407.5 m
(    )s 399.0 m
(    )s 390.5 m
(SEE ALSO)s 382.0 m
(    cl, bye, logout)s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(FLPRCACHE \(Feb86\)               language               FLPRCACHE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    flprcache -- flush the process cache)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    flprcache process)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    process)s 628.5 m
(        Either the task number as printed by PRCACHE, or the name of one)s 620.0 m
(        of  the  tasks  in  the  process.   If  no process is named, all)s 611.5 m
(        processes are flushed from the cache \(unless they are locked  in)s 603.0 m
(        the cache\).)s 594.5 m
(    )s 586.0 m
(    )s 577.5 m
(DESCRIPTION)s 569.0 m
(    When  an  executable task is first run, the CL spawns the associated)s 560.5 m
(    executable file as a subprocess and then runs the  task.   When  the)s 552.0 m
(    task  completes  the  process  does  not  exit,  rather  it  remains )s 543.5 m
(    connected to the CL as a subprocess, but becomes  idle  waiting  for)s 535.0 m
(    another  command  from the CL.  The set of such idle processes forms)s 526.5 m
(    what is referred to as the CL "process cache".  The purpose  of  the)s 518.0 m
(    process  cache  is  to minimize the overhead required to run a task;)s 509.5 m
(    the first time a task is called response is slow since  the  process)s 501.0 m
(    has  to  be  executed,  but thereafter response is fast provided the)s 492.5 m
(    process remains in the cache.)s 484.0 m
(    )s 475.5 m
(    The FLPRCACHE command flushes the  process  cache,  terminating  the)s 467.0 m
(    connected  subprocesses  therein.   If an argument is specified only)s 458.5 m
(    the specific cache slot is cleared, otherwise all  cache  slots  are)s 450.0 m
(    flushed.   Processes  which  have  been  "locked"  in the cache with)s 441.5 m
(    PRCACHE are not flushed unless explicitly named.)s 433.0 m
(    )s 424.5 m
(    )s 416.0 m
(EXAMPLES)s 407.5 m
(    1. Run PRCACHE to get  the  process  slot  number,  then  flush  the)s 399.0 m
(    process by slot number.)s 390.5 m
(    )s 382.0 m
(            cl> flpr 5)s 373.5 m
(    )s 365.0 m
(    2. Flush all idle processes which are not locked in the cache.)s 356.5 m
(    )s 348.0 m
(            cl> flpr)s 339.5 m
(    )s 331.0 m
(    3.  Flush  the  "x_system.e" process by naming the "directory" task,)s 322.5 m
(    which is contained in that  process.   Lock  a  fresh  copy  of  the)s 314.0 m
(    process  in  the  cache.   This  initializes the process, and may be)s 305.5 m
(    necessary if a system task is interrupted at the wrong time.)s 297.0 m
(    )s 288.5 m
(            cl> flpr dir; prc dir)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 33 33
/m{18 exch moveto}bind def
756 m
(FLPRCACHE \(Feb86\)               language               FLPRCACHE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(BUGS)s 713.5 m
(    In some circumstances the CL may  believe  that  a  process  in  the)s 705.0 m
(    process  cache  is  running  when this is not the case.  The CL will)s 696.5 m
(    not attempt to communicate with  a  running  process,  and  will  be)s 688.0 m
(    unable  to  kill  the  process.  If this happens the CL will hang up)s 679.5 m
(    during logout and will have to be interrupted, causing a panic abort)s 671.0 m
(    \(this  is  harmess  since  the  CL is then restarted\).  The user may)s 662.5 m
(    eventually be required  to  kill  the  sub-process  using  operating)s 654.0 m
(    system facilities.)s 645.5 m
(    )s 637.0 m
(    )s 628.5 m
(SEE ALSO)s 620.0 m
(    prcache)s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(FOR \(Feb86\)                     language                     FOR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    for -- FOR statement)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    for \([assign1] ; [bool_expr] ; [assign2]\) statement)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(ELEMENTS)s 645.5 m
(    )s 637.0 m
(    assign1)s 628.5 m
(        An assignment used to initialize the FOR loop.)s 620.0 m
(    )s 611.5 m
(    bool_expr)s 603.0 m
(        A boolean valued expression tested before each iteration.)s 594.5 m
(    )s 586.0 m
(    assign2)s 577.5 m
(        An assignment executed after each iteration of the loop.)s 569.0 m
(    )s 560.5 m
(    statement)s 552.0 m
(        A   statement   \(possibly  compound,  i.e.,  enclosed  in  curly )s 543.5 m
(        brackets\) to be executed in each iteration of the loop.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(DESCRIPTION)s 509.5 m
(    The FOR statement  provides  a  looping  mechanism  similar  to  the)s 501.0 m
(    C-language  for loop.  ASSIGN1 and ASSIGN2 are assignment statements)s 492.5 m
(    using one of the operators '=', '+=', '-=', '/=', '*='.  Any of  the)s 484.0 m
(    elements  of the FOR loop may be omitted, except the parenthesis and)s 475.5 m
(    colon field delimiters.)s 467.0 m
(    )s 458.5 m
(    )s 450.0 m
(EXAMPLES)s 441.5 m
(    1. For I equals zero to 10 in steps of 2,  increment  TOTAL  by  the)s 433.0 m
(    value of array element I.)s 424.5 m
(    )s 416.0 m
(            for \(i=0;  i <= 10;  i += 2\))s 407.5 m
(                total += array[i])s 399.0 m
(    )s 390.5 m
(    2. Print the first eight powers of two.)s 382.0 m
(    )s 373.5 m
(            j = 1)s 365.0 m
(            for \(i=1;  i <= 8;  i += 1\) {)s 356.5 m
(                 print \(i, j\))s 348.0 m
(                 j *= 2)s 339.5 m
(            })s 331.0 m
(    )s 322.5 m
(    )s 314.0 m
(BUGS)s 305.5 m
(    A  simple  assignment  of  the  form  i++  will  not work.  Only one)s 297.0 m
(    assigment statement is permitted in the first and third fields.)s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 34 34
/m{18 exch moveto}bind def
756 m
(FOR \(Feb86\)                     language                     FOR \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(SEE ALSO)s 713.5 m
(    while, case, break, next)s 705.0 m
()s 696.5 m
()s 688.0 m
()s 679.5 m
()s 671.0 m
()s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(FPRINT \(Feb86\)                  language                  FPRINT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    fprint -- print to a parameter)s 705.0 m
(    print  -- print to the standard output)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(USAGE)s 671.0 m
(    print  expr [expr ...])s 662.5 m
(    fprint param expr [expr ...])s 654.0 m
(    )s 645.5 m
(    )s 637.0 m
(PARAMETERS)s 628.5 m
(    )s 620.0 m
(    expr)s 611.5 m
(        Any expression, the string value of which is to be printed.)s 603.0 m
(    )s 594.5 m
(    param)s 586.0 m
(        FPRINT will deposit the output string in the value field of this)s 577.5 m
(        parameter.)s 569.0 m
(    )s 560.5 m
(    )s 552.0 m
(DESCRIPTION)s 543.5 m
(    The  PRINT and FPRINT commands format a line of text and write it to)s 535.0 m
(    either the standard output or in the case  of  FPRINT,  the  p_value)s 526.5 m
(    field  of  the  named parameter.  The output is free format although)s 518.0 m
(    spaces may be specifically inserted \(as quoted string constants\)  to)s 509.5 m
(    make  the  output  easier  to  read.   One  space  is  automatically )s 501.0 m
(    inserted after each  numeric  argument;  this  can  be  defeated  by)s 492.5 m
(    coercing  the  argument to a string with the STR intrinsic function.)s 484.0 m
(    A newline is automatically output at the end  of  the  output  line.)s 475.5 m
(    I/O redirection may be used with PRINT to write to a file.)s 467.0 m
(    )s 458.5 m
(    Compute  mode  \(a  parenthesized  argument  list\) is recommended for)s 450.0 m
(    this task to avoid surprises.)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(EXAMPLES)s 416.0 m
(    1. Print the name of the current terminal.)s 407.5 m
(    )s 399.0 m
(            cl> print \("terminal = ", envget \("terminal"\)\))s 390.5 m
(    )s 382.0 m
(    2. Output a blank line on the standard output, e.g., in a script.)s 373.5 m
(    )s 365.0 m
(            print \(""\))s 356.5 m
(    )s 348.0 m
(    3. Format a command and  send  it  to  the  host  system.   In  this)s 339.5 m
(    example, "fname" is a string valued parameter.)s 331.0 m
(    )s 322.5 m
(            cl> print \("!dir/full ", fname\) | cl)s 314.0 m
(    )s 305.5 m
(    4. Write to a file.)s 297.0 m
(    )s 288.5 m
(            for \(x=1.;  x < 1E5;  x *= 10\) )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 35 35
/m{18 exch moveto}bind def
756 m
(FPRINT \(Feb86\)                  language                  FPRINT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(                print \("the sqrt of ", x, "is ", sqrt\(x\), >> "output"\))s 713.5 m
(    )s 705.0 m
(    )s 696.5 m
(BUGS)s 688.0 m
(    The  FPRINT  task  is  not  very  useful since the same thing can be)s 679.5 m
(    accomplished by string concatenation and assignment.)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(SEE ALSO)s 645.5 m
(    scan, fscan)s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(FSCAN \(Feb86\)                   language                   FSCAN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    scan  -- read parameters from standard input)s 705.0 m
(    fscan -- read parameters from file, or another parameter)s 696.5 m
(    nscan -- get number of parameters scanned)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(USAGE)s 662.5 m
(    scan  \(p1, p2, p3 ... pn\))s 654.0 m
(    fscan \(param, p1, p2, p3, ... pn\))s 645.5 m
(    )s 637.0 m
(    n = nscan\(\))s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(PARAMETERS)s 603.0 m
(    )s 594.5 m
(    pN  The name of an output parameter, to receive a scanned value.)s 586.0 m
(    )s 577.5 m
(    param)s 569.0 m
(        The name of the input parameter whose VALUE is to be scanned  to)s 560.5 m
(        produce the output values.)s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(DESCRIPTION)s 526.5 m
(    SCAN  and  FSCAN permit the user to read in values from the standard)s 518.0 m
(    input, a file,  or  a  parameter  and  assign  them  to  the  listed)s 509.5 m
(    parameters.   FSCAN  may  also  be  used to read a string already in)s 501.0 m
(    core.  It is useful to consider these functions  as  performing  two)s 492.5 m
(    disjoint  actions:  acquiring a string, where SCAN and FSCAN differ;)s 484.0 m
(    and parsing the string, where they are identical.)s 475.5 m
(    )s 467.0 m
(    SCAN acquires its string  by  reading  exactly  one  line  from  the)s 458.5 m
(    standard  input.  The action of FSCAN depends on PARAM.  If PARAM is)s 450.0 m
(    a string, or a struct, then the string is simply the value of PARAM.)s 441.5 m
(    If,  however,  PARAM is a list-directed struct, a call to FSCAN will)s 433.0 m
(    get the next line from the file pointed to by PARAM.  The  file  can)s 424.5 m
(    be  rewound  by  assigning  a file name to PARAM.  If either scan or)s 416.0 m
(    fscan reach an EOF, they return  with  the  value  EOF  and  do  not)s 407.5 m
(    change any parameters.)s 399.0 m
(    )s 390.5 m
(    Once  the  string  has  been  acquired  it  is  parsed into segments)s 382.0 m
(    delimited by spaces or  tabs.   Scan  and  fscan  do  not  recognize)s 373.5 m
(    quoted  strings, nor do they view ',' as a delimiter.  Each token is)s 365.0 m
(    then assigned in turn to p1 through  pn.   If  there  are  too  many)s 356.5 m
(    tokens  they  are discarded, if there are too few, the corresponding)s 348.0 m
(    parameters are not affected  by  the  call.   Any  conversion  error)s 339.5 m
(    terminates  the  scan,  but  parameters already scanned retain their)s 331.0 m
(    new values.  An assignment to a struct terminates the  scan  because)s 322.5 m
(    the  entire  unscanned  portion  of  the  string  is assigned to the)s 314.0 m
(    struct.  Thus any struct should be the last parameter in a  scan  or)s 305.5 m
(    fscan call.)s 297.0 m
(    )s 288.5 m
(    Scan  and  fscan are intrinsic functions returning either EOF if end)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 36 36
/m{18 exch moveto}bind def
756 m
(FSCAN \(Feb86\)                   language                   FSCAN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    of file on the input list is sensed, or  the  number  of  parameters)s 713.5 m
(    successfully  scanned.   The  function NSCAN also returns the number)s 705.0 m
(    of parameters successfully scanned in  the  last  call  to  scan  or)s 696.5 m
(    fscan.)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(EXAMPLES)s 662.5 m
(    1. Print a list of radii, given a list of coordinates.)s 654.0 m
(    )s 645.5 m
(            list = coords)s 637.0 m
(            while \(fscan \(list, x, y\) != EOF\))s 628.5 m
(                print \(sqrt \(x**2 + y**2\)\))s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(BUGS)s 594.5 m
(    The  syntax of scan and fscan is peculiar, in that they are the only)s 586.0 m
(    functions where  parameters  are  effectively  passed  by  reference)s 577.5 m
(    rather  than  by  value.  Thus p1, ... pn must be parameters whereas)s 569.0 m
(    in similar contexts an arbitrary expression can be used  wherever  a)s 560.5 m
(    parameter can.)s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(SEE ALSO)s 526.5 m
(    string)s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(GFLUSH \(Feb86\)                  language                  GFLUSH \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    gflush -- flush any buffered graphics output)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    gflush)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    None.)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(DESCRIPTION)s 611.5 m
(    Output  to  graphics  plotter  devices is normally buffered and then)s 603.0 m
(    disposed of to  the  plotter  as  a  larger  job,  to  increase  the)s 594.5 m
(    efficiency  of the graphics system.  The GFLUSH task disposes of any)s 586.0 m
(    buffered  graphics  output  and  also   initializes   the   graphics )s 577.5 m
(    subsystem.   The  cursor mode frame buffer is cleared, any connected)s 569.0 m
(    graphics subkernels  are  disconnected,  and  the  memory  and  file)s 560.5 m
(    descriptors  used  by  the  graphics  subsystem are freed.  A GFLUSH)s 552.0 m
(    occurs automatically upon logout from the CL.)s 543.5 m
(    )s 535.0 m
(    The number of frames \(plots\) the graphics system will buffer  for  a)s 526.5 m
(    device  is  controlled  by  the  MF  \(multi-frame\)  parameter in the)s 518.0 m
(    GRAPHCAP entry for  the  device.   When  the  multi-frame  count  is)s 509.5 m
(    reached  the  buffered  output  is  automatically disposed of to the)s 501.0 m
(    device.)s 492.5 m
(    )s 484.0 m
(    )s 475.5 m
(EXAMPLES)s 467.0 m
(    1. Flush any graphics output and initialize the graphics system.)s 458.5 m
(    )s 450.0 m
(            cl> gflush)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(SEE ALSO)s 416.0 m
(    cursor, stdplot)s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 37 37
/m{18 exch moveto}bind def
756 m
(GOTO \(Feb86\)                    language                    GOTO \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    goto -- branch to a label)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    goto label)s 671.0 m
(      .)s 662.5 m
(      .)s 654.0 m
(      .)s 645.5 m
(    label: statement)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(PARAMETERS)s 603.0 m
(    )s 594.5 m
(    label)s 586.0 m
(        The destination label.  Label names  have  the  same  syntax  as)s 577.5 m
(        variable   names   and  can  duplicate  the  names  of  existing )s 569.0 m
(        variables.)s 560.5 m
(    )s 552.0 m
(    statement)s 543.5 m
(        The statement executed after the goto statement.  It may be  any)s 535.0 m
(        executable statement.)s 526.5 m
(    )s 518.0 m
(    )s 509.5 m
(DESCRIPTION)s 501.0 m
(    The  GOTO  statement interrupts the normal flow of program execution)s 492.5 m
(    by transferring control to the statement following  the  label.   It)s 484.0 m
(    may  also  be  used  to  exit  from  nested  loops  where  the break)s 475.5 m
(    statement is not adequate.)s 467.0 m
(    )s 458.5 m
(    )s 450.0 m
(EXAMPLES)s 441.5 m
(    1. The most common use of the GOTO statement  is  to  branch  to  an)s 433.0 m
(    error handler if an abnormal condition is detected.)s 424.5 m
(    )s 416.0 m
(    begin)s 407.5 m
(            for \(i=1;  i <= 100;  i += 1\))s 399.0 m
(                for \(j=1;  j <= 100;  j += 1\))s 390.5 m
(                    for \(k=1;  k <= 100;  k += 1\))s 382.0 m
(                        if \(pixel[i,j,k] < 0\))s 373.5 m
(                            goto err)s 365.0 m
(                        else)s 356.5 m
(                            total += pixel[i,j,k])s 348.0 m
(    )s 339.5 m
(            print \("total = ", total\))s 331.0 m
(            return)s 322.5 m
(    err:)s 314.0 m
(            print \("Invalid pixel value at ",i,j,k\))s 305.5 m
(    end)s 297.0 m
(    )s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(GOTO \(Feb86\)                    language                    GOTO \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(BUGS)s 713.5 m
(    No checking is done to see if a jump is made into a loop.)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SEE ALSO)s 679.5 m
(    break, next)s 671.0 m
()s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 38 38
/m{18 exch moveto}bind def
756 m
(HIDETASK \(Feb86\)                language                HIDETASK \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    hidetask -- hide a task from the user)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    hidetask task [task ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    task)s 628.5 m
(        The name of a task to be made hidden.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    If a task is only to be called from other tasks, and is not normally)s 586.0 m
(    invoked directly by the user, then it may be useful  to  `hide'  the)s 577.5 m
(    task,  i.e.,  omit  it  from the list of tasks listed in the "?" and)s 569.0 m
(    "??" commands.  The HIDETASK command performs this function.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(EXAMPLES)s 535.0 m
(    1. Define the task "_rew" and hide it from the  user.   The  purpose)s 526.5 m
(    of  the leading underscore \(not required\) is to ensure that the user)s 518.0 m
(    does not accidentally run the task.)s 509.5 m
(    )s 501.0 m
(    cl> task $_rew = "home$rew.e")s 492.5 m
(    cl> hide _rew)s 484.0 m
(    )s 475.5 m
(    2. Display the contents  of  the  LANGUAGE  package,  including  all)s 467.0 m
(    hidden tasks \(the _ does the trick\).)s 458.5 m
(    )s 450.0 m
(    cl> ?_ lan)s 441.5 m
(        language:)s 433.0 m
(          ?             chdir         defpar        history       radix)s 424.5 m
(          ??            cl            deftask       jobs          redefine)s 416.0 m
(          _allocate     clbye         edit          keep          scan)s 407.5 m
(          _curpack      clear         ehistory      kill          service)s 399.0 m
(          _deallocate   clpackage     envget        language      set)s 390.5 m
(          _devstatus    d_f           eparam        logout        show)s 382.0 m
(          access        d_l           error         lparam        sleep)s 373.5 m
(          back          d_off         flprcache     mktemp        task)s 365.0 m
(          beep          d_on          fprint        osfn          time)s 356.5 m
(          bye           d_p           fscan         package       unlearn)s 348.0 m
(          cache         d_t           gflush        prcache       update)s 339.5 m
(          cd            defpac        hidetask      print         wait)s 331.0 m
(    )s 322.5 m
(    )s 314.0 m
(SEE ALSO)s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(HISTORY \(Feb86\)                 language                 HISTORY \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    history -- display the last few commands)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    history [[-]ncommands])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    ncommands)s 628.5 m
(        The number of commands to be displayed.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    The  HISTORY  task  prints a list of the last few commands executed.)s 586.0 m
(    Only commands which terminated normally are  included.   The  number)s 577.5 m
(    of  commands  to  be printed may be specified on the command line if)s 569.0 m
(    desired.  If the number is preceded by  a  minus  sign  the  default)s 560.5 m
(    number  of  lines  is  not  changed, otherwise HISTORY will take the)s 552.0 m
(    value given as the new default number of commands to be printed.)s 543.5 m
(    )s 535.0 m
(    )s 526.5 m
(EXAMPLES)s 518.0 m
(    1. Print the last few commands.)s 509.5 m
(    )s 501.0 m
(            cl> history)s 492.5 m
(    )s 484.0 m
(    2. Print the entire history list.)s 475.5 m
(    )s 467.0 m
(            cl> history -999)s 458.5 m
(    )s 450.0 m
(    3. Change the default number of history lines to  be  printed  to  5)s 441.5 m
(    \(and print the last five commands\).)s 433.0 m
(    )s 424.5 m
(            cl> history 5)s 416.0 m
(    )s 407.5 m
(    4. Save the history in the file "commands".)s 399.0 m
(    )s 390.5 m
(            cl> history -999 > commands)s 382.0 m
(    )s 373.5 m
(    )s 365.0 m
(SEE ALSO)s 356.5 m
(    ehistory)s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 39 39
/m{18 exch moveto}bind def
756 m
(IF \(Feb86\)                      language                      IF \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    if else -- conditional execution of a statement)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    IF \(expression\) statement1 [ELSE statement2])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(ELEMENTS)s 645.5 m
(    )s 637.0 m
(    expression)s 628.5 m
(        A boolean valued expression.)s 620.0 m
(    )s 611.5 m
(    statement1, statement2)s 603.0 m
(        The   statements   to  be  executed  \(possibly  compound,  i.e., )s 594.5 m
(        enclosed in curly braces\).)s 586.0 m
(    )s 577.5 m
(    )s 569.0 m
(DESCRIPTION)s 560.5 m
(    The IF statement  is  used  to  execute  a  statement  only  if  the)s 552.0 m
(    specified  condition  is true.  An optional ELSE clause may be given)s 543.5 m
(    to execute a different statement if the condition is false.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(EXAMPLES)s 509.5 m
(    1. Add X to Y only if X is less than Y.)s 501.0 m
(    )s 492.5 m
(            if \(x < y\))s 484.0 m
(                y += x)s 475.5 m
(    )s 467.0 m
(    2. If X is less than 10 print "small", else print "big".)s 458.5 m
(    )s 450.0 m
(            if \(x < 10\))s 441.5 m
(                print \("small"\))s 433.0 m
(            else)s 424.5 m
(                print \("big"\))s 416.0 m
(    )s 407.5 m
(    3. The ELSE IF construct.)s 399.0 m
(    )s 390.5 m
(            if \(str == "+"\))s 382.0 m
(                val += x)s 373.5 m
(            else if \(str == "-"\))s 365.0 m
(                val -= x)s 356.5 m
(            else if)s 348.0 m
(                ...)s 339.5 m
(    )s 331.0 m
(    4. Nesting, use of braces.)s 322.5 m
(    )s 314.0 m
(            if \(i > 0\) {)s 305.5 m
(                if \(i < 10\) {)s 297.0 m
(                    print \("0"\))s 288.5 m
(                    sum = sum * 10 + i)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(IF \(Feb86\)                      language                      IF \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(                } else)s 713.5 m
(                    print \(" "\))s 705.0 m
(            })s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(SEE ALSO)s 671.0 m
(    for, case, break, next)s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 40 40
/m{18 exch moveto}bind def
756 m
(INTRO \(Feb86\)                   language                   INTRO \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    intro -- a brief introduction to the CL)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(DESCRIPTION)s 679.5 m
(    )s 671.0 m
(    1. GENERAL)s 662.5 m
(    )s 654.0 m
(        The CL \(or Command Language\) is the command interpreter  of  the)s 645.5 m
(    IRAF  environment.  Among it's responsibilities are: task initiation)s 637.0 m
(    and  termination;  parameter  retrieval  and  updating;  and   error )s 628.5 m
(    handling.    In  addition  the  CL  has  certain  `builtin'  utility )s 620.0 m
(    functions  which  enable  monitoring  and  changing  of   the   IRAF )s 611.5 m
(    environment,  control  flow  features  roughly  modeled  after C and)s 603.0 m
(    Ratfor as well as fairly sophisticated capabilities  for  performing)s 594.5 m
(    mathmatical   calculations   and   string   manipulation.    The  CL )s 586.0 m
(    environment may easily be extended by the user.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(    2. TASK INITIATION AND TERMINATION)s 552.0 m
(    )s 543.5 m
(        IRAF organizes  tasks  into  groups  called  PACKAGES.   When  a)s 535.0 m
(    package  \(which  is  itself  a  special kind of task\) is invoked, it)s 526.5 m
(    defines all the tasks which belong to that package, and the user may)s 518.0 m
(    then  execute  any  of  the tasks in the package.  Some of these new)s 509.5 m
(    tasks may themselves be packages.  Normally at the  start  of  a  CL)s 501.0 m
(    session,   the  LANGUAGE  package,  including  all  functions  built )s 492.5 m
(    directly into the CL, and the SYSTEM package, which  contains  basic)s 484.0 m
(    system   utilities,   are   automatically  invoked.   The  user  may )s 475.5 m
(    configure  their  "login.cl"  file  to  automatically  invoke  other )s 467.0 m
(    packages.)s 458.5 m
(    )s 450.0 m
(    Within the CL a task is invoked by entering its name, e.g.)s 441.5 m
(    )s 433.0 m
(         cl> reduce args)s 424.5 m
(    )s 416.0 m
(    If  two  tasks  in  different  packages have the same name, then the)s 407.5 m
(    package name may be included:)s 399.0 m
(    )s 390.5 m
(         cl> spectra.reduce args)s 382.0 m
(    )s 373.5 m
(    The task name may be followed by a parameter list and tasks  may  be)s 365.0 m
(    linked  together  by  pipes  \(see  parameters\).   The task initiates)s 356.5 m
(    execution of either a script file, an ASCII file containing  further)s 348.0 m
(    CL commands, or an executable image, an external program linked with)s 339.5 m
(    IRAF libraries so that it may be called as a  sub-process  from  the)s 331.0 m
(    CL  process.   The correspondence between the task name and the name)s 322.5 m
(    of the script or image file is made  using  the  task  and  redefine)s 314.0 m
(    builtin commands.)s 305.5 m
(    )s 297.0 m
(    When  a  script  is  run the CL effectively calls itself recursively)s 288.5 m
(    with the new incarnation of the CL having  its  standard  input  not)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(INTRO \(Feb86\)                   language                   INTRO \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    from  the  terminal,  but  from  the  script  file.  When the script)s 713.5 m
(    terminates  the  recursion  unwinds,  and  the  CL  returns  to   an )s 705.0 m
(    interactive  mode.   A  script  may  itself  call  another script or)s 696.5 m
(    executable.)s 688.0 m
(    )s 679.5 m
(    An executable is run as a separate process  with  communication  and)s 671.0 m
(    synchronization  maintained  using  an  inter-process  communication )s 662.5 m
(    link \(a pipe in UNIX or a shared memory region in  VMS\).   When  the)s 654.0 m
(    executable  requires  a parameter a request is sent across the link,)s 645.5 m
(    and the CL replies in the same fashion.  When the process terminates)s 637.0 m
(    it  informs  the  CL and then hibernates.  Normally the executable's)s 628.5 m
(    process is not terminated, but is maintained in a process  cache  so)s 620.0 m
(    that  the  executable  may  be  used  again  without the overhead of)s 611.5 m
(    reinitiating the process.  The process finally terminates  when  the)s 603.0 m
(    CL  finishes,  when  the  space  in  the  cache  is  needed by a new)s 594.5 m
(    executable image, or when  the  user  explicitly  clears  the  cache)s 586.0 m
(    using  the  flprcache  command.   The  size  of the process cache is)s 577.5 m
(    small, usually only three  executables  can  be  maintained  in  the)s 569.0 m
(    cache.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(    3. PARAMETER RETRIEVAL AND UPDATE)s 535.0 m
(    )s 526.5 m
(        Most  CL tasks have a parameter list associated with them.  When)s 518.0 m
(    the task starts up, the CL looks to see if the user  has  a  private)s 509.5 m
(    copy  of  the parameters from the last time he ran this task.  If so)s 501.0 m
(    these parameters are loaded into memory.   Otherwise  the  CL  looks)s 492.5 m
(    for  the  default  values  of the parameters and loads these.  While)s 484.0 m
(    the task is active the parameters  are  maintained  in  memory,  but)s 475.5 m
(    when  it  finishes  the  CL  checks if any `learned' parameters have)s 467.0 m
(    been modified.  If so a  new  private  copy  of  the  parameters  is)s 458.5 m
(    stored  into  the  directory  pointed  to  by  the IRAF logical name)s 450.0 m
(    `uparm'.  A number of builtins are used to control the  handling  of)s 441.5 m
(    parameters including lparam, eparam, update and unlearn.)s 433.0 m
(    )s 424.5 m
(    )s 416.0 m
(    4. ERROR HANDLING)s 407.5 m
(    )s 399.0 m
(        The  CL attempts to trap most kinds of errors that may occur and)s 390.5 m
(    to keep the user in  a  viable  IRAF  environment.   When  an  error)s 382.0 m
(    occurs  in  a  script, execution of the script is terminated and the)s 373.5 m
(    CL returns to an interactive level.  The user  may  force  an  error)s 365.0 m
(    using  the  ERROR  builtin.   When  a executable image encounters an)s 356.5 m
(    error it cannot handle itself, it sends an error message to  the  CL)s 348.0 m
(    and   then   hibernates   in   the  process  cache  until  its  next )s 339.5 m
(    invocation.  If executable was called by a  script,  the  script  is)s 331.0 m
(    terminated  and  the  CL  returns to an interactive mode.  The error)s 322.5 m
(    message from the executable is relayed to the user.)s 314.0 m
(    )s 305.5 m
(    )s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 41 41
/m{18 exch moveto}bind def
756 m
(INTRO \(Feb86\)                   language                   INTRO \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(SEE ALSO)s 713.5 m
(    commands, mathfcns, strings)s 705.0 m
()s 696.5 m
()s 688.0 m
()s 679.5 m
()s 671.0 m
()s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(JOBS \(Feb86\)                    language                    JOBS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    jobs -- display the status of background jobs)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    jobs)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    None.)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(DESCRIPTION)s 611.5 m
(    JOBS is used to display the status of background jobs.   If  no  job)s 603.0 m
(    number  is  specified  then all the status of all background jobs is)s 594.5 m
(    displayed.  For each job there is one line of output, e.g.)s 586.0 m
(    )s 577.5 m
(        [2]  0:14 +Running  copy file1 file2 &)s 569.0 m
(    )s 560.5 m
(    Here 2 is the job number of the job;  0:14  is  the  clock  time  in)s 552.0 m
(    minutes   and   seconds  since  the  job  was  submitted;  `Running' )s 543.5 m
(    indicates  that  the  task  is  currently  running  while  the   `+' )s 535.0 m
(    indicates  that  this  was  the  last  background job started.   The)s 526.5 m
(    remainder of the line is a copy of the actual command used to  start)s 518.0 m
(    the job.)s 509.5 m
(    )s 501.0 m
(    The possible states for a background job are:)s 492.5 m
(    )s 484.0 m
(            Done    -- the job has finished normally)s 475.5 m
(            Exit N  -- the job terminated with exit code N)s 467.0 m
(            Stopped -- the job is waiting for input from the user)s 458.5 m
(                            \(see the SERVICE command\))s 450.0 m
(            Running -- the job is currently executing)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(EXAMPLES)s 416.0 m
(    cl> jobs)s 407.5 m
(        [1]  21:13  Done      mkhelp >& dev$null & )s 399.0 m
(        [2]   0:05 +Running   count *.hlp > _junk & )s 390.5 m
(    )s 382.0 m
(    )s 373.5 m
(BUGS)s 365.0 m
(    Exit  codes  are  rarely  displayed  when jobs terminate abnormally.)s 356.5 m
(    The CL checks for background job termination only when a command  is)s 348.0 m
(    entered,  hence the elapsed time shown will often be greater than it)s 339.5 m
(    should be.)s 331.0 m
(    )s 322.5 m
(    )s 314.0 m
(SEE ALSO)s 305.5 m
(    kill, service)s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 42 42
/m{18 exch moveto}bind def
756 m
(KEEP \(Feb86\)                    language                    KEEP \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    keep -- keep memory after task termination)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    keep)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    Normally  when  a  script  task  terminates  any  tasks,   packages, )s 637.0 m
(    environment  variables,  etc.  defined  during the execution of that)s 628.5 m
(    task are discarded \(in other words, the memory used by the  task  is)s 620.0 m
(    freed\).    The   KEEP   command  instructs  the  CL  to  retain  the )s 611.5 m
(    definitions after script termination.  Only one level of  "keep"  is)s 603.0 m
(    achieved,  e.g.,  if  a  script  with a keep is called from a higher)s 594.5 m
(    level script, then when the higher level script terminates the  task)s 586.0 m
(    definitions  will  still  be  lost  \(unless this higher level script)s 577.5 m
(    also uses KEEP\).)s 569.0 m
(    )s 560.5 m
(    )s 552.0 m
(EXAMPLE)s 543.5 m
(    1. The most common use for KEEP is to retain a  set  of  definitions)s 535.0 m
(    in a script task.)s 526.5 m
(    )s 518.0 m
(            set     pkdir = "home$hebrew/")s 509.5 m
(            task    aleph, beth, kaph = hebrew.cl)s 501.0 m
(    )s 492.5 m
(            keep)s 484.0 m
(    )s 475.5 m
(    )s 467.0 m
(SEE ALSO)s 458.5 m
(    task, package)s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(KILL \(Feb86\)                    language                    KILL \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    kill -- kill a background job)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    kill job [job ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    job A background job number, as returned by JOBS, or as printed when)s 628.5 m
(        the job is submitted.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    KILL is used to forcibly terminate a background job.  The user  must)s 586.0 m
(    specify  the job number of the task to be killed.  The job number is)s 577.5 m
(    displayed when the job is started, and may also be  seen  using  the)s 569.0 m
(    JOBS command.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(EXAMPLE)s 535.0 m
(    1. Kill job number 4.)s 526.5 m
(    )s 518.0 m
(            cl> kill 4)s 509.5 m
(    )s 501.0 m
(    )s 492.5 m
(SEE ALSO)s 484.0 m
(    jobs, service)s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 43 43
/m{18 exch moveto}bind def
756 m
(LOGGING \(Mar86\)                 language                 LOGGING \(Mar86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    logging -- Using the CL logging features)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(DESCRIPTION)s 679.5 m
(    The  CL  has  some simple logging features to allow the recording of)s 671.0 m
(    events of interactive sessions.  From these saved  event  logs,  one)s 662.5 m
(    can  trace  a  particular  data  analysis  sequence, track errors in)s 654.0 m
(    programs, and create new CL scripts.  Other  uses  for  the  logfile)s 645.5 m
(    exist as well.)s 637.0 m
(    )s 628.5 m
(    There   are  currently  five  types  of  logging  messages,  with  a )s 620.0 m
(    parameter to control what is actually logged.  These include:)s 611.5 m
(    )s 603.0 m
(           commands - commands and keystrokes of an interactive session)s 594.5 m
(         background - messages about and from background jobs)s 586.0 m
(             errors - logging of error messages)s 577.5 m
(              trace - start/stop trace of script and executable tasks)s 569.0 m
(               user - user messages, via the PUTLOG builtin)s 560.5 m
(    )s 552.0 m
(    All of these types of messages except the interactive commands  will)s 543.5 m
(    show  up  as  comments  \(i.e.,  starting with a '#'\) in the logfile.)s 535.0 m
(    This facilitates using a previous logfile as input to the CL  or  as)s 526.5 m
(    the basis for a script task.)s 518.0 m
(    )s 509.5 m
(    The  CL  parameters  discussed below are used to control the logging)s 501.0 m
(    features.  These parameters can be set on the command line,  in  the)s 492.5 m
(    "login.cl" file, or with the command "eparam cl".)s 484.0 m
(    )s 475.5 m
(    )s 467.0 m
(PARAMETERS)s 458.5 m
(    )s 450.0 m
(    keeplog = no)s 441.5 m
(        The  overall  on/off  switch  for  the  CL logging.  When set to)s 433.0 m
(        `yes', the logfile will be opened  and  logging  will  commence.)s 424.5 m
(        If  the  named  logfile  does  not  exist,  it  will be created,)s 416.0 m
(        otherwise log messages will be appended to the existing file.)s 407.5 m
(    )s 399.0 m
(    logfile = "home$logfile")s 390.5 m
(        The name of the logfile.)s 382.0 m
(    )s 373.5 m
(    logmode = "commands nobackground noerrors notrace")s 365.0 m
(        )s 356.5 m
(        LOGMODE controls what goes  into  the  logfile.   The  following)s 348.0 m
(        options are currently available:)s 339.5 m
(        )s 331.0 m
(        [no]commands)s 322.5 m
(            Enables  or disables logging of interactive commands.  \(This)s 314.0 m
(            is usually always enabled.\))s 305.5 m
(        )s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(LOGGING \(Mar86\)                 language                 LOGGING \(Mar86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(        [no]background)s 713.5 m
(            Enables  or  disables  background  logging.   This  includes )s 705.0 m
(            start/stop  messages  when background jobs are submitted and)s 696.5 m
(            complete, as well as log messages from  the  background  job)s 688.0 m
(            itself.)s 679.5 m
(        )s 671.0 m
(        [no]errors)s 662.5 m
(            Enables   or   disables  error  logging  within  script  and )s 654.0 m
(            executable tasks.  If enabled,  error  messages  printed  on)s 645.5 m
(            the terminal will also be logged.)s 637.0 m
(        )s 628.5 m
(        [no]trace)s 620.0 m
(            Enables   or  disables  tracing  of  script  and  executable )s 611.5 m
(            tasks.  If enabled, start  and  stop  messages  are  logged,)s 603.0 m
(            which  include  the  package  and  task names, and the time.)s 594.5 m
(            The start message also includes the  filename  of  the  task)s 586.0 m
(            \(.cl or .e\).)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(EXAMPLES)s 552.0 m
(    1. Turn all the logging features on except for background logging:)s 543.5 m
(    )s 535.0 m
(            cl> logmode = "commands nobackground errors trace")s 526.5 m
(    )s 518.0 m
(    )s 509.5 m
(BUGS)s 501.0 m
(    Background  logging  to  the  same  logfile can cause problems.  The)s 492.5 m
(    environment variable FILEWAIT should be set to `no'  to  avoid  file)s 484.0 m
(    access  conflicts.   Even  with  this, reliability is not guaranteed)s 475.5 m
(    and some messages will not get into the logfile.)s 467.0 m
(    )s 458.5 m
(    )s 450.0 m
(SEE ALSO)s 441.5 m
(    cl, putlog)s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 44 44
/m{18 exch moveto}bind def
756 m
(LOGOUT \(Feb86\)                  language                  LOGOUT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    logout -- log out of the CL)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    logout)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    LOGOUT causes the CL to shut itself down,  regardless  of  how  many)s 637.0 m
(    packages  may currently be active.  The only way to shut the CL down)s 628.5 m
(    without killing it is to use LOGOUT; BYE is not allowed to shut  the)s 620.0 m
(    CL  down, since it would be too easy to enter it by accident \(and it)s 611.5 m
(    takes a while to log back in\).)s 603.0 m
(    )s 594.5 m
(    An error message will be printed if one attempts to log out  of  the)s 586.0 m
(    CL  while  a  device  is  still  allocated.   The  device  should be)s 577.5 m
(    deallocated and the LOGOUT repeated, else type LOGOUT several  times)s 569.0 m
(    and you will be permitted to logout with the device still allocated.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(EXAMPLE)s 535.0 m
(    1. Logout of the CL.)s 526.5 m
(    )s 518.0 m
(            cl> logo)s 509.5 m
(    )s 501.0 m
(    )s 492.5 m
(SEE ALSO)s 484.0 m
(    deallocate, bye)s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(LPARAM \(Apr87\)                  language                  LPARAM \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    lparam -- list the parameters of a task or pset)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    lparam pset [pset ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    pset)s 628.5 m
(        The name of the parameter set to be listed.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    LPARAM  lists  one  or  more  parameter  sets.   Psets are specified)s 586.0 m
(    either by the name of the task with which the  pset  is  associated,)s 577.5 m
(    or  by  filename  \(pset files have the ".par" extension\).  If a file)s 569.0 m
(    type pset is listed the extension must be included, since it is  the)s 560.5 m
(    presence  or  absence of the filename extension which LPARAM uses to)s 552.0 m
(    distinguish between task-psets and named \(file\) psets.)s 543.5 m
(    )s 535.0 m
(    Each parameter is listed on a single line with the following format:)s 526.5 m
(    )s 518.0 m
(            param = value           prompt string)s 509.5 m
(    )s 501.0 m
(    Here "param" is the name of the parameter, "value"  is  the  current)s 492.5 m
(    value  of the parameter \(blank if undefined\), and "prompt string" is)s 484.0 m
(    the prompt for the parameter, if any.  If the parameter  is  hidden,)s 475.5 m
(    then  the  line  is enclosed in parentheses.  For arrays, instead of)s 467.0 m
(    the values, a list of the dimensionalities  is  given.   The  EPARAM)s 458.5 m
(    task  may be used to examine or edit the contents of an array.  When)s 450.0 m
(    more than one task is listed the task name is prefixed to  the  list)s 441.5 m
(    of each tasks parameters.)s 433.0 m
(    )s 424.5 m
(    )s 416.0 m
(EXAMPLES)s 407.5 m
(    1. List the parameter for the task DELETE.  Note that the positional)s 399.0 m
(    parameters are listed first, in the order  in  which  they  must  be)s 390.5 m
(    specified on the command line, followed by the hidden parameters.)s 382.0 m
(    )s 373.5 m
(    cl> lparam delete)s 365.0 m
(            files = "temp"          list of files to be deleted)s 356.5 m
(         go_ahead = yes              ?)s 348.0 m
(          \(verify = no\)             verify operation before deleting each file?)s 339.5 m
(    \(default_acti = yes\)            default delete action for verify query)s 331.0 m
(     \(allversions = yes\)            delete all versions of each file)s 322.5 m
(        \(subfiles = yes\)            delete any subfiles of each file)s 314.0 m
(            \(mode = "ql"\)           )s 305.5 m
(    )s 297.0 m
(    2.  List  the  contents  of the file pset "delete.par".  Named psets)s 288.5 m
(    such as this are most commonly  produced  using  the  ":W  FILENAME")s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 45 45
/m{18 exch moveto}bind def
756 m
(LPARAM \(Apr87\)                  language                  LPARAM \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    colon   command  in  EPARAM,  e.g.,  to  prepare  several  different )s 713.5 m
(    versions of the parameter set for a task.)s 705.0 m
(    )s 696.5 m
(            cl> lparam delete.par)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(    )s 662.5 m
(BUGS)s 654.0 m
(    You cannot list the parameters of  a  task  that  does  not  have  a)s 645.5 m
(    parameter file \(e.g., all builtin tasks\).)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(SEE ALSO)s 611.5 m
(    eparam, dparam, cache)s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(MATHFCNS \(Feb86\)                language                MATHFCNS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    mathfcns -- math functions available in the CL)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNOPSIS)s 679.5 m
(    )s 671.0 m
(    Function    Return value                  Description)s 662.5 m
(    )s 654.0 m
(    sin\(x\)          real                    sine)s 645.5 m
(    cos\(x\)          real                    cosine)s 637.0 m
(    tan\(x\)          real                    tangent)s 628.5 m
(    atan2\(x,y\)      real                    arc-tangent)s 620.0 m
(    exp\(x\)          real                    e**x)s 611.5 m
(    log\(x\)          real                    natural logarithm)s 603.0 m
(    log10\(x\)        real                    common logarithm)s 594.5 m
(    frac\(x\)         real                    fractional part)s 586.0 m
(    abs\(x\)          type of argument        absolute value)s 577.5 m
(    min\(a,b,...\)    type of min. arg        minimum of a list of values)s 569.0 m
(    max\(a,b,...\)    type of max. arg        maximum of a list of values)s 560.5 m
(    real\(x\)         real                    convert to real)s 552.0 m
(    int\(x\)          integer                 integer part)s 543.5 m
(    )s 535.0 m
(    )s 526.5 m
(DESCRIPTION)s 518.0 m
(    A  number  of mathematical functions are available under the CL.  In)s 509.5 m
(    general they return real values and may  be  used  wherever  a  real)s 501.0 m
(    expression  is  valid.   The  input arguments may be integer or real)s 492.5 m
(    and may be mixed in cases where  the  function  has  more  than  one)s 484.0 m
(    argument.  Exceptions:)s 475.5 m
(    )s 467.0 m
(        abs\(x\)      returns real or integer depending on its argument)s 458.5 m
(        int\(x\)      returns an integer)s 450.0 m
(        min,max     return a copy of the min/max operand, no type change)s 441.5 m
(    )s 433.0 m
(    Note  that  the  intrinsic  functions  INT and REAL may be called to)s 424.5 m
(    decode string valued arguments.)s 416.0 m
(    )s 407.5 m
(    )s 399.0 m
(EXAMPLES)s 390.5 m
(    y = sin \(x\))s 382.0 m
(      = 180 / 3.1415927 * atan2 \(x, y\))s 373.5 m
(    i = int \(max \(4.3, x, y, 2\)\))s 365.0 m
(      = 1. - \(sin\(.5\)**2 + cos\(.5\)**2\))s 356.5 m
(    )s 348.0 m
(    )s 339.5 m
(BUGS)s 331.0 m
(    An invalid argument list to a  math  function  \(e.g.  log\(-1\)\)  will)s 322.5 m
(    terminate a script.)s 314.0 m
(    )s 305.5 m
(    )s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 46 46
/m{18 exch moveto}bind def
756 m
(MATHFCNS \(Feb86\)                language                MATHFCNS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(SEE ALSO)s 713.5 m
(    strings)s 705.0 m
()s 696.5 m
()s 688.0 m
()s 679.5 m
()s 671.0 m
()s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(MKTEMP \(Feb86\)                  language                  MKTEMP \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    mktemp -- make a unique file name)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    mktemp root)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    root)s 628.5 m
(        The root \(prefix\) for the generated filename.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    MKTEMP  returns a unique filename string which may be used to create)s 586.0 m
(    a temporary file name.  The string is  the  concatenation  of  three)s 577.5 m
(    elements:  the input argument, the process id, and a final character)s 569.0 m
(    which changes on each call.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(EXAMPLES)s 535.0 m
(    1. Create a unique filename with  the  root  "sav"  in  the  logical)s 526.5 m
(    directory "tmp".)s 518.0 m
(    )s 509.5 m
(            savefile = mktemp \("tmp$sav"\))s 501.0 m
(    )s 492.5 m
(    )s 484.0 m
(BUGS)s 475.5 m
(    Since  some time may elapse between the creation of the filename and)s 467.0 m
(    the creation of a file with that name, there is  no  guarantee  that)s 458.5 m
(    the  name will still be unique when it is actually used, however the)s 450.0 m
(    algorithm used  to  generate  the  name  makes  filename  collisions)s 441.5 m
(    unlikely.)s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 47 47
/m{18 exch moveto}bind def
756 m
(NEXT \(Feb86\)                    language                    NEXT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    next -- start the next iteration of a for or while loop)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    next)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    The  NEXT  statement begins the next iteration of the loop construct)s 637.0 m
(    in which it is enclosed, whithout executing any  of  the  statements)s 628.5 m
(    remaining before the end of the loop.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(EXAMPLES)s 594.5 m
(    1.  Sum  the  pixels  in a two dimensional array.  Skip any negative)s 586.0 m
(    valued pixels.)s 577.5 m
(    )s 569.0 m
(            for \(i=1;  i < NCOLS;  i+=1\) {)s 560.5 m
(                for \(j=1;  j < NLINES;  j+=1\) {)s 552.0 m
(                    if \(pixel[i,j] < 0\))s 543.5 m
(                        next)s 535.0 m
(                    total += pixel[i,j])s 526.5 m
(                })s 518.0 m
(            })s 509.5 m
(    )s 501.0 m
(    )s 492.5 m
(SEE ALSO)s 484.0 m
(    break, while, for)s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(OSFN \(Feb86\)                    language                    OSFN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    osfn -- convert an IRAF filename to a host system filename)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    string = osfn \(vfn\))s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    vfn  )s 628.5 m
(        The IRAF virtual filename to be translated into a host filename.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    OSFN is a string valued  intrinsic  function  which  takes  an  IRAF)s 586.0 m
(    virtual  filename  as  input  and returns the equivalent host system)s 577.5 m
(    filename as output.  OSFN can only be called as a function.)s 569.0 m
(    )s 560.5 m
(    )s 552.0 m
(EXAMPLES)s 543.5 m
(    1. Print the host equivalent of the vfn "hlib$login.cl".)s 535.0 m
(    )s 526.5 m
(            cl> = osfn \("hlib$login.cl"\))s 518.0 m
(    )s 509.5 m
(    2. Compute a host filename for use as an argument to a foreign  task)s 501.0 m
(    \(see help TASK for more information on foreign tasks\).)s 492.5 m
(    )s 484.0 m
(            cl> task $vdir = "$directory"   # VMS directory lister)s 475.5 m
(            cl> vdir /size osfn\("bin$"\))s 467.0 m
(    )s 458.5 m
(    )s 450.0 m
(SEE ALSO)s 441.5 m
(    pathnames, task)s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 48 48
/m{18 exch moveto}bind def
756 m
(PACKAGE \(Feb86\)                 language                 PACKAGE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    package -- define a new package)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    package pkgname)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    pkgname)s 628.5 m
(        The  name  of  the new package to be created.  If called with no)s 620.0 m
(        arguments, PACKAGE lists the currently defined packages in  task)s 611.5 m
(        search order.)s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(DESCRIPTION)s 577.5 m
(    The  PACKAGE  task creates a new package.  The newly defined package)s 569.0 m
(    becomes the current package, and the prompt is changed  to  use  the)s 560.5 m
(    first  two characters of the package name.  The package command does)s 552.0 m
(    not define any tasks within the package, that is done by  subsequent)s 543.5 m
(    TASK  declarations.   Subsequent TASK declarations will add tasks to)s 535.0 m
(    the task list for the new package.)s 526.5 m
(    )s 518.0 m
(    The new package remains the "current package" until another  PACKAGE)s 509.5 m
(    command  is  entered, or until the task in which the package command)s 501.0 m
(    was entered is terminated.  Normally PACKAGE will  be  used  at  the)s 492.5 m
(    beginning  of  a  script  to  define  the  package name.  It will be)s 484.0 m
(    followed by one or more task definitions, and then by a CL or  CLBYE)s 475.5 m
(    to  interpret user commands, until the command BYE is entered by the)s 467.0 m
(    user, at which time the package script task  terminates,  discarding)s 458.5 m
(    the package and any associated definitions.)s 450.0 m
(    )s 441.5 m
(    )s 433.0 m
(EXAMPLES)s 424.5 m
(    1. The use of PACKAGE in a package script task.)s 416.0 m
(    )s 407.5 m
(            package lists)s 399.0 m
(    )s 390.5 m
(            set     lists           = "pkg$lists/")s 382.0 m
(    )s 373.5 m
(            task    table,)s 365.0 m
(                    tokens,)s 356.5 m
(                    unique,)s 348.0 m
(                    lintran,)s 339.5 m
(                    columns,)s 331.0 m
(                    words           = "lists$x_lists.e")s 322.5 m
(    )s 314.0 m
(            task    $gcursor        = "lists$gcursor.cl")s 305.5 m
(            task    $imcursor       = "lists$imcursor.cl")s 297.0 m
(            task    average         = "lists$average.cl")s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(PACKAGE \(Feb86\)                 language                 PACKAGE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            clbye\(\))s 713.5 m
(    )s 705.0 m
(    )s 696.5 m
(    2.  List  the  currently defined packages in the order in which they)s 688.0 m
(    will be searched for tasks.)s 679.5 m
(    )s 671.0 m
(            cl> pack)s 662.5 m
(            clpackage)s 654.0 m
(            language)s 645.5 m
(            user)s 637.0 m
(            system)s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(BUGS)s 603.0 m
(    All active packages  must  have  unique  names.   To  eliminate  the)s 594.5 m
(    possibility  of  parameter  file name collisions in UPARM, the three)s 586.0 m
(    chararacter string formed by concatenating the first two  and  final)s 577.5 m
(    characters of the package name should be unique.)s 569.0 m
(    )s 560.5 m
(    )s 552.0 m
(SEE ALSO)s 543.5 m
(    task, redefine)s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 49 49
/m{18 exch moveto}bind def
756 m
(PARAMETERS \(Feb86\)              language              PARAMETERS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    parameters -- IRAF parameters and their usage)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(DISCUSSION)s 679.5 m
(    )s 671.0 m
(    1. INTRODUCTION)s 662.5 m
(    )s 654.0 m
(        Parameters  are  the  primary means of communicating information)s 645.5 m
(    between the user and IRAF tasks, and between  separate  IRAF  tasks.)s 637.0 m
(    Each  user  effectively has their own copy of the parameters for the)s 628.5 m
(    tasks they run, and by  tailoring  these  as  they  wish,  they  may)s 620.0 m
(    customize  the  IRAF  environment.  Here we describe characteristics)s 611.5 m
(    of  IRAF  parameters.   The  syntax  of  parameter  declarations  is )s 603.0 m
(    described elsewhere.)s 594.5 m
(    )s 586.0 m
(    )s 577.5 m
(    2. PARAMETER TYPES)s 569.0 m
(    )s 560.5 m
(        The  CL  supports  a  variety  of  parameter datatypes, from the)s 552.0 m
(    conventional string, integer,  and  floating  point  types,  to  the)s 543.5 m
(    exotic struct and cursor types.  There is no complex type in the CL.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(    char)s 509.5 m
(        Character   parameters  are  used  to  store  strings  of  ASCII )s 501.0 m
(        characters.  By default  character  parameters  have  a  maximum)s 492.5 m
(        length  of  64  characters,  but  this may be extended using the)s 484.0 m
(        LENGTH option when  the  parameter  is  declared.   A  character)s 475.5 m
(        parameter  consisting  of  a  single  character  can  usually be)s 467.0 m
(        treated as an integer, with a value equal to the ASCII value  of)s 458.5 m
(        the character.)s 450.0 m
(    )s 441.5 m
(    int Integer  parameters  are  used  to  store  integer  information. )s 433.0 m
(        Integer parameters are stored  internally  as  a  long  integer,)s 424.5 m
(        permitting at least 32 bits of precision.)s 416.0 m
(    )s 407.5 m
(    real)s 399.0 m
(        Real  parameters  are stored internally as double's.  In general)s 390.5 m
(        they may be entered with or without a decimal  point,  and  with)s 382.0 m
(        or  without  an  exponent.   Note  that  the  exponent should be)s 373.5 m
(        entered using an E not a D.)s 365.0 m
(    )s 356.5 m
(    bool)s 348.0 m
(        Boolean parameters may only have the values YES or NO.)s 339.5 m
(    )s 331.0 m
(    file)s 322.5 m
(        File parameters are basically  character  parameters  which  are)s 314.0 m
(        required  to  be  valid  file  names.   All  operations legal on)s 305.5 m
(        characters are legal on file parameters.  Various checks on  the)s 297.0 m
(        accessibility  or  existence  of  a  file  may  be automatically)s 288.5 m
(        performed when a FILE type parameter is used at runtime.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(PARAMETERS \(Feb86\)              language              PARAMETERS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    struct)s 713.5 m
(        Struct parameters  are  characters  strings  which  are  treated)s 705.0 m
(        specially  by  the scan and fscan functions.  Scan and fscan set)s 696.5 m
(        structs to the remainder  of  the  line  being  scanned  without)s 688.0 m
(        further parsing.)s 679.5 m
(    )s 671.0 m
(    gcur, imcur)s 662.5 m
(        The  cursor  parameters  have  a  character  string value with a)s 654.0 m
(        predefined cursor value format.  When a  cursor  type  parameter)s 645.5 m
(        is  read  in  "query"  mode, the hardware cursor on the graphics)s 637.0 m
(        terminal or image display is physically  read.   If  the  cursor)s 628.5 m
(        parameter  is  list-structured,  cursor  input may also be taken)s 620.0 m
(        from a list \(text file\).  For  a  more  detailed  discussion  of)s 611.5 m
(        cursor control in the CL, type HELP CURSORS.)s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(    3. LIST-DIRECTED PARAMETERS)s 577.5 m
(    )s 569.0 m
(        Frequently  one  may have a list of values, e.g. numbers or file)s 560.5 m
(    names, which one wishes to analyze in turn.  To do this one may  use)s 552.0 m
(    a  list-directed parameter.  The parameter is defined with its value)s 543.5 m
(    field set to the name of a file containing the list.  The next  time)s 535.0 m
(    it  is  referenced  its  value will not be the string containing the)s 526.5 m
(    file name, but rather the  first  value  in  the  list.   Subsequent)s 518.0 m
(    calls  will  return later values in the list until an end-of-file is)s 509.5 m
(    reached, at which point the parameter will appear to  be  undefined.)s 501.0 m
(    The  file  may  be  rewound  using  the  p_filename attribute of the)s 492.5 m
(    parameter.  Assigning the null string to  a  list  parameter  closes)s 484.0 m
(    the associated list file.)s 475.5 m
(    )s 467.0 m
(            int     *list = "listfile.lis")s 458.5 m
(            int     cur_val)s 450.0 m
(    )s 441.5 m
(            for \(i=1;  i < nlist;  i+=1\) {)s 433.0 m
(                cur_val = list)s 424.5 m
(                analyze \(cur_val\))s 416.0 m
(            })s 407.5 m
(    )s 399.0 m
(    )s 390.5 m
(    A  common  usage of struct list-directed parameters is to read files)s 382.0 m
(    in conjunction with  the  FSCAN  function.   The  following  example)s 373.5 m
(    prints out a file.)s 365.0 m
(    )s 356.5 m
(            struct  *slist = "filer.lis")s 348.0 m
(            struct  line)s 339.5 m
(    )s 331.0 m
(            while \(fscan \(slist, line\) != EOF\))s 322.5 m
(                print \(line\))s 314.0 m
(    )s 305.5 m
(    )s 297.0 m
(    4. MODES)s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 50 50
/m{18 exch moveto}bind def
756 m
(PARAMETERS \(Feb86\)              language              PARAMETERS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(        The  mode  of  a parameter determines two qualities: whether the)s 713.5 m
(    parameter is prompted for when  it  is  accessed,  and  whether  the)s 705.0 m
(    parameter  is  "learned",  i.e.  whether  its value is saved between)s 696.5 m
(    invocations of a task.)s 688.0 m
(    )s 679.5 m
(    A hidden parameter is never prompted for unless it is  undefined  or)s 671.0 m
(    has  an illegal value.  A query parameter is prompted for every time)s 662.5 m
(    it is referenced, except that a query parameter which is  set  on  a)s 654.0 m
(    command  line  is  not  queried  for when it is accessed within that)s 645.5 m
(    task.)s 637.0 m
(    )s 628.5 m
(    These are the two basic modes, but a parameter may also  be  defined)s 620.0 m
(    to  be  automatic.   This means that the parameter will use the mode)s 611.5 m
(    not of the task, but of the package the task is part of, or  by  the)s 603.0 m
(    CL.   When  an  automatic parameter is referenced the CL searches up)s 594.5 m
(    this hierarchy to find a mode which is not automatic and  uses  this)s 586.0 m
(    for  the  mode.   If the mode switch at all levels is automatic then)s 577.5 m
(    the mode is set to hidden.  The mode switch  at  the  task,  package)s 569.0 m
(    and  CL  levels  is  determined  by  the VALUE, not the mode, of the)s 560.5 m
(    parameter with the name "mode" associated with the task, package  or)s 552.0 m
(    CL.)s 543.5 m
(    )s 535.0 m
(    Query  and automatic parameters are learned by default, while hidden)s 526.5 m
(    parameters are not.)s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(    5. RANGES)s 492.5 m
(    )s 484.0 m
(        The CL supports ranges  for  integer  and  real  variables,  and)s 475.5 m
(    enumeration  lists for character strings.  A user may specify either)s 467.0 m
(    or both of a minimum and maximum for numbers, and the CL will reject)s 458.5 m
(    any  values  which  fall  out of this range.  Range checking is only)s 450.0 m
(    performed during querying, or inside EPARAM, not  when  a  value  is)s 441.5 m
(    assigned  directly.   For  an  enumerated string the input string is)s 433.0 m
(    matched  against  any  of  the  enumerated  possibilities  using   a )s 424.5 m
(    minimum-matching technique.  A value with no match is rejected.)s 416.0 m
(    )s 407.5 m
(    )s 399.0 m
(    6. PARAMETER ATTRIBUTES)s 390.5 m
(    )s 382.0 m
(        The  user may access the different elements of a parameter using)s 373.5 m
(    the parameter  attributes.   For  some  parameters  certain  of  the)s 365.0 m
(    attributes will be meaningless or undefined.)s 356.5 m
(    )s 348.0 m
(    )s 339.5 m
(    p_name)s 331.0 m
(        The name of the parameter.)s 322.5 m
(    )s 314.0 m
(    p_type)s 305.5 m
(        A string indicating the basic type of the parameter:)s 297.0 m
(        )s 288.5 m
(                b       -- boolean)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(PARAMETERS \(Feb86\)              language              PARAMETERS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(                i       -- int)s 713.5 m
(                r       -- real)s 705.0 m
(                s       -- string/char)s 696.5 m
(                f       -- file)s 688.0 m
(                struct  -- struct)s 679.5 m
(                gcur    -- graphics cursor)s 671.0 m
(                imcur   -- image cursor=)s 662.5 m
(    )s 654.0 m
(    p_xtype)s 645.5 m
(        This  is  the  same as p_type except that the string is prefixed)s 637.0 m
(        by "*" if the parameter is list directed.)s 628.5 m
(    )s 620.0 m
(    p_mode)s 611.5 m
(        A string indicating the mode of the parameter  composed  of  the)s 603.0 m
(        characters:)s 594.5 m
(        )s 586.0 m
(                q  --  query)s 577.5 m
(                a  --  automatic)s 569.0 m
(                h  --  hidden)s 560.5 m
(                l  --  learned)s 552.0 m
(    )s 543.5 m
(    p_value)s 535.0 m
(        The  value of the parameter.  For a list-directed parameter this)s 526.5 m
(        is a element in the file, not the file name.  Generally this  is)s 518.0 m
(        what is accessed when the parameter attribute is not specified.)s 509.5 m
(    )s 501.0 m
(    p_length)s 492.5 m
(        For  string  type  parameters  \(i.e.  char,  struct, file, gcur,)s 484.0 m
(        imcur\), the maximum length of the string.)s 475.5 m
(    )s 467.0 m
(    p_mimimum)s 458.5 m
(        The minimum value for a parameter.  Also for enumerated  strings)s 450.0 m
(        the enumeration list.)s 441.5 m
(    )s 433.0 m
(    p_maximum)s 424.5 m
(        The maximum value for a parameter.)s 416.0 m
(    )s 407.5 m
(    p_filename)s 399.0 m
(        For  list-directed  parameters the file name associated with the)s 390.5 m
(        parameter.)s 382.0 m
(    )s 373.5 m
(    )s 365.0 m
(    Attributes may appear on either side of an equals sign, e.g.)s 356.5 m
(    )s 348.0 m
(            list.p_filename = "test.fil")s 339.5 m
(            = str.p_length)s 331.0 m
(            range = integ.p_maximum - integ.p_minimum)s 322.5 m
(            list.p_xtype =)s 314.0 m
(            = system.page.first_page.p_minimum      # Fully qualified.)s 305.5 m
(    )s 297.0 m
(    It is illegal to assign to the p_name, p_type  and  p_xtype  fields.)s 288.5 m
(    Most of the direct use of the parameter attributes is expected to be)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -4-)s 254.5 m
()s S
%%Page: 51 51
/m{18 exch moveto}bind def
756 m
(PARAMETERS \(Feb86\)              language              PARAMETERS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    in systems level programming.)s 713.5 m
(    )s 705.0 m
(    )s 696.5 m
(    7. ARRAYS)s 688.0 m
(    )s 679.5 m
(        The user may define arrays of  arbitrary  dimensionality  within)s 671.0 m
(    the  CL.  The arrays are referenced in the conventional fashion with)s 662.5 m
(    the index list enclosed  in  square  brackets,  and  the  individual)s 654.0 m
(    elements  separated  by  commas.   In their internal representation,)s 645.5 m
(    arrays are similar to those  in  Fortran,  with  the  first  element)s 637.0 m
(    changing  fastest as one traverses memory.  The limits of each index)s 628.5 m
(    may be specified.)s 620.0 m
(    )s 611.5 m
(    In general the CL can only access one element of the array at a time)s 603.0 m
(    but  there  is  an  automatic  looping  feature  which  permits  the )s 594.5 m
(    appearance of array arithmetic.  Any executable statement  in  which)s 586.0 m
(    an  array is referenced but  in which the exact element of the array)s 577.5 m
(    is not defined \(an "open" array reference\)  will  cause  the  CL  to)s 569.0 m
(    implicitly  execute  that  statement  within  a  loop  over  all the)s 560.5 m
(    elements of the array.  More than one "open"  array  may  appear  in)s 552.0 m
(    the  expression  but  they  agree  on  the  limits of the loop.  For)s 543.5 m
(    example,)s 535.0 m
(    )s 526.5 m
(            real x[20,20], y[20], z[10,20], t[20])s 518.0 m
(    )s 509.5 m
(            y = x[1,*])s 501.0 m
(            t = log\(y\))s 492.5 m
(            z = x[1:10,*])s 484.0 m
(    )s 475.5 m
(    )s 467.0 m
(    8. SCOPE)s 458.5 m
(    )s 450.0 m
(        A parameter is known via an implicit reference if  the  task  in)s 441.5 m
(    which  it  is  defined  is  active.   In  an  implicit reference the)s 433.0 m
(    parameter name  only,  without  a  task  or  package  qualifier,  is)s 424.5 m
(    given.   The  CL is always active, so that its parameters are always)s 416.0 m
(    known.  In a script, the script itself is active, so its  parameters)s 407.5 m
(    may  be  used  implicitly.   If  the script calls another task, that)s 399.0 m
(    sub-task may reference the invoking tasks parameters implicitly.)s 390.5 m
(    )s 382.0 m
(    For an explicit reference, i.e. with task  and  package  qualifiers,)s 373.5 m
(    the  parameter  is known if the package in which the task is defined)s 365.0 m
(    is active.  For example, when starting the CL, the  "lists"  package)s 356.5 m
(    is  not  active,  thus  the parameters of the "sort" task may not be)s 348.0 m
(    referenced even in the form "lists.sort.param".  However  since  the)s 339.5 m
(    system  package  is activated during login to the CL, the parameters)s 331.0 m
(    of "page" may be referenced by "page.param".  In general  a  package)s 322.5 m
(    qualifier  is  used  only to remove ambiguity between tasks with the)s 314.0 m
(    same name in two different packages.)s 305.5 m
(    )s 297.0 m
(    )s 288.5 m
(    9. STORAGE)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -5-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(PARAMETERS \(Feb86\)              language              PARAMETERS \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(        There are several places in which  parameters  are  stored.   On)s 713.5 m
(    disk  the  CL  searches  for  the  parameters  for  a  task in three)s 705.0 m
(    locations.  For a  procedure  script,  the  default  parameters  are)s 696.5 m
(    found   in   the   script  file  itself,  while  other  scripts  and )s 688.0 m
(    executables  have  a  parameter  file  with  defaults  in  the  same )s 679.5 m
(    directory  as  the  script  or executable.  These default values are)s 671.0 m
(    used the first time a task is run, or whenever  the  default  values)s 662.5 m
(    have  been  updated  more  recently  than  the  user's  copy  of the)s 654.0 m
(    parameters.  The user's copy is created when a task terminates,  and)s 645.5 m
(    retains  any  "learned" changes to the parameters.  It is created in)s 637.0 m
(    a directory pointed to by the IRAF logical "uparm" which is  usually)s 628.5 m
(    a sub-directory of the default IRAF directory for the user.)s 620.0 m
(    )s 611.5 m
(    The  user  may also use in-core storage for the parameters using the)s 603.0 m
(    cache command.  This keeps  parameters  for  frequently  used  tasks)s 594.5 m
(    available  without  requiring  disk  access.   Cached parameters are)s 586.0 m
(    copied to disk when the CL exits, or  when  the  update  command  is)s 577.5 m
(    used.)s 569.0 m
(    )s 560.5 m
(    )s 552.0 m
(SEE ALSO)s 543.5 m
(    lparam, eparam, cache, unlearn, update, cursor)s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -6-)s 254.5 m
()s S
%%Page: 52 52
/m{18 exch moveto}bind def
756 m
(PRCACHE \(Feb86\)                 language                 PRCACHE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    prcache -- cache a subprocess)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    prcache task [task ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    task)s 628.5 m
(        The  name  of  a  compiled  IRAF  task  \(not  the filename of an)s 620.0 m
(        executable file\).)s 611.5 m
(        )s 603.0 m
(        )s 594.5 m
(DESCRIPTION)s 586.0 m
(    The CL maintains a small cache to store executable images.  When the)s 577.5 m
(    user  invokes a task which calls an executable the cache is searched)s 569.0 m
(    for the image before any attempt to load the executable  image  from)s 560.5 m
(    disk.   After  completion  of the task the CL retains the executable)s 552.0 m
(    image in the process cache, until the space is needed by some  other)s 543.5 m
(    executable.   Thus  if a few commands are being executed frequently,)s 535.0 m
(    the overhead of loading the image into core from disk  is  bypassed,)s 526.5 m
(    which  can  result  in  a significant improvement in the response of)s 518.0 m
(    the CL.)s 509.5 m
(    )s 501.0 m
(    By default, when the cache is full and a new executable must be run,)s 492.5 m
(    the  CL searches for the slot containing the task which has remained)s 484.0 m
(    dormant the longest and replaces it with the new task.)s 475.5 m
(    )s 467.0 m
(    The PRCACHE command gives the user some control over  this  process.)s 458.5 m
(    Using  it  without any arguments shows the tasks which are currently)s 450.0 m
(    stored in the process cache.  For each slot one gets a line like the)s 441.5 m
(    following.)s 433.0 m
(    )s 424.5 m
(        [07] lyra!17763\(4563X\)           H  bin$x_images.e)s 416.0 m
(    )s 407.5 m
(    Here,  07  is  the  process  slot number as required by FLPRCACHE to)s 399.0 m
(    disconnect the process.  The name "lyra" is the name of the node  in)s 390.5 m
(    the  local  network  on  which the process is executing; this is not)s 382.0 m
(    normally the local node.  In the example, 17763 \(hex 4563X\)  is  the)s 373.5 m
(    process  number  \(pid\) of the executable.  H indicates that the task)s 365.0 m
(    is hibernating, i.e. the  task  was  waiting  in  the  cache  to  be)s 356.5 m
(    invoked.   R would show that the task was running.  An L appended to)s 348.0 m
(    either of these would show that the task had been  locked  into  the)s 339.5 m
(    cache  by  a previous prcache command.  The last element on the line)s 331.0 m
(    is the file name of the executable file which was  loaded  when  the)s 322.5 m
(    task was first invoked.)s 314.0 m
(    )s 305.5 m
(    If  one  or  more task names are given as arguments, those tasks are)s 297.0 m
(    locked into the cache, and will not be replaced by  the  CL  without)s 288.5 m
(    specific  user  intervention.  If these tasks are not already in the)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(PRCACHE \(Feb86\)                 language                 PRCACHE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    cache, the corresponding executables are started, and the tasks  are)s 713.5 m
(    loaded into the cache.)s 705.0 m
(    )s 696.5 m
(    Note  that  the  `process  cache' described here, and the `parameter)s 688.0 m
(    cache' described in the `cache' command are entirely  distinct,  and)s 679.5 m
(    a  given  task  may  be found in either, both, or neither of the two)s 671.0 m
(    caches.)s 662.5 m
(    )s 654.0 m
(    Also note that only executable images reside in the  process  cache.)s 645.5 m
(    Thus,  for  example,  if  the  NEWS command is executed, it does not)s 637.0 m
(    appear in the process cache, but the executable  `system$x_system.e')s 628.5 m
(    does,  because  NEWS  calls  PAGE,  which is one of the many entries)s 620.0 m
(    into the system executable.)s 611.5 m
(    )s 603.0 m
(    Locked process cache slots may only  be  freed  with  the  FLPRCACHE)s 594.5 m
(    command.)s 586.0 m
(    )s 577.5 m
(    )s 569.0 m
(EXAMPLES)s 560.5 m
(    1. Flush the system process and lock it back into the cache.)s 552.0 m
(    )s 543.5 m
(            cl> flpr dir)s 535.0 m
(            cl> prc dir)s 526.5 m
(    )s 518.0 m
(    2. Print the current contents of the process cache.)s 509.5 m
(    )s 501.0 m
(            cl> prc)s 492.5 m
(                [10] lyra!17764\(4564X\)           H  bin$x_plot.e)s 484.0 m
(                [07] lyra!17763\(4563X\)           H  bin$x_images.e)s 475.5 m
(                [04] lyra!17455\(442FX\)           HL bin$x_system.e)s 467.0 m
(                       0)s 458.5 m
(    )s 450.0 m
(    3.  Flush  all  processes which are not locked into the cache.  This)s 441.5 m
(    may  be  necessary  after  aborting  a  task   to   initialize   \(by )s 433.0 m
(    re-executing\)  the  associated process, which may not have recovered)s 424.5 m
(    completely from the abort.)s 416.0 m
(    )s 407.5 m
(            cl> flpr)s 399.0 m
(    )s 390.5 m
(    )s 382.0 m
(BUGS)s 373.5 m
(    The user is responsible for making sure that he does  not  lock  all)s 365.0 m
(    the slots in the cache.)s 356.5 m
(    )s 348.0 m
(    )s 339.5 m
(SEE ALSO)s 331.0 m
(    flprcache)s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 53 53
/m{18 exch moveto}bind def
756 m
(PRINT \(Feb86\)                   language                   PRINT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    fprint -- print to a parameter)s 705.0 m
(    print  -- print to the standard output)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(USAGE)s 671.0 m
(    print  expr [expr ...])s 662.5 m
(    fprint param expr [expr ...])s 654.0 m
(    )s 645.5 m
(    )s 637.0 m
(PARAMETERS)s 628.5 m
(    )s 620.0 m
(    expr)s 611.5 m
(        Any expression, the string value of which is to be printed.)s 603.0 m
(    )s 594.5 m
(    param)s 586.0 m
(        FPRINT will deposit the output string in the value field of this)s 577.5 m
(        parameter.)s 569.0 m
(    )s 560.5 m
(    )s 552.0 m
(DESCRIPTION)s 543.5 m
(    The PRINT and FPRINT commands format a line of text and write it  to)s 535.0 m
(    either  the  standard  output  or in the case of FPRINT, the p_value)s 526.5 m
(    field of the named parameter.  The output is  free  format  although)s 518.0 m
(    spaces  may be specifically inserted \(as quoted string constants\) to)s 509.5 m
(    make  the  output  easier  to  read.   One  space  is  automatically )s 501.0 m
(    inserted  after  each  numeric  argument;  this  can  be defeated by)s 492.5 m
(    coercing the argument to a string with the STR  intrinsic  function.)s 484.0 m
(    A  newline  is  automatically  output at the end of the output line.)s 475.5 m
(    I/O redirection may be used with PRINT to write to a file.)s 467.0 m
(    )s 458.5 m
(    Compute mode \(a parenthesized  argument  list\)  is  recommended  for)s 450.0 m
(    this task to avoid surprises.)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(EXAMPLES)s 416.0 m
(    1. Print the name of the current terminal.)s 407.5 m
(    )s 399.0 m
(            cl> print \("terminal = ", envget \("terminal"\)\))s 390.5 m
(    )s 382.0 m
(    2. Output a blank line on the standard output, e.g., in a script.)s 373.5 m
(    )s 365.0 m
(            print \(""\))s 356.5 m
(    )s 348.0 m
(    3.  Format  a  command  and  send  it  to  the host system.  In this)s 339.5 m
(    example, "fname" is a string valued parameter.)s 331.0 m
(    )s 322.5 m
(            cl> print \("!dir/full ", fname\) | cl)s 314.0 m
(    )s 305.5 m
(    4. Write to a file.)s 297.0 m
(    )s 288.5 m
(            for \(x=1.;  x < 1E5;  x *= 10\) )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(PRINT \(Feb86\)                   language                   PRINT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(                print \("the sqrt of ", x, "is ", sqrt\(x\), >> "output"\))s 713.5 m
(    )s 705.0 m
(    )s 696.5 m
(BUGS)s 688.0 m
(    The FPRINT task is not very useful  since  the  same  thing  can  be)s 679.5 m
(    accomplished by string concatenation and assignment.)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(SEE ALSO)s 645.5 m
(    scan, fscan)s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 54 54
/m{18 exch moveto}bind def
756 m
(PROCEDURE \(Feb86\)               language               PROCEDURE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    procedure -- declare a new CL procedure)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    PROCEDURE proc_name [\( [req_par, ...] \)])s 671.0 m
(    )s 662.5 m
(    <query mode parameter declarations>)s 654.0 m
(    <hidden parameter declarations>)s 645.5 m
(    )s 637.0 m
(    BEGIN)s 628.5 m
(            <local variable declarations>)s 620.0 m
(            <executable statements>)s 611.5 m
(    END)s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(ELEMENTS)s 577.5 m
(    )s 569.0 m
(    proc_name)s 560.5 m
(        The  name  of the procedure.  In the case of a procedure script,)s 552.0 m
(        the script file should have the same name.)s 543.5 m
(    )s 535.0 m
(    req_par)s 526.5 m
(        A required \(query mode\) parameter  for  the  procedure.   Hidden)s 518.0 m
(        parameters  must  be declared in the declarations section but do)s 509.5 m
(        not appear in the argument list.)s 501.0 m
(        )s 492.5 m
(        )s 484.0 m
(DESCRIPTION)s 475.5 m
(    The PROCEDURE statement is used to declare a new CL  procedure.   In)s 467.0 m
(    the current CL, procedures are permitted only in ".cl" script files,)s 458.5 m
(    and there may  be  only  one  procedure  per  file.   The  PROCEDURE)s 450.0 m
(    statement  must  be  the  first  non-comment statement in the script)s 441.5 m
(    file.  Any parameters which appear in the  procedure  argument  list)s 433.0 m
(    must  be  declared in the parameter declarations section as well and)s 424.5 m
(    will default  to  mode  "auto".   Paremeters  not  in  the  required)s 416.0 m
(    parameter  list  will  default  to  mode  "hidden".   The  order  of )s 407.5 m
(    positional parameters is the order in which  the  parameters  appear)s 399.0 m
(    in the argument list.)s 390.5 m
(    )s 382.0 m
(    )s 373.5 m
(EXAMPLES)s 365.0 m
(    1. Declare a no-op procedure.)s 356.5 m
(    )s 348.0 m
(    procedure noop)s 339.5 m
(    begin)s 331.0 m
(    end)s 322.5 m
(    )s 314.0 m
(    2. A more complex procedure \(hlib$devstatus.cl\).)s 305.5 m
(    )s 297.0 m
(    # DEVSTATUS -- Print status info for the named device.)s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(PROCEDURE \(Feb86\)               language               PROCEDURE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    procedure devstatus \(device\))s 713.5 m
(    )s 705.0 m
(    string  device  { prompt = "device for which status is desired" })s 696.5 m
(    bool    verbose = no)s 688.0 m
(    )s 679.5 m
(    string  logname, hostname)s 671.0 m
(    struct  *devlist)s 662.5 m
(    string  dev)s 654.0 m
(    )s 645.5 m
(    begin)s 637.0 m
(            dev = device)s 628.5 m
(            _devstatus \(dev\))s 620.0 m
(    )s 611.5 m
(            if \(verbose\) {)s 603.0 m
(                # Print UNIX device status, too.)s 594.5 m
(    )s 586.0 m
(                devlist = "dev$devices")s 577.5 m
(                while \(fscan \(devlist, logname, hostname\) != EOF\) {)s 569.0 m
(                    if \(logname == dev\) {)s 560.5 m
(                        print \("ls -l /dev/", hostname\) | cl)s 552.0 m
(                        break)s 543.5 m
(                    })s 535.0 m
(                })s 526.5 m
(                devlist = "")s 518.0 m
(            })s 509.5 m
(    end)s 501.0 m
(    )s 492.5 m
(    )s 484.0 m
(BUGS)s 475.5 m
(    CL  procedures  can  only  be  placed  in  script files, they cannot)s 467.0 m
(    currently  be  typed  in  interactively.    Procedures   cannot   be )s 458.5 m
(    precompiled.    A   procedure   cannot   return  a  function  value. )s 450.0 m
(    Arguments are passed only by value,  not  by  reference.   Procedure)s 441.5 m
(    interpretation \(and expression evaluation\) is currently rather slow.)s 433.0 m
(    )s 424.5 m
(    )s 416.0 m
(SEE ALSO)s 407.5 m
(    declarations, task)s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 55 55
/m{18 exch moveto}bind def
756 m
(PUTLOG \(Mar86\)                  language                  PUTLOG \(Mar86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    putlog -- put a message to the logfile)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    putlog logmsg)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    logmsg)s 628.5 m
(        A message to append to the logfile.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    PUTLOG  is  used  to  add  user  messages  to  the  logfile.  The CL)s 586.0 m
(    parameter KEEPLOG must be set to `yes' for this to take effect.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(BUGS)s 552.0 m
(    For executable tasks, the only way to call PUTLOG currently  is  via)s 543.5 m
(    the low-level CLIO routine clcmd\(\).)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(SEE ALSO)s 509.5 m
(    cl, logging)s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(RADIX \(Feb86\)                   language                   RADIX \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    radix -- encode a number in any radix)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    string = radix \(number, newradix\))s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    number)s 628.5 m
(        The integer number to be encoded.)s 620.0 m
(    )s 611.5 m
(    newradix)s 603.0 m
(        The  radix or base in which the number is to be printed, e.g., 2)s 594.5 m
(        \(binary\), 8 \(octal\), 10 \(decimal\), 16 \(hex\), and so on.)s 586.0 m
(    )s 577.5 m
(    )s 569.0 m
(DESCRIPTION)s 560.5 m
(    RADIX is a string valued intrinsic function which formats an integer)s 552.0 m
(    number  in  the  indicated  radix,  return the encoded string as the)s 543.5 m
(    function value.  Note that the CL permits numbers  to  be  input  in)s 535.0 m
(    octal  or hex format \(trailing B or X suffix respectively\), allowing)s 526.5 m
(    common numeric conversions to decimal  to  be  done  directly.   The)s 518.0 m
(    RADIX  function  is however the only CL function currently available)s 509.5 m
(    for printing numbers in bases other than  10.   RADIX  can  only  be)s 501.0 m
(    called as a function.)s 492.5 m
(    )s 484.0 m
(    )s 475.5 m
(EXAMPLES)s 467.0 m
(    1. Print the hex number 7cde in binary.)s 458.5 m
(    )s 450.0 m
(            cl> = radix \(7cdex, 2\))s 441.5 m
(    )s 433.0 m
(    2. Print the hex number 7cde in decimal.)s 424.5 m
(    )s 416.0 m
(            cl> = 7cdex)s 407.5 m
(    )s 399.0 m
(    3. Print the number in variable I in decimal, octal, and hex.)s 390.5 m
(    )s 382.0 m
(            cl> print \(i, radix\(i,8\), " ", radix\(i,16\)\))s 373.5 m
(    )s 365.0 m
(    )s 356.5 m
(BUGS)s 348.0 m
(    Very large bases produce strange results.)s 339.5 m
(    )s 331.0 m
(    )s 322.5 m
(SEE ALSO)s 314.0 m
(    print)s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 56 56
/m{18 exch moveto}bind def
756 m
(REDEFINE \(Apr87\)                language                REDEFINE \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    task     -- define a new IRAF task)s 705.0 m
(    redefine -- redefine an IRAF task)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(USAGE)s 671.0 m
(    task     t1 [t2 ...] = tfile)s 662.5 m
(    redefine t1 [t2 ...] = tfile)s 654.0 m
(    )s 645.5 m
(    )s 637.0 m
(PARAMETERS)s 628.5 m
(    )s 620.0 m
(    t1, t2, ...)s 611.5 m
(        The  names  of  the  new logical tasks.  The task name should be)s 603.0 m
(        prefixed by a $ if the task has no parameter file.  An  optional)s 594.5 m
(        extension  should  be  appended  if either the standard input or)s 586.0 m
(        output of the task is a binary stream, rather  than  text.   For)s 577.5 m
(        example,  "$mytask.tb"  denotes a task with no parameter file, a)s 569.0 m
(        text standard input, and a binary standard output.)s 560.5 m
(    )s 552.0 m
(    tfile)s 543.5 m
(        The name of the file to be executed or interpreted  to  run  the)s 535.0 m
(        task.    The  type  of  the  task  is  determined  by  the  file )s 526.5 m
(        extension.  An ".e"  extension  indicates  an  executable  task,)s 518.0 m
(        while  ".cl" indicates a CL script task or procedure.  The TFILE)s 509.5 m
(        string is prefixed by a $ to define  a  FOREIGN  TASK  \(see  the)s 501.0 m
(        discussion below\).)s 492.5 m
(    )s 484.0 m
(    )s 475.5 m
(DESCRIPTION)s 467.0 m
(    The  TASK  statement  defines  a new task to the CL, and is required)s 458.5 m
(    before the task can be run from the CL.  The new task  is  added  to)s 450.0 m
(    the  "current package", i.e., the package that is listed when "?" is)s 441.5 m
(    entered.  Any task definitions made since the  current  package  was)s 433.0 m
(    entered will be discarded when the package is exited.)s 424.5 m
(    )s 416.0 m
(    In  addition  to defining a new task, the TASK statement defines the)s 407.5 m
(    type and attributes of the new task.  Three types of  tasks  can  be)s 399.0 m
(    defined:  script \(.cl\), executable \(.e\), and foreign \($...\).  A task)s 390.5 m
(    is assumed to have a parameter file  \("taskname.par",  in  the  same)s 382.0 m
(    directory  as  TFILE\), unless the taskname is explicitly prefixed by)s 373.5 m
(    a $.  A suffix or extension may optionally  be  added  to  the  task)s 365.0 m
(    name  to  indicate  whether the input and output streams are text or)s 356.5 m
(    binary.  The default is text, meaning that if output \(or  input\)  is)s 348.0 m
(    redirected to a file, the file will be opened as a text file.)s 339.5 m
(    )s 331.0 m
(    The  FOREIGN  TASK  facility  allows  host  system tasks, e.g., host)s 322.5 m
(    utilities or user written Fortran or C programs, to be  called  from)s 314.0 m
(    the  CL  as  if they were regular IRAF tasks.  The command line of a)s 305.5 m
(    foreign task is parsed like that of any other task  \(and  unlike  an)s 297.0 m
(    OS  escape\),  allowing  expression  evaluation, i/o redirection, and)s 288.5 m
(    background job submission.  The difference between  a  regular  IRAF)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(REDEFINE \(Apr87\)                language                REDEFINE \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    task  and a foreign task is that the foreign tasks have little or no)s 713.5 m
(    access to  IRAF  facilities,  are  usually  machine  dependent  \(and)s 705.0 m
(    programs  which  use  them  are  machine  dependent\),  and cannot be)s 696.5 m
(    cached.  Nonetheless the foreign task facility is  very  useful  for)s 688.0 m
(    personalizing  and  extending the IRAF environment with a minimum of)s 679.5 m
(    effort.)s 671.0 m
(    )s 662.5 m
(    The TASK statement includes facilities for  defining  how  the  host)s 654.0 m
(    system  argument list for a foreign task will be built when the task)s 645.5 m
(    is called from the CL.   The  simplest  form  of  the  foreign  task)s 637.0 m
(    statement is the following:)s 628.5 m
(    )s 620.0 m
(            task [$]taskname = "$host_command_prefix")s 611.5 m
(    )s 603.0 m
(    where  HOST_COMMAND_PREFIX  is  the first part of the command string)s 594.5 m
(    to be passed to the host system.  Any  command  line  arguments  are)s 586.0 m
(    simply tacked onto the end of this string, delimited by blanks.)s 577.5 m
(    )s 569.0 m
(    If  this  is  insufficient then argument substitution may be used to)s 560.5 m
(    define how the argument list is  to  be  built  up.   The  macro  $N)s 552.0 m
(    denotes  argument  N  from  the  CL  command  line,  with  the first)s 543.5 m
(    argument being number 1.  The macro $0 is a  special  case,  and  is)s 535.0 m
(    replaced  the name of the task being executed.  Likewise, $* denotes)s 526.5 m
(    all arguments.  If the character following  the  $  is  enclosed  in)s 518.0 m
(    parenthesis,  the  corresponding  argument string will be treated as)s 509.5 m
(    an IRAF virtual filename, with the equivalent host  system  filename)s 501.0 m
(    being  substituted for use in the host command.  Any other character)s 492.5 m
(    sequences  are  passed  on  unchanged.   The  argument  substitution )s 484.0 m
(    macros are summarized in the table below.)s 475.5 m
(    )s 467.0 m
(            $0              task name)s 458.5 m
(            $N              argument N)s 450.0 m
(            $*              all arguments)s 441.5 m
(            $\(...\)          host system filename translation of "...")s 433.0 m
(    )s 424.5 m
(    When a task is invoked, an executable is run by starting an attached)s 416.0 m
(    sub-process, while a script is run by starting a new level of the CL)s 407.5 m
(    with its standard input set to the script file.)s 399.0 m
(    )s 390.5 m
(    An  executable  image may contain any number of executable CL tasks,)s 382.0 m
(    hence it can be pointed to by multiple task  names  or  in  multiple)s 373.5 m
(    TASK statements.  A script file can only contain one script task.)s 365.0 m
(    )s 356.5 m
(    REDEFINE  has  the same syntax as the TASK command, but all the task)s 348.0 m
(    names must already be defined in the current package.  It  is  often)s 339.5 m
(    useful after misspelling the task file name in a task command.)s 331.0 m
(    )s 322.5 m
(    )s 314.0 m
(EXAMPLES)s 305.5 m
(    1.  Call  up  the  editor  to  create a new program \(task\) mytask.x.)s 297.0 m
(    Compile the new program.  Declare it using the  task  statement  and)s 288.5 m
(    then run it.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 57 57
/m{18 exch moveto}bind def
756 m
(REDEFINE \(Apr87\)                language                REDEFINE \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            cl> edit mytask.x                       # edit)s 713.5 m
(            cl> xc mytask.x                         # compile & link)s 705.0 m
(            cl> task $mytask = mytask.e             # define task)s 696.5 m
(            cl> mytask arg1 arg2                    # run it)s 688.0 m
(    )s 679.5 m
(    2.  Define  a  script  task  with  associated parameter file \(if the)s 671.0 m
(    script  is  a  PROCEDURE,  the  parameter  file  is  omitted   since )s 662.5 m
(    procedure scripts always have defined parameters\).)s 654.0 m
(    )s 645.5 m
(            cl> task myscript = myscript.cl)s 637.0 m
(    )s 628.5 m
(    3. Define the four new tasks implot, graph, showcap, and gkiextract.)s 620.0 m
(    All have parameter files except showcap.  The gkiextract task has  a)s 611.5 m
(    binary  output  stream.   All tasks are executable and are stored in)s 603.0 m
(    the executable file "plot$x_plot.e".  Note the use of comma argument)s 594.5 m
(    delimiters  in this example; this is a compute mode example as would)s 586.0 m
(    be found in a package script task.)s 577.5 m
(    )s 569.0 m
(            task    implot,                 # compute mode syntax)s 560.5 m
(                    graph,)s 552.0 m
(                    $showcap,)s 543.5 m
(                    gkiextract.tb   = "plot$x_plot.e")s 535.0 m
(    )s 526.5 m
(    4. Make the listed UNIX programs available in the  IRAF  environment)s 518.0 m
(    as  foreign  tasks.   None  of  the tasks has a parameter file.  The)s 509.5 m
(    "$foreign" declares the tasks as foreign,  and  indicates  that  the)s 501.0 m
(    IRAF task name is the same as the host system task name.)s 492.5 m
(    )s 484.0 m
(            cl> task $ls $od $rlogin = $foreign)s 475.5 m
(    )s 467.0 m
(    5.  Define  a  couple of foreign tasks for VMS, where the command to)s 458.5 m
(    be sent to VMS is not the same as the IRAF task name.)s 450.0 m
(    )s 441.5 m
(            cl> task $run   = $run/nodebug)s 433.0 m
(            cl> task $debug = $run/debug)s 424.5 m
(            cl> task $top   = "$show proc/topcpu")s 416.0 m
(    )s 407.5 m
(    )s 399.0 m
(BUGS)s 390.5 m
(    The distinction between command  and  compute  mode  syntax  can  be)s 382.0 m
(    confusing.   When  defining  tasks  in your login.cl or in a package)s 373.5 m
(    script task, use compute mode, with  commas  between  the  arguments)s 365.0 m
(    and  all  strings  quoted  \(there  are  plenty  of  examples  in the)s 356.5 m
(    system\).  When typing in TASK statements interactively, use  command)s 348.0 m
(    mode.   If  you forget and leave in the commas, they will be assumed)s 339.5 m
(    to be part of the task name, causing  the  following  error  message)s 331.0 m
(    when the task is run:)s 322.5 m
(    )s 314.0 m
(            ERROR: IRAF Main: command syntax error)s 305.5 m
(    )s 297.0 m
(    )s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(REDEFINE \(Apr87\)                language                REDEFINE \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(SEE ALSO)s 713.5 m
(    prcache, flprcache, package)s 705.0 m
()s 696.5 m
()s 688.0 m
()s 679.5 m
()s 671.0 m
()s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -4-)s 254.5 m
()s S
%%Page: 58 58
/m{18 exch moveto}bind def
756 m
(RESET \(Apr87\)                   language                   RESET \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(      set -- set the value of an IRAF environment variable)s 705.0 m
(    reset -- reset \(overwrite\) the value of an IRAF environment variable)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(USAGE)s 671.0 m
(    set [varname = valuestring])s 662.5 m
(    reset [varname = valuestring])s 654.0 m
(    )s 645.5 m
(    )s 637.0 m
(PARAMETERS)s 628.5 m
(    )s 620.0 m
(    varname)s 611.5 m
(        The environment variable to be defined or set.)s 603.0 m
(    )s 594.5 m
(    valuestring)s 586.0 m
(        The new string value of the environment variable.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(DESCRIPTION)s 552.0 m
(    The  CL  maintains  a  list  of environment variables, each of which)s 543.5 m
(    consists of a keyword = value pair.  The  SET  and  RESET  operators)s 535.0 m
(    are  used  to define new environment variables, or to set new values)s 526.5 m
(    for old environment variables.  The  two  operators  are  equivalent)s 518.0 m
(    with  the  exception  that  if  the  named  environment  variable is)s 509.5 m
(    already defined, SET will  push  a  new,  temporary  value  for  the)s 501.0 m
(    variable,  whereas  RESET  will overwrite the most recent definition)s 492.5 m
(    of the variable.  Environment variables may be  examined  using  the)s 484.0 m
(    SHOW task or the ENVGET intrinsic function.)s 475.5 m
(    )s 467.0 m
(    A  particular use for the environment variables is in the definition)s 458.5 m
(    of IRAF logical names for directories.  If an  environment  variable)s 450.0 m
(    is  set  to  a  string corresponding to a system-dependent directory)s 441.5 m
(    name, then the enviroment variable may then be used within the CL to)s 433.0 m
(    refer to that directory.)s 424.5 m
(    )s 416.0 m
(    For example,)s 407.5 m
(    )s 399.0 m
(            set     testdir = "/usr/iraf/testdir"           # Unix)s 390.5 m
(            set     testdir = "dua2:[iraf.testdir]"         # VMS)s 382.0 m
(            task    tst1 = testdir$tst1.cl)s 373.5 m
(    )s 365.0 m
(    New  IRAF  logicals may be defined in terms or existing IRAF logical)s 356.5 m
(    names, i.e., logical names are recursively expanded.)s 348.0 m
(    )s 339.5 m
(            set     subdir1 = testdir$subdir1/)s 331.0 m
(            task    tst2 = subdir1$tst2.e)s 322.5 m
(    )s 314.0 m
(    If the SET command is entered  without  any  arguments  the  current)s 305.5 m
(    environment list is printed in the reverse of the order in which the)s 297.0 m
(    definitions were made.  If a variable has been  redefined  both  the)s 288.5 m
(    final  and  original definition are shown.   The SHOW command can be)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(RESET \(Apr87\)                   language                   RESET \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    used to show only the current value.)s 713.5 m
(    )s 705.0 m
(    )s 696.5 m
(EXAMPLES)s 688.0 m
(    1. Define the data directory "dd" on a remote node, and call  IMPLOT)s 679.5 m
(    to make plots of an image which resides in the remote directory.)s 671.0 m
(    )s 662.5 m
(            cl> set dd = lyra!/u2/me/data)s 654.0 m
(            cl> implot dd$picture)s 645.5 m
(    )s 637.0 m
(    2.  Temporarily  change  the value of the variable PRINTER.  The new)s 628.5 m
(    value is discarded when the BYE is entered.)s 620.0 m
(    )s 611.5 m
(            cl> cl)s 603.0 m
(            cl> set printer = qms)s 594.5 m
(                    ...)s 586.0 m
(            cl> bye)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(SEE ALSO)s 552.0 m
(    show, envget)s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 59 59
/m{18 exch moveto}bind def
756 m
(RETURN \(Feb86\)                  language                  RETURN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    return -- exit a procedure)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    return [value])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    value)s 628.5 m
(        An optional value returned to the invoking procedure.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    The RETURN statement terminates a script and  optionally  returns  a)s 586.0 m
(    value  to the invoking routine.  Any number of RETURN statements may)s 577.5 m
(    be present in a script.  A  RETURN  statement  without  a  value  is)s 569.0 m
(    equivalent to a BYE.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(EXAMPLES)s 535.0 m
(    return)s 526.5 m
(    return \(j+3\))s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(BUGS)s 492.5 m
(    The  return  value  cannot  currently  be  utilized  by the invoking)s 484.0 m
(    procedure.)s 475.5 m
(    )s 467.0 m
(    )s 458.5 m
(SEE ALSO)s 450.0 m
(    bye)s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(SCAN \(Feb86\)                    language                    SCAN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    scan  -- read parameters from standard input)s 705.0 m
(    fscan -- read parameters from file, or another parameter)s 696.5 m
(    nscan -- get number of parameters scanned)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(USAGE)s 662.5 m
(    scan  \(p1, p2, p3 ... pn\))s 654.0 m
(    fscan \(param, p1, p2, p3, ... pn\))s 645.5 m
(    )s 637.0 m
(    n = nscan\(\))s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(PARAMETERS)s 603.0 m
(    )s 594.5 m
(    pN  The name of an output parameter, to receive a scanned value.)s 586.0 m
(    )s 577.5 m
(    param)s 569.0 m
(        The name of the input parameter whose VALUE is to be scanned  to)s 560.5 m
(        produce the output values.)s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(DESCRIPTION)s 526.5 m
(    SCAN  and  FSCAN permit the user to read in values from the standard)s 518.0 m
(    input, a file,  or  a  parameter  and  assign  them  to  the  listed)s 509.5 m
(    parameters.   FSCAN  may  also  be  used to read a string already in)s 501.0 m
(    core.  It is useful to consider these functions  as  performing  two)s 492.5 m
(    disjoint  actions:  acquiring a string, where SCAN and FSCAN differ;)s 484.0 m
(    and parsing the string, where they are identical.)s 475.5 m
(    )s 467.0 m
(    SCAN acquires its string  by  reading  exactly  one  line  from  the)s 458.5 m
(    standard  input.  The action of FSCAN depends on PARAM.  If PARAM is)s 450.0 m
(    a string, or a struct, then the string is simply the value of PARAM.)s 441.5 m
(    If,  however,  PARAM is a list-directed struct, a call to FSCAN will)s 433.0 m
(    get the next line from the file pointed to by PARAM.  The  file  can)s 424.5 m
(    be  rewound  by  assigning  a file name to PARAM.  If either scan or)s 416.0 m
(    fscan reach an EOF, they return  with  the  value  EOF  and  do  not)s 407.5 m
(    change any parameters.)s 399.0 m
(    )s 390.5 m
(    Once  the  string  has  been  acquired  it  is  parsed into segments)s 382.0 m
(    delimited by spaces or  tabs.   Scan  and  fscan  do  not  recognize)s 373.5 m
(    quoted  strings, nor do they view ',' as a delimiter.  Each token is)s 365.0 m
(    then assigned in turn to p1 through  pn.   If  there  are  too  many)s 356.5 m
(    tokens  they  are discarded, if there are too few, the corresponding)s 348.0 m
(    parameters are not affected  by  the  call.   Any  conversion  error)s 339.5 m
(    terminates  the  scan,  but  parameters already scanned retain their)s 331.0 m
(    new values.  An assignment to a struct terminates the  scan  because)s 322.5 m
(    the  entire  unscanned  portion  of  the  string  is assigned to the)s 314.0 m
(    struct.  Thus any struct should be the last parameter in a  scan  or)s 305.5 m
(    fscan call.)s 297.0 m
(    )s 288.5 m
(    Scan  and  fscan are intrinsic functions returning either EOF if end)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 60 60
/m{18 exch moveto}bind def
756 m
(SCAN \(Feb86\)                    language                    SCAN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    of file on the input list is sensed, or  the  number  of  parameters)s 713.5 m
(    successfully  scanned.   The  function NSCAN also returns the number)s 705.0 m
(    of parameters successfully scanned in  the  last  call  to  scan  or)s 696.5 m
(    fscan.)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(EXAMPLES)s 662.5 m
(    1. Print a list of radii, given a list of coordinates.)s 654.0 m
(    )s 645.5 m
(            list = coords)s 637.0 m
(            while \(fscan \(list, x, y\) != EOF\))s 628.5 m
(                print \(sqrt \(x**2 + y**2\)\))s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(BUGS)s 594.5 m
(    The  syntax of scan and fscan is peculiar, in that they are the only)s 586.0 m
(    functions where  parameters  are  effectively  passed  by  reference)s 577.5 m
(    rather  than  by  value.  Thus p1, ... pn must be parameters whereas)s 569.0 m
(    in similar contexts an arbitrary expression can be used  wherever  a)s 560.5 m
(    parameter can.)s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(SEE ALSO)s 526.5 m
(    string)s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(SERVICE \(Feb86\)                 language                 SERVICE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    service -- respond to a parameter request from a bkg job)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    service [job])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    job A background job number \(defaults to 1\).)s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(DESCRIPTION)s 603.0 m
(    When  a  background job requires input from the terminal \(e.g. if it)s 594.5 m
(    queries for a parameter\), the job enters  a  stopped  state,  and  a)s 586.0 m
(    message  is  displayed  on the terminal.  At the user's convenience,)s 577.5 m
(    he should respond with a SERVICE command specifying the  appropriate)s 569.0 m
(    job  number.   The  JOBS  command  can also be used to see what jobs)s 560.5 m
(    require attention.)s 552.0 m
(    )s 543.5 m
(    After  entering  the  SERVICE  command,  any  prompt  sent  by   the )s 535.0 m
(    background  job  is displayed, and the user may return a single line)s 526.5 m
(    of input to the  background  task.   Should  more  lines  be  needed)s 518.0 m
(    several  SERVICE  calls may be necessary.  The user may service jobs)s 509.5 m
(    in any order, regardless of how the  requests  from  the  background)s 501.0 m
(    jobs were received.)s 492.5 m
(    )s 484.0 m
(    )s 475.5 m
(EXAMPLE)s 467.0 m
(    1. Respond to a parameter request from job 3.)s 458.5 m
(    )s 450.0 m
(            cl> service 3)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(BUGS)s 416.0 m
(    If  one  never  responds  to a request for service from a background)s 407.5 m
(    job, the job will eventually time out and abort.   In  principle  it)s 399.0 m
(    is   possible   to   service  queued  background  jobs  as  well  as )s 390.5 m
(    interactive  \(subprocess\)  background  jobs,  but  in  practice  the )s 382.0 m
(    request  for service never reaches the terminal \(and thus the user\),)s 373.5 m
(    hence all parameters should be specified before submitting a job  to)s 365.0 m
(    execute in a queue.)s 356.5 m
(    )s 348.0 m
(    )s 339.5 m
(SEE ALSO)s 331.0 m
(    jobs, kill)s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 61 61
/m{18 exch moveto}bind def
756 m
(SET \(Apr87\)                     language                     SET \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(      set -- set the value of an IRAF environment variable)s 705.0 m
(    reset -- reset \(overwrite\) the value of an IRAF environment variable)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(USAGE)s 671.0 m
(    set [varname = valuestring])s 662.5 m
(    reset [varname = valuestring])s 654.0 m
(    )s 645.5 m
(    )s 637.0 m
(PARAMETERS)s 628.5 m
(    )s 620.0 m
(    varname)s 611.5 m
(        The environment variable to be defined or set.)s 603.0 m
(    )s 594.5 m
(    valuestring)s 586.0 m
(        The new string value of the environment variable.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(DESCRIPTION)s 552.0 m
(    The  CL  maintains  a  list  of environment variables, each of which)s 543.5 m
(    consists of a keyword = value pair.  The  SET  and  RESET  operators)s 535.0 m
(    are  used  to define new environment variables, or to set new values)s 526.5 m
(    for old environment variables.  The  two  operators  are  equivalent)s 518.0 m
(    with  the  exception  that  if  the  named  environment  variable is)s 509.5 m
(    already defined, SET will  push  a  new,  temporary  value  for  the)s 501.0 m
(    variable,  whereas  RESET  will overwrite the most recent definition)s 492.5 m
(    of the variable.  Environment variables may be  examined  using  the)s 484.0 m
(    SHOW task or the ENVGET intrinsic function.)s 475.5 m
(    )s 467.0 m
(    A  particular use for the environment variables is in the definition)s 458.5 m
(    of IRAF logical names for directories.  If an  environment  variable)s 450.0 m
(    is  set  to  a  string corresponding to a system-dependent directory)s 441.5 m
(    name, then the enviroment variable may then be used within the CL to)s 433.0 m
(    refer to that directory.)s 424.5 m
(    )s 416.0 m
(    For example,)s 407.5 m
(    )s 399.0 m
(            set     testdir = "/usr/iraf/testdir"           # Unix)s 390.5 m
(            set     testdir = "dua2:[iraf.testdir]"         # VMS)s 382.0 m
(            task    tst1 = testdir$tst1.cl)s 373.5 m
(    )s 365.0 m
(    New  IRAF  logicals may be defined in terms or existing IRAF logical)s 356.5 m
(    names, i.e., logical names are recursively expanded.)s 348.0 m
(    )s 339.5 m
(            set     subdir1 = testdir$subdir1/)s 331.0 m
(            task    tst2 = subdir1$tst2.e)s 322.5 m
(    )s 314.0 m
(    If the SET command is entered  without  any  arguments  the  current)s 305.5 m
(    environment list is printed in the reverse of the order in which the)s 297.0 m
(    definitions were made.  If a variable has been  redefined  both  the)s 288.5 m
(    final  and  original definition are shown.   The SHOW command can be)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(SET \(Apr87\)                     language                     SET \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    used to show only the current value.)s 713.5 m
(    )s 705.0 m
(    )s 696.5 m
(EXAMPLES)s 688.0 m
(    1. Define the data directory "dd" on a remote node, and call  IMPLOT)s 679.5 m
(    to make plots of an image which resides in the remote directory.)s 671.0 m
(    )s 662.5 m
(            cl> set dd = lyra!/u2/me/data)s 654.0 m
(            cl> implot dd$picture)s 645.5 m
(    )s 637.0 m
(    2.  Temporarily  change  the value of the variable PRINTER.  The new)s 628.5 m
(    value is discarded when the BYE is entered.)s 620.0 m
(    )s 611.5 m
(            cl> cl)s 603.0 m
(            cl> set printer = qms)s 594.5 m
(                    ...)s 586.0 m
(            cl> bye)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(SEE ALSO)s 552.0 m
(    show, envget)s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 62 62
/m{18 exch moveto}bind def
756 m
(SHOW \(Feb86\)                    language                    SHOW \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    show -- show the current value of an IRAF environment variable)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    show [varname])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    varname)s 628.5 m
(        The name of the environment variable to be displayed.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    The SHOW command shows the current values of all defined environment)s 586.0 m
(    variables  if  called  with no arguments, or the value of a specific)s 577.5 m
(    variable if an argument is given.  Unlike SET, only  current  values)s 569.0 m
(    are  shown, not the entire history of the definitions of environment)s 560.5 m
(    variables.)s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(EXAMPLES)s 526.5 m
(    1. Show the current default printer device.)s 518.0 m
(    )s 509.5 m
(            cl> show printer)s 501.0 m
(    )s 492.5 m
(    2. Show all "std" \(standard i/o stream\) related variables.)s 484.0 m
(    )s 475.5 m
(            cl> show | match std)s 467.0 m
(    )s 458.5 m
(    )s 450.0 m
(SEE ALSO)s 441.5 m
(    set)s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(SLEEP \(Feb86\)                   language                   SLEEP \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    sleep -- suspend process execution for the specified interval)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    sleep [nsec])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    nsec)s 628.5 m
(        The number of seconds to sleep.  Defaults to 0.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    The SLEEP command causes the task to  hibernate  for  the  specified)s 586.0 m
(    amount of time.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(EXAMPLES)s 552.0 m
(    1. Sleep for 10 seconds, and then ring the bell.)s 543.5 m
(    )s 535.0 m
(            cl> sleep 10; beep)s 526.5 m
(    )s 518.0 m
(    )s 509.5 m
(SEE ALSO)s 501.0 m
(    wait)s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 63 63
/m{18 exch moveto}bind def
756 m
(STRINGS \(Jun86\)                 language                 STRINGS \(Jun86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    strings -- string manipulation functions available in the CL)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    str    \(x\))s 671.0 m
(    substr \(str, start, end\))s 662.5 m
(    stridx \(test, str\))s 654.0 m
(    strlen \(str\))s 645.5 m
(    )s 637.0 m
(    )s 628.5 m
(DESCRIPTION)s 620.0 m
(    The  following  functions  are  available  for  the  manipulation of)s 611.5 m
(    strings within the CL.)s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(    str \(x\))s 577.5 m
(        Converts its argument  into  a  string.   The  argument  may  be)s 569.0 m
(        boolean, integer or real.)s 560.5 m
(    )s 552.0 m
(    substr \(str, first, last\))s 543.5 m
(        Extracts  a  substring  from string STR.  The first character in)s 535.0 m
(        the string is at index 1.)s 526.5 m
(    )s 518.0 m
(    stridx \(test, str\))s 509.5 m
(        Finds the position of  the  first  occurence  of  any  character)s 501.0 m
(        found in TEST in the string STR, returning 0 if the match fails.)s 492.5 m
(    )s 484.0 m
(    strlen \(str\))s 475.5 m
(        Returns  the  current length of a string.  Note that the maximum)s 467.0 m
(        length  may  be  obtained  as  the  value  of   the   expression )s 458.5 m
(        `param.p_length'.)s 450.0 m
(    )s 441.5 m
(    )s 433.0 m
(EXAMPLES)s 424.5 m
(    1. Simple function calls.)s 416.0 m
(    )s 407.5 m
(            s = str\(y\)                      # convert y to a string.)s 399.0 m
(            s = substr \("abcdefg", 2, 4\)    # s = "bcd")s 390.5 m
(            i = stridx \("abc", " eeboq"\)    # i = 4)s 382.0 m
(            i = strlen \("abc"\)              # i = 3)s 373.5 m
(    )s 365.0 m
(    )s 356.5 m
(SEE ALSO)s 348.0 m
(    scan, radix)s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    stty -- set/show terminal characteristics)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    stty [terminal])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    terminal)s 628.5 m
(        The  logical  name of the terminal to be used, i.e., the name of)s 620.0 m
(        the device given in the DEV$TERMCAP file.)s 611.5 m
(    )s 603.0 m
(    baud = 9600)s 594.5 m
(        Set to some nonzero value to inform the VOS of  the  baud  rate;)s 586.0 m
(        the  software  does  not automatically sense the baud rate.  The)s 577.5 m
(        baud rate must be known to accurately generate delays.)s 569.0 m
(    )s 560.5 m
(    ncols = 80)s 552.0 m
(        The logical width of the screen in characters;  may  be  set  to)s 543.5 m
(        some  value  less  than  the  physical  width  to  produce  more )s 535.0 m
(        readable output on very high resolution terminals.)s 526.5 m
(    )s 518.0 m
(    nlines = 24)s 509.5 m
(        The logical height of the screen in characters.)s 501.0 m
(    )s 492.5 m
(    show = no)s 484.0 m
(        Show the current terminal driver settings.  The SHOW function is)s 475.5 m
(        automatically enabled if STTY is called with no arguments.)s 467.0 m
(    )s 458.5 m
(    all = no)s 450.0 m
(        Show  all  terminal  driver  settings, including those which are)s 441.5 m
(        not currently in use.  Setting ALL automatically sets SHOW.)s 433.0 m
(    )s 424.5 m
(    reset = no)s 416.0 m
(        Reset the terminal  driver  settings  to  their  default  \(login)s 407.5 m
(        time\)  values.   Note  that the terminal driver is not a task in)s 399.0 m
(        the normal sense but is always active, and once a  parameter  is)s 390.5 m
(        set the new value is retained indefinitely.)s 382.0 m
(    )s 373.5 m
(    resize = no)s 365.0 m
(        Recompute  the  terminal  screen  size  parameters, TTYNCOLS and)s 356.5 m
(        TTYNLINES, and update their values in the environment.   If  the)s 348.0 m
(        terminal supports runtime querying of the screen size it will be)s 339.5 m
(        queried \(allowing the  screen  size  to  change  dynamically  at)s 331.0 m
(        runtime\),  otherwise  the  values from the termcap entry for the)s 322.5 m
(        terminal will be used.)s 314.0 m
(    )s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 64 64
/m{18 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    clear = no)s 713.5 m
(        Clear the function\(s\) which follow on the  command  line,  e.g.,)s 705.0 m
(        "clear   ucasein   ucaseout"   is   equivalent   to  "ucasein=no )s 696.5 m
(        ucaseout=no".)s 688.0 m
(    )s 679.5 m
(    ucasein = no)s 671.0 m
(        Map terminal input to lower case, e.g., when working on  an  old)s 662.5 m
(        monocase  terminal,  or  on a modern terminal with the shiftlock)s 654.0 m
(        key on.)s 645.5 m
(    )s 637.0 m
(    ucaseout = no)s 628.5 m
(        Map terminal output to upper case.)s 620.0 m
(    )s 611.5 m
(    login = "home$ttyin.log" [off])s 603.0 m
(        Log all input from the terminal to the named text file.)s 594.5 m
(    )s 586.0 m
(    logio = "home$ttyio.log" [off])s 577.5 m
(        Log all terminal i/o to the named text file.  May  not  be  used)s 569.0 m
(        if either LOGIN or LOGOUT mode is in effect, and vice versa.)s 560.5 m
(    )s 552.0 m
(    logout = "home$ttyout.log" [off])s 543.5 m
(        Log all output to the terminal to the named text file.)s 535.0 m
(    )s 526.5 m
(    playback = "home$ttyin.log" [off])s 518.0 m
(        Divert  terminal  driver  input  to the named "stty login" style)s 509.5 m
(        text file, i.e., take input from a  file  instead  of  from  the)s 501.0 m
(        terminal.   The  effect is to exactly repeat a previous terminal)s 492.5 m
(        session executed with LOGIN mode in effect,  e.g.,  to  test  or)s 484.0 m
(        demo software.)s 475.5 m
(    )s 467.0 m
(    verify = no)s 458.5 m
(        If  VERIFY  is  enabled during PLAYBACK mode the terminal driver)s 450.0 m
(        will read a key from the keyboard before executing each  command)s 441.5 m
(        in  the logfile.  Tap the space bar to execute the command, Q to)s 433.0 m
(        terminate playback mode, or G to continue execution with  VERIFY)s 424.5 m
(        mode  disabled.   Typing  any other key causes a help line to be)s 416.0 m
(        printed.)s 407.5 m
(    )s 399.0 m
(    delay = 500 \(msec\))s 390.5 m
(        If VERIFY is disabled during PLAYBACK mode the  terminal  driver)s 382.0 m
(        will  pause for DELAY milliseconds before executing each logfile)s 373.5 m
(        command.)s 365.0 m
(    )s 356.5 m
(    )s 348.0 m
(    )s 339.5 m
(DESCRIPTION)s 331.0 m
(    The STTY task  is  used  to  set  or  display  the  terminal  device)s 322.5 m
(    characteristics   and   VOS   terminal   driver   options.   Without )s 314.0 m
(    arguments,  STTY  prints  the   current   characteristics   of   the )s 305.5 m
(    terminal.   The  default  terminal  type  can  be changed by setting)s 297.0 m
(    TTYNAME.  The terminal characteristics NCOLS, NLINES  or  BAUD,  may)s 288.5 m
(    be changed by typing new values explicitly on the command line.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    The  most  common  use  of  STTY  is  to  inform IRAF of the type of)s 713.5 m
(    terminal being used, e.g.,)s 705.0 m
(    )s 696.5 m
(            cl> stty vt100)s 688.0 m
(    )s 679.5 m
(    would set the terminal type to "vt100".  An error  message  will  be)s 671.0 m
(    printed  unless  an  entry  for the named terminal is present in the)s 662.5 m
(    TERMCAP file; if the named terminal is a  graphics  terminal,  there)s 654.0 m
(    must also be an entry in the GRAPHCAP file.)s 645.5 m
(    )s 637.0 m
(    To find out about the current terminal settings, type)s 628.5 m
(    )s 620.0 m
(            cl> stty)s 611.5 m
(    or)s 603.0 m
(            cl> stty all)s 594.5 m
(    )s 586.0 m
(    A  limited  number  of  terminal driver options may also be set.  In)s 577.5 m
(    particular, the VOS terminal driver \(not to  be  confused  with  the)s 569.0 m
(    host  operating  system  terminal  driver,  a  lower level facility\))s 560.5 m
(    implements facilities for case conversion upon input or output,  and)s 552.0 m
(    for  logging  all  i/o  to  the terminal and playing back a terminal)s 543.5 m
(    session logged in a file.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(CASE CONVERSIONS)s 509.5 m
(    The UCASEIN option, if set,  will  cause  all  upper  case  terminal)s 501.0 m
(    input  to  be  mapped  to lower case \(e.g., when working from an old)s 492.5 m
(    monocase terminal\).  In this mode, individual upper case  characters)s 484.0 m
(    may  be  input  by preceding them with the escape character ^, e.g.,)s 475.5 m
(    "^MAKEFILE" equates to "Makefile".  The full set  of  ^  escapes  is)s 467.0 m
(    summarized  below.   The  option  UCASEOUT  will  cause all terminal)s 458.5 m
(    output to be mapped to upper case.   Preceding  either  or  both  of)s 450.0 m
(    these option keywords by CLEAR causes the options to be cleared.)s 441.5 m
(    )s 433.0 m
(            ^       shift next character to upper case)s 424.5 m
(            ^+      shift lock \(caps lock\))s 416.0 m
(            ^-      clear shift lock)s 407.5 m
(            ^^      the character ^)s 399.0 m
(    )s 390.5 m
(    Case  shifting  is disabled in raw mode, e.g., while in cursor mode,)s 382.0 m
(    and in EPARAM.  All standard  IRAF  software,  however,  will  sense)s 373.5 m
(    that  ucase mode is set before entering raw mode, and will behave as)s 365.0 m
(    expected.  Ucase mode  is  also  disabled  by  the  STDGRAPH  kernel)s 356.5 m
(    whenever the graphics workstation is activated.)s 348.0 m
(    )s 339.5 m
(    Note  that  ^  is  also  the history metacharacter, hence ^^ must be)s 331.0 m
(    used when in UCASEIN mode to pass a  single  ^  to  the  CL  history)s 322.5 m
(    mechanism.   In  cursor  mode, upper case keystrokes are intercepted)s 314.0 m
(    by cursor mode unless escaped with a backslash.  Escaped  keystrokes)s 305.5 m
(    are  mapped  to  lower  case  by  cursor  mode if UCASEIN mode is in)s 297.0 m
(    effect, terminating cursor mode and returning  a  lowercase  key  to)s 288.5 m
(    the applications program.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s S
%%Page: 65 65
/m{18 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(RECORDING TERMINAL I/O)s 713.5 m
(    The  terminal driver options LOGIO, LOGOUT, and LOGIN may be used to)s 705.0 m
(    log, respectively, all terminal i/o, all output to the terminal,  or)s 696.5 m
(    all    input   from   the   terminal.    The   logfile   names   are  )s 688.0 m
(    "home$ttyin.log", "home$ttyout.log", or "home$ttyio.log",  unless  a)s 679.5 m
(    different  logfile  name is specified by the user.  All logfiles are)s 671.0 m
(    standard textfiles containing only printable characters.)s 662.5 m
(    )s 654.0 m
(    Terminal i/o logging is especially useful for debugging TERMCAP  and)s 645.5 m
(    GRAPHCAP  entries  for  new  terminals.   All  IRAF  terminal i/o is)s 637.0 m
(    logged, including raw mode i/o and graphics  output.   Terminal  i/o)s 628.5 m
(    from  foreign  tasks  or  OS escapes is not logged since these tasks)s 620.0 m
(    bypass the VOS to talk directly to the user terminal.)s 611.5 m
(    )s 603.0 m
(    Each sequence of characters read from or  written  to  the  terminal)s 594.5 m
(    \(via  a  zgettt or zputtt call to the driver\) appears as one logical)s 586.0 m
(    line of text in the logfile, delimited  by  the  data  character  \\n)s 577.5 m
(    \(newline\).   When  reading  from  a terminal in raw mode, each input)s 569.0 m
(    character will appear on a separate line  in  the  logfile  with  no)s 560.5 m
(    newline,  since  only  a  single  data  character  is read at a time)s 552.0 m
(    during raw mode input.   All  control  characters  embedded  in  the)s 543.5 m
(    data,  including  newline  terminators,  are rendered into printable)s 535.0 m
(    form.  Long lines are  broken  near  the  right  margin,  adding  an)s 526.5 m
(    escaped newline and indenting continuation lines 4 spaces.)s 518.0 m
(    )s 509.5 m
(    Terminal  i/o  logging is intended primarily for debugging purposes,)s 501.0 m
(    rather than for logging user commands;  the  IRAF  command  language)s 492.5 m
(    provides  a more user friendly facility for command logging \(see the)s 484.0 m
(    LANGUAGE.LOGGING manpage for further information on the  CL  command)s 475.5 m
(    logging  facilities\).   All  unprintable ASCII codes are rendered in)s 467.0 m
(    the logfile in a printable form intended to eliminate any  ambiguity)s 458.5 m
(    regarding  the exact sequence of characters sent to or received from)s 450.0 m
(    the terminal.  In addition to the standard escape sequences \\n,  \\t,)s 441.5 m
(    \\r, etc., the following special escape sequences are used:)s 433.0 m
(    )s 424.5 m
(            \\\\              \\)s 416.0 m
(            \\^              ^)s 407.5 m
(            ^@              NUL \(ascii 000\))s 399.0 m
(            ^[A-Z]          ctrl/a - ctrl/z \(ascii 001 - 032\))s 390.5 m
(            ^[              ESC \(ascii 033\))s 382.0 m
(            ^\\              FS  \(ascii 034\))s 373.5 m
(            ^]              GS  \(ascii 035\))s 365.0 m
(            ^^              RS  \(ascii 036\))s 356.5 m
(            ^_              US  \(ascii 037\))s 348.0 m
(            \\s              blank \(ascii 040\))s 339.5 m
(            \\<newline>      long i/o record continued on next line)s 331.0 m
(    )s 322.5 m
(    These  special  escape  sequences,  plus  any  ordinary  characters, )s 314.0 m
(    constitute  the  DATA  recorded  in  the  logfile.   The   following )s 305.5 m
(    additional  escape  sequences  are  used to record information about)s 297.0 m
(    the logging session itself in the logfile.)s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -4-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            \\#              rest of line is a comment)s 713.5 m
(            \\T              terminal device name at log time)s 705.0 m
(            \\G              stdgraph device name at log time)s 696.5 m
(            \\O              timestamp written at start of log session)s 688.0 m
(    )s 679.5 m
(    Any whitespace \(unescaped blanks, tabs, or  newlines\)  appearing  in)s 671.0 m
(    the  logfile  is  put there only to make the file more readable, and)s 662.5 m
(    is not considered data.   Blocks  of  text  may  be  enclosed  in  a)s 654.0 m
(    logfile  delimited  by  escaped  curly  brackets, i.e., "\\{ ... \\}".)s 645.5 m
(    This is used  for  the  PLAYBACK  facility  described  in  the  next)s 637.0 m
(    section.)s 628.5 m
(    )s 620.0 m
(    )s 611.5 m
(PLAYBACK OF TERMINAL SESSIONS)s 603.0 m
(    The  terminal  driver  has  the  capability  not  only  of recording)s 594.5 m
(    terminal i/o in a file, but  of  taking  input  from  a  logfile  to)s 586.0 m
(    repeat  a  sequence  of commands previously entered by the user with)s 577.5 m
(    terminal input logging enabled.  Note that we are not talking  about)s 569.0 m
(    simply  playing  back  recorded output, but of actually executing an)s 560.5 m
(    arbitrary sequence of commands formerly entered by the  user.   This)s 552.0 m
(    is  different  from  executing  a sequence of commands entered into,)s 543.5 m
(    for example, a CL script, because ALL input is  recorded,  including)s 535.0 m
(    not  only the commands, but also all responses to parameter queries,)s 526.5 m
(    all rawmode keystroke input, and all graphics cursor input  occuring)s 518.0 m
(    interactively  during  execution  of  the  recorded commands.  These)s 509.5 m
(    PLAYBACK  SCRIPTS  are  useful  for  preparing  automated  demos  or )s 501.0 m
(    tutorials  of complex software, and for preparing scripts to be used)s 492.5 m
(    to automatically test software.)s 484.0 m
(    )s 475.5 m
(    The basic sequence used to record  and  later  playback  a  terminal)s 467.0 m
(    session is as follows:)s 458.5 m
(    )s 450.0 m
(            cl> stty login [= logfilename])s 441.5 m
(                    <execute an arbitrary sequence of commands>)s 433.0 m
(            cl> stty clear login                    # or stty reset)s 424.5 m
(            cl> stty playback [= logfilename])s 416.0 m
(    )s 407.5 m
(    Naturally,  the playback script must be executed in the same context)s 399.0 m
(    as when the script was generated, i.e., one  must  ensure  that  all)s 390.5 m
(    necessary  packages have been loaded, that the current directory has)s 382.0 m
(    been set to the proper value if it matters, and so on.   It  is  not)s 373.5 m
(    necessary  to  execute  a  playback script on the same type of video)s 365.0 m
(    terminal or graphics terminal  as  was  used  when  the  script  was)s 356.5 m
(    recorded;  since only the terminal input is being recorded, playback)s 348.0 m
(    scripts are device  independent  and  may  be  played  back  on  any)s 339.5 m
(    terminal.)s 331.0 m
(    )s 322.5 m
(    If  desired the commands necessary to establish the starting context)s 314.0 m
(    may be recorded as part of the script.  If the script  is  going  to)s 305.5 m
(    be  repeatedly executed it may also be desirable to include commands)s 297.0 m
(    at the end of the recording session to clean up, e.g., deleting  any)s 288.5 m
(    temporary  files  created during the recording session.  If anything)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -5-)s 254.5 m
()s S
%%Page: 66 66
/m{18 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    has changed which causes a command to abort during  execution  of  a)s 713.5 m
(    playback  script,  normal  terminal input is automatically restored,)s 705.0 m
(    aborting the script.   Note that  if  the  "stty  playback"  command)s 696.5 m
(    gets  into  the  playback  script for some reason, e.g., because the)s 688.0 m
(    "stty reset" \(or "stty login=no" etc.\) was omitted, then the  script)s 679.5 m
(    will repeat indefinitely.  This may or may not be what was desired.)s 671.0 m
(    )s 662.5 m
(    Two  STTY  command  line  arguments are provided for controlling the)s 654.0 m
(    execution of a playback  script.   By  default,  when  a  script  is)s 645.5 m
(    played  back  the  terminal driver will pause for DELAY milliseconds)s 637.0 m
(    after echoing the command to be executed, to give the user  watching)s 628.5 m
(    the  playback  a  chance  to  read  the  command.   Aside  from this)s 620.0 m
(    programmed delay, execution is fully automated.  For example,)s 611.5 m
(    )s 603.0 m
(            cl> stty play=filename delay=2000)s 594.5 m
(    )s 586.0 m
(    would playback the file  "filename",  with  a  delay  of  2  seconds)s 577.5 m
(    following echo of each line of recorded input text.)s 569.0 m
(    )s 560.5 m
(    Alternatively,  the  user may request that the driver pause and wait)s 552.0 m
(    for the user to type a key  before  executing  each  logged  command)s 543.5 m
(    \(i.e.,   before   returning   each   input   line  of  text  to  the )s 535.0 m
(    application\).  This is called the VERIFY option.   In  verify  mode,)s 526.5 m
(    the following keystrokes may be entered to continue execution:)s 518.0 m
(    )s 509.5 m
(            space, return           continue execution)s 501.0 m
(            'g'                     go: turn verify mode off and continue)s 492.5 m
(            'q'                     quit: terminate playback mode)s 484.0 m
(    )s 475.5 m
(    Verify  mode  is  automatically disabled during raw mode input since)s 467.0 m
(    the input consists of single characters and an inordinate number  of)s 458.5 m
(    verification  keystrokes would be required from the user.  Either of)s 450.0 m
(    the VERIFY or DELAY options may be overridden by control  directives)s 441.5 m
(    embedded in the playback text, as we shall see in the next section.)s 433.0 m
(    )s 424.5 m
(    )s 416.0 m
(CUSTOMIZING PLAYBACK SCRIPTS)s 407.5 m
(    Although  playback scripts may be and often are generated and played)s 399.0 m
(    back without ever  looking  at  or  modifying  the  actual  playback)s 390.5 m
(    script,  there  are  cases  where it may be desirable to do so.  For)s 382.0 m
(    example, when generating a script to be used as a demo or  tutorial,)s 373.5 m
(    it  may  be  desirable to insert explanatory text into the script to)s 365.0 m
(    be printed out on the terminal when the script is  played  back,  to)s 356.5 m
(    explain  to  the  person  running  the  script  what  is  going  on. )s 348.0 m
(    Likewise, it may be  desirable  to  control  the  verify  and  delay)s 339.5 m
(    options at a granularity finer than the entire script.)s 331.0 m
(    )s 322.5 m
(    Explanatory  text and/or playback control directives may be inserted)s 314.0 m
(    into the script using the following construct:)s 305.5 m
(    )s 297.0 m
(            "\\{" [<control_directives>] [<text>] "\\}")s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -6-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    where CONTROL_DIRECTIVE refers to one of the following:)s 713.5 m
(    )s 705.0 m
(            %V+             turn verify on)s 696.5 m
(            %V-             turn verify off)s 688.0 m
(            %NNN            set DELAY to NNN milliseconds)s 679.5 m
(    )s 671.0 m
(    For example,)s 662.5 m
(    )s 654.0 m
(            dir\\{%5000)s 645.5 m
(            [list the current directory]\\}\\n)s 637.0 m
(    )s 628.5 m
(    would cause the following to be output, followed after  a  5  second)s 620.0 m
(    delay  by  a  listing  of  the  current  directory  \(the "<>" is not)s 611.5 m
(    printed, but shows where the cursor will  be  during  the  5  second)s 603.0 m
(    pause\):)s 594.5 m
(    )s 586.0 m
(            cl> dir)s 577.5 m
(            [list the current directory]<>)s 569.0 m
(    )s 560.5 m
(    Note  that  the newline following the "\\{%5000" in the above example)s 552.0 m
(    is textual data, and will be  output  to  the  terminal  along  with)s 543.5 m
(    whatever  follows,  up  until  the  closing  brace, i.e., "\\}".  The)s 535.0 m
(    amount of text to be output may be arbitrarily  large;  there  is  a)s 526.5 m
(    builtin  limit  \(currently 4096 characters\), but it is unlikely that)s 518.0 m
(    this limit will ever be exceeded, since no more than one pageful  of)s 509.5 m
(    text should ever be output in a single call.)s 501.0 m
(    )s 492.5 m
(    Normally,  a  %V  or %NNN control directive refers only to the input)s 484.0 m
(    record  with  which  the  enclosing   \\{...\\}   control   block   is )s 475.5 m
(    associated.   The  global  value  of  VERIFY or DELAY is temporarily)s 467.0 m
(    overridden for the current record.  If  desired,  the  global  value)s 458.5 m
(    may instead be permanently modified by adding a ! after the %, e.g.,)s 450.0 m
(    )s 441.5 m
(            \\{%!V-%3000...\\})s 433.0 m
(    )s 424.5 m
(    would  permanently  disable  VERIFY  \(unless a %V+ or %!V+ directive)s 416.0 m
(    follows later in the script\) then output the text "..." followed  by)s 407.5 m
(    a 3 second delay.)s 399.0 m
(    )s 390.5 m
(    To  know where to insert the control directives into a script, it is)s 382.0 m
(    important to  understand  that  input  from  the  script  is  RECORD)s 373.5 m
(    ORIENTED,  and  that  a control directive refers to the input record)s 365.0 m
(    with which it is associated.  An input record is  a  single  LOGICAL)s 356.5 m
(    line  of  text  in the input file.  Note that a logical line of text)s 348.0 m
(    may span multiple physical lines, if the  newlines  are  escaped  or)s 339.5 m
(    present  as  textual  data within a control directive.  The position)s 331.0 m
(    of the control directive within the input  record  determines  where)s 322.5 m
(    the  explanatory text will be positioned relative to the input text,)s 314.0 m
(    when both are echoed to  the  terminal.   Any  programmed  delay  or)s 305.5 m
(    pause  will  always  occur  after  echoing  the  full  record on the)s 297.0 m
(    terminal.)s 288.5 m
(    )s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -7-)s 254.5 m
()s S
%%Page: 67 67
/m{18 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(RAW MODE PLAYBACK)s 713.5 m
(    When a program is executing which reads from  the  terminal  in  raw)s 705.0 m
(    mode,  each  character  is  read  from the terminal as soon as it is)s 696.5 m
(    typed, and input characters are not echoed to  the  terminal  unless)s 688.0 m
(    the  application  explicly  does  the echoing.  Examples of programs)s 679.5 m
(    which use raw mode input are EPARAM and PAGE,  which  are  keystroke)s 671.0 m
(    driven,  and  any  program  which reads the GRAPHICS CURSOR, since a)s 662.5 m
(    graphics cursor read uses raw mode input.)s 654.0 m
(    )s 645.5 m
(    Playback works much the same for raw input mode as  for  line  input)s 637.0 m
(    mode,  except  that during raw mode input the input records normally)s 628.5 m
(    consist of single characters, rather than entire lines of text.   By)s 620.0 m
(    default,  VERIFY  is  turned  off while reading from the terminal in)s 611.5 m
(    raw  mode,  to  avoid  having  the  user  verify   each   individual )s 603.0 m
(    character.   Also,  the terminal driver will not echo text read from)s 594.5 m
(    the playback file in raw mode, since the text would  not  have  been)s 586.0 m
(    echoed if playback were not in effect.)s 577.5 m
(    )s 569.0 m
(    )s 560.5 m
(CURSOR READS IN PLAYBACK MODE)s 552.0 m
(    A  typical  Tektronix style cursor read will look something like the)s 543.5 m
(    following, as recorded in an STTY  LOGIN  script  file  following  a)s 535.0 m
(    recording session:)s 526.5 m
(    )s 518.0 m
(            K)s 509.5 m
(            3)s 501.0 m
(            \))s 492.5 m
(            ')s 484.0 m
(            *)s 475.5 m
(            \\r)s 467.0 m
(    )s 458.5 m
(    This  six character sequence consists of the key value of the cursor)s 450.0 m
(    read \(K\), followed by the [x,y] cursor coordinate  encoded  as  four)s 441.5 m
(    ascii  characters  \("3\)'*"  in this case\), followed by the "GIN mode)s 433.0 m
(    terminator" character or characters, normally a single CR \(\\r\).   Of)s 424.5 m
(    course,  if  the  terminal  is  not  a Tektronix compatible terminal)s 416.0 m
(    \(e.g., DEC-Regis\), the details will differ from this example.)s 407.5 m
(    )s 399.0 m
(    The single character per line format of a cursor read  reflects  the)s 390.5 m
(    fact  that each input record is a single character when reading from)s 382.0 m
(    the terminal in raw mode.  For the purposes  of  playback,  however,)s 373.5 m
(    such  a  sequence may be reformatted on a single line if desired, to)s 365.0 m
(    improve the readibility of a script \(the  extra  whitespace  in  the)s 356.5 m
(    second  example  is  ignored,  since  if  a space were data it would)s 348.0 m
(    appear as \\s\).)s 339.5 m
(    )s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -8-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            K3\)'*\\r)s 713.5 m
(    or)s 705.0 m
(            K 3 \) ' * \\r)s 696.5 m
(    or)s 688.0 m
(            K)s 679.5 m
(            3\)'*)s 671.0 m
(            \\r)s 662.5 m
(    etc.)s 654.0 m
(    )s 645.5 m
(    To set the values of the VERIFY or DELAY  parameters  for  a  cursor)s 637.0 m
(    read  one  may  insert  the  \\{...\\} sequence anywhere before the \\r)s 628.5 m
(    delimiter is returned to the application, e.g.,)s 620.0 m
(    )s 611.5 m
(            K3\)'*\\r\\{%V+\\})s 603.0 m
(    )s 594.5 m
(    would do, since the sequence shown forms one  logical  input  record)s 586.0 m
(    in  the  playback  file,  and the control directive included will be)s 577.5 m
(    processed before any input  data  characters  from  the  record  are)s 569.0 m
(    returned  to  the  application.   If the multi-line form of a cursor)s 560.5 m
(    read is used, the control directive may be tacked onto  any  of  the)s 552.0 m
(    records K through \\r in the example.)s 543.5 m
(    )s 535.0 m
(    Output  of  explanatory text in an interactive graphics session is a)s 526.5 m
(    little more tricky, since if one is not careful the text  will  come)s 518.0 m
(    out  while  in  graphics  mode,  causing it to be rendered as random)s 509.5 m
(    lines drawn all over the screen.  A safe  technique  for  outputting)s 501.0 m
(    comments  during  playback  of  a  graphics session is to output the)s 492.5 m
(    text to the STATUS LINE, taking care of  course  to  output  only  a)s 484.0 m
(    single  line  of  text  at once \(since multiple lines written to the)s 475.5 m
(    status line would rapidly flash  by,  leaving  only  the  last  line)s 467.0 m
(    visible  on  the screen\).  We can do this by taking advantage of the)s 458.5 m
(    :  command  sequence,  which  can  be  used  to  put  the   terminal )s 450.0 m
(    temporarily into status line output mode.)s 441.5 m
(    )s 433.0 m
(            :####\\r)s 424.5 m
(            \\{%5000)s 416.0 m
(            This is a status line comment\\})s 407.5 m
(            ^U\\177)s 399.0 m
(    )s 390.5 m
(    For  example, insertion of the above sequence between any two cursor)s 382.0 m
(    reads in a recorded interactive graphics  session  would  cause  the)s 373.5 m
(    text  "This  is  a  status line comment" to be written to the status)s 365.0 m
(    line, with normal execution  of  the  script  occurring  after  a  5)s 356.5 m
(    second  delay  followed  by erasure of the status line and exit from)s 348.0 m
(    status line mode \(due to the ctrl/u  and  rubout  inserted  as  data)s 339.5 m
(    after the colon cursor read\).)s 331.0 m
(    )s 322.5 m
(    While  executing  an  interactive  graphics  session  via  playback, )s 314.0 m
(    cursor values are read from the playback script instead of from  the)s 305.5 m
(    terminal,  hence the user never sees the actual cursor crosshairs on)s 297.0 m
(    the screen.  To give the user some idea of what  is  going  on,  the)s 288.5 m
(    key  values of successive cursor mode keystrokes are echoed in ascii)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -9-)s 254.5 m
()s S
%%Page: 68 68
/m{18 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    down the left side of the screen, starting at the upper  left.   The)s 713.5 m
(    keystroke  value  is  also  echoed at the position of the cursor, to)s 705.0 m
(    indicate where the cursor crosshairs would have been  in  an  actual)s 696.5 m
(    interactive session.)s 688.0 m
(    )s 679.5 m
(    )s 671.0 m
(SAMPLE PLAYBACK SCRIPT)s 662.5 m
(    We  conclude with an example of a complete playback script which can)s 654.0 m
(    be entered into a file and played back to demonstrate  some  of  the)s 645.5 m
(    features  of  the  IMPLOT task in the PLOT package \(the PLOT package)s 637.0 m
(    must already be loaded\).)s 628.5 m
(    )s 620.0 m
(            \\O=NOAO/IRAF V2.6 iraf@pavo Fri 20:09:21 01-Jan-88)s 611.5 m
(            \\T=gterm40)s 603.0 m
(            \\G=gterm)s 594.5 m
(            \\n)s 586.0 m
(            imheader\\sdev$pix\\slo+\\suser-\\n\\{%3000)s 577.5 m
(            [Print image header]\\})s 569.0 m
(            \\n)s 560.5 m
(            implot\\sdev$pix\\n)s 552.0 m
(            J3..8\\r J3-,\)\\r J3+\)9\\r K3\)'*\\r J3\(\(0\\r l3&';\\r)s 543.5 m
(            :####\\r)s 535.0 m
(            \\{%5000)s 526.5 m
(            [use key `o' to overplot]\\})s 518.0 m
(            ^U\\177)s 509.5 m
(            o3&';\\r)s 501.0 m
(            K3&';\\r K3%*\(\\r K3#,3\\r l3!.?\\r)s 492.5 m
(            :####\\r)s 484.0 m
(            \\{%5000)s 475.5 m
(            [key `X' expands the plot in x]\\})s 467.0 m
(            ^U\\177)s 458.5 m
(            X3!.?\\r)s 450.0 m
(            qXXXX\\r)s 441.5 m
(            stty\\sreset\\n)s 433.0 m
(    )s 424.5 m
(    )s 416.0 m
(EXAMPLES)s 407.5 m
(    1. Show the current terminal type and attributes.)s 399.0 m
(    )s 390.5 m
(            cl> stty)s 382.0 m
(            Terminal=vt640, ncols=80, nlines=24, 9600 baud)s 373.5 m
(            ucasein=no, ucaseout=no, logio=off)s 365.0 m
(    )s 356.5 m
(    2. Tell the system that the terminal is a vt100.)s 348.0 m
(    )s 339.5 m
(            cl> stty vt100)s 331.0 m
(    )s 322.5 m
(    3. Set the baud rate of the current terminal to 9600 baud.)s 314.0 m
(    )s 305.5 m
(            cl> stty baud=9600)s 297.0 m
(    )s 288.5 m
(    4. Set the width of the screen to 80 columns,  e.g.,  to  get  short)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                 -10-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(STTY \(Feb88\)                    language                    STTY \(Feb88\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    menus  on  a workstation where the physical number of columns may be)s 713.5 m
(    much greater than 80.)s 705.0 m
(    )s 696.5 m
(            cl> stty ncols=80)s 688.0 m
(    )s 679.5 m
(    5. Set the terminal type to 4012 and set ucasein and ucaseout modes.)s 671.0 m
(    )s 662.5 m
(            cl> stty 4012 ucasein ucaseout)s 654.0 m
(    )s 645.5 m
(    6. Clear the ucasein and ucaseout modes.)s 637.0 m
(    )s 628.5 m
(            cl> stty clear ucasein ucaseout)s 620.0 m
(    )s 611.5 m
(    7.   Record   a   terminal   session   in   the   default    logfile  )s 603.0 m
(    \(home$ttyio.log\).)s 594.5 m
(    )s 586.0 m
(            cl> stty logio)s 577.5 m
(    )s 569.0 m
(    8. Record input from the terminal in the file "demo".)s 560.5 m
(    )s 552.0 m
(            cl> stty login=demo)s 543.5 m
(    )s 535.0 m
(    9.  Terminate  logging and playback the terminal session recorded in)s 526.5 m
(    this file.)s 518.0 m
(    )s 509.5 m
(            cl> stty reset)s 501.0 m
(            cl> stty playback=demo)s 492.5 m
(    )s 484.0 m
(BUGS)s 475.5 m
(    1. Note that, when working with a terminal  which  supports  runtime)s 467.0 m
(    querying  of  the  screen  size, the screen size is queried when the)s 458.5 m
(    STTY RESIZE command is  executed,  rather  than  when  the  terminal)s 450.0 m
(    screen  actually  changes  size.   Hence, the screen size parameters)s 441.5 m
(    printed by a command such as STTY SHOW will not necessarily  reflect)s 433.0 m
(    the  actual  screen size.  STTY RESIZE SHOW queries the terminal for)s 424.5 m
(    the screen size, hence should always be correct.   The  screen  size)s 416.0 m
(    is automatically queried whenever the PAGE or HELP tasks are run.)s 407.5 m
(    )s 399.0 m
(    2.  The  terminal screen size is determined by querying the terminal)s 390.5 m
(    for the screen size, and reading the response back  \(this  technique)s 382.0 m
(    has  the  advantage  that  it  works  remotely  over IPC and network)s 373.5 m
(    connections, and is host system independent\).  If the terminal  does)s 365.0 m
(    not  respond  for  some  reason, e.g., because the terminal type has)s 356.5 m
(    been set improperly and the terminal  does  not  support  the  query)s 348.0 m
(    function,  then  STTY  will  hang.   Typing a carriage return causes)s 339.5 m
(    execution to resume, after which the error should be corrected.)s 331.0 m
(    )s 322.5 m
(SEE ALSO)s 314.0 m
(    language.logging, fio$zfiott.x, etc$sttyco.x)s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                 -11-)s 254.5 m
()s S
%%Page: 69 69
/m{18 exch moveto}bind def
756 m
(SWITCH \(Feb86\)                  language                  SWITCH \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    switch -- switch case statement)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    switch \(expr\) {)s 671.0 m
(    case val1 [, val1,...]:)s 662.5 m
(        statements)s 654.0 m
(    case val3 [, val3,...]:)s 645.5 m
(        statements)s 637.0 m
(            \(etc.\))s 628.5 m
(    default:)s 620.0 m
(        statements)s 611.5 m
(    })s 603.0 m
(    )s 594.5 m
(    )s 586.0 m
(ELEMENTS)s 577.5 m
(    )s 569.0 m
(    expr)s 560.5 m
(        An  integer-valued  expression  tested  before  entry  into  the )s 552.0 m
(        switch block.)s 543.5 m
(    )s 535.0 m
(    valN)s 526.5 m
(        Integer valued constants used to match expression.)s 518.0 m
(    )s 509.5 m
(    statements)s 501.0 m
(        Simple   or   compound   statements  to  be  executed  when  the )s 492.5 m
(        appropriate case or default block is selected.)s 484.0 m
(        )s 475.5 m
(        )s 467.0 m
(DESCRIPTION)s 458.5 m
(    The SWITCH statement provides a  multiway  branch  capability.   The)s 450.0 m
(    switch  expression is evaluated and control branches to the matching)s 441.5 m
(    CASE block.  If there is no match the  DEFAULT  block,  if  present,)s 433.0 m
(    receives  control.   If  no  DEFAULT block is present, the switch is)s 424.5 m
(    skipped.)s 416.0 m
(    )s 407.5 m
(    Each CASE statement consists of a list of values defining the  case,)s 399.0 m
(    and  an  executable  statement \(possibly compound\) to be executed if)s 390.5 m
(    the case is selected by the switch.  Execution will  continue  until)s 382.0 m
(    the  next  case is reached, at which time a branch out of the SWITCH)s 373.5 m
(    statement occurs.  Note this difference  from  the  C  switch  case,)s 365.0 m
(    where  an explicit BREAK statement is required to exit a switch.  If)s 356.5 m
(    a BREAK is used in a CL switch, it will act upon the loop  statement)s 348.0 m
(    containing the switch, not the switch itself.)s 339.5 m
(    )s 331.0 m
(    Note  that  both the switch expression and the case constants may be)s 322.5 m
(    integers, or single characters which are evaluated  to  their  ASCII)s 314.0 m
(    equivalents.)s 305.5 m
(    )s 297.0 m
(    The  DEFAULT  statement  must  be  the  last statement in the switch)s 288.5 m
(    block.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(SWITCH \(Feb86\)                  language                  SWITCH \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(EXAMPLES)s 713.5 m
(    1. Multiple cases, no default case.)s 705.0 m
(    )s 696.5 m
(            switch \(opcode\) {)s 688.0 m
(            case 1:)s 679.5 m
(                task1 \(args\))s 671.0 m
(            case 2:)s 662.5 m
(                task2 \(args\))s 654.0 m
(            case 5:)s 645.5 m
(                task5 \(args\))s 637.0 m
(            })s 628.5 m
(    )s 620.0 m
(    2. Multiple values in a case.)s 611.5 m
(    )s 603.0 m
(            switch \(digit\) {)s 594.5 m
(            case '1','2','3','4','5','6','7':)s 586.0 m
(                n = n * 8 + digit - '0')s 577.5 m
(            default:)s 569.0 m
(                error \(1, "invalid number"\))s 560.5 m
(            })s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(BUGS)s 526.5 m
(    Only integer values are allowed \(no strings\).  The case values  must)s 518.0 m
(    be constants; ranges are not permitted.)s 509.5 m
(    )s 501.0 m
(    )s 492.5 m
(SEE ALSO)s 484.0 m
(    if else, goto)s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 70 70
/m{18 exch moveto}bind def
756 m
(TASK \(Apr87\)                    language                    TASK \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    task     -- define a new IRAF task)s 705.0 m
(    redefine -- redefine an IRAF task)s 696.5 m
(    )s 688.0 m
(    )s 679.5 m
(USAGE)s 671.0 m
(    task     t1 [t2 ...] = tfile)s 662.5 m
(    redefine t1 [t2 ...] = tfile)s 654.0 m
(    )s 645.5 m
(    )s 637.0 m
(PARAMETERS)s 628.5 m
(    )s 620.0 m
(    t1, t2, ...)s 611.5 m
(        The  names  of  the  new logical tasks.  The task name should be)s 603.0 m
(        prefixed by a $ if the task has no parameter file.  An  optional)s 594.5 m
(        extension  should  be  appended  if either the standard input or)s 586.0 m
(        output of the task is a binary stream, rather  than  text.   For)s 577.5 m
(        example,  "$mytask.tb"  denotes a task with no parameter file, a)s 569.0 m
(        text standard input, and a binary standard output.)s 560.5 m
(    )s 552.0 m
(    tfile)s 543.5 m
(        The name of the file to be executed or interpreted  to  run  the)s 535.0 m
(        task.    The  type  of  the  task  is  determined  by  the  file )s 526.5 m
(        extension.  An ".e"  extension  indicates  an  executable  task,)s 518.0 m
(        while  ".cl" indicates a CL script task or procedure.  The TFILE)s 509.5 m
(        string is prefixed by a $ to define  a  FOREIGN  TASK  \(see  the)s 501.0 m
(        discussion below\).)s 492.5 m
(    )s 484.0 m
(    )s 475.5 m
(DESCRIPTION)s 467.0 m
(    The  TASK  statement  defines  a new task to the CL, and is required)s 458.5 m
(    before the task can be run from the CL.  The new task  is  added  to)s 450.0 m
(    the  "current package", i.e., the package that is listed when "?" is)s 441.5 m
(    entered.  Any task definitions made since the  current  package  was)s 433.0 m
(    entered will be discarded when the package is exited.)s 424.5 m
(    )s 416.0 m
(    In  addition  to defining a new task, the TASK statement defines the)s 407.5 m
(    type and attributes of the new task.  Three types of  tasks  can  be)s 399.0 m
(    defined:  script \(.cl\), executable \(.e\), and foreign \($...\).  A task)s 390.5 m
(    is assumed to have a parameter file  \("taskname.par",  in  the  same)s 382.0 m
(    directory  as  TFILE\), unless the taskname is explicitly prefixed by)s 373.5 m
(    a $.  A suffix or extension may optionally  be  added  to  the  task)s 365.0 m
(    name  to  indicate  whether the input and output streams are text or)s 356.5 m
(    binary.  The default is text, meaning that if output \(or  input\)  is)s 348.0 m
(    redirected to a file, the file will be opened as a text file.)s 339.5 m
(    )s 331.0 m
(    The  FOREIGN  TASK  facility  allows  host  system tasks, e.g., host)s 322.5 m
(    utilities or user written Fortran or C programs, to be  called  from)s 314.0 m
(    the  CL  as  if they were regular IRAF tasks.  The command line of a)s 305.5 m
(    foreign task is parsed like that of any other task  \(and  unlike  an)s 297.0 m
(    OS  escape\),  allowing  expression  evaluation, i/o redirection, and)s 288.5 m
(    background job submission.  The difference between  a  regular  IRAF)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(TASK \(Apr87\)                    language                    TASK \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    task  and a foreign task is that the foreign tasks have little or no)s 713.5 m
(    access to  IRAF  facilities,  are  usually  machine  dependent  \(and)s 705.0 m
(    programs  which  use  them  are  machine  dependent\),  and cannot be)s 696.5 m
(    cached.  Nonetheless the foreign task facility is  very  useful  for)s 688.0 m
(    personalizing  and  extending the IRAF environment with a minimum of)s 679.5 m
(    effort.)s 671.0 m
(    )s 662.5 m
(    The TASK statement includes facilities for  defining  how  the  host)s 654.0 m
(    system  argument list for a foreign task will be built when the task)s 645.5 m
(    is called from the CL.   The  simplest  form  of  the  foreign  task)s 637.0 m
(    statement is the following:)s 628.5 m
(    )s 620.0 m
(            task [$]taskname = "$host_command_prefix")s 611.5 m
(    )s 603.0 m
(    where  HOST_COMMAND_PREFIX  is  the first part of the command string)s 594.5 m
(    to be passed to the host system.  Any  command  line  arguments  are)s 586.0 m
(    simply tacked onto the end of this string, delimited by blanks.)s 577.5 m
(    )s 569.0 m
(    If  this  is  insufficient then argument substitution may be used to)s 560.5 m
(    define how the argument list is  to  be  built  up.   The  macro  $N)s 552.0 m
(    denotes  argument  N  from  the  CL  command  line,  with  the first)s 543.5 m
(    argument being number 1.  The macro $0 is a  special  case,  and  is)s 535.0 m
(    replaced  the name of the task being executed.  Likewise, $* denotes)s 526.5 m
(    all arguments.  If the character following  the  $  is  enclosed  in)s 518.0 m
(    parenthesis,  the  corresponding  argument string will be treated as)s 509.5 m
(    an IRAF virtual filename, with the equivalent host  system  filename)s 501.0 m
(    being  substituted for use in the host command.  Any other character)s 492.5 m
(    sequences  are  passed  on  unchanged.   The  argument  substitution )s 484.0 m
(    macros are summarized in the table below.)s 475.5 m
(    )s 467.0 m
(            $0              task name)s 458.5 m
(            $N              argument N)s 450.0 m
(            $*              all arguments)s 441.5 m
(            $\(...\)          host system filename translation of "...")s 433.0 m
(    )s 424.5 m
(    When a task is invoked, an executable is run by starting an attached)s 416.0 m
(    sub-process, while a script is run by starting a new level of the CL)s 407.5 m
(    with its standard input set to the script file.)s 399.0 m
(    )s 390.5 m
(    An  executable  image may contain any number of executable CL tasks,)s 382.0 m
(    hence it can be pointed to by multiple task  names  or  in  multiple)s 373.5 m
(    TASK statements.  A script file can only contain one script task.)s 365.0 m
(    )s 356.5 m
(    REDEFINE  has  the same syntax as the TASK command, but all the task)s 348.0 m
(    names must already be defined in the current package.  It  is  often)s 339.5 m
(    useful after misspelling the task file name in a task command.)s 331.0 m
(    )s 322.5 m
(    )s 314.0 m
(EXAMPLES)s 305.5 m
(    1.  Call  up  the  editor  to  create a new program \(task\) mytask.x.)s 297.0 m
(    Compile the new program.  Declare it using the  task  statement  and)s 288.5 m
(    then run it.)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s S
%%Page: 71 71
/m{18 exch moveto}bind def
756 m
(TASK \(Apr87\)                    language                    TASK \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(            cl> edit mytask.x                       # edit)s 713.5 m
(            cl> xc mytask.x                         # compile & link)s 705.0 m
(            cl> task $mytask = mytask.e             # define task)s 696.5 m
(            cl> mytask arg1 arg2                    # run it)s 688.0 m
(    )s 679.5 m
(    2.  Define  a  script  task  with  associated parameter file \(if the)s 671.0 m
(    script  is  a  PROCEDURE,  the  parameter  file  is  omitted   since )s 662.5 m
(    procedure scripts always have defined parameters\).)s 654.0 m
(    )s 645.5 m
(            cl> task myscript = myscript.cl)s 637.0 m
(    )s 628.5 m
(    3. Define the four new tasks implot, graph, showcap, and gkiextract.)s 620.0 m
(    All have parameter files except showcap.  The gkiextract task has  a)s 611.5 m
(    binary  output  stream.   All tasks are executable and are stored in)s 603.0 m
(    the executable file "plot$x_plot.e".  Note the use of comma argument)s 594.5 m
(    delimiters  in this example; this is a compute mode example as would)s 586.0 m
(    be found in a package script task.)s 577.5 m
(    )s 569.0 m
(            task    implot,                 # compute mode syntax)s 560.5 m
(                    graph,)s 552.0 m
(                    $showcap,)s 543.5 m
(                    gkiextract.tb   = "plot$x_plot.e")s 535.0 m
(    )s 526.5 m
(    4. Make the listed UNIX programs available in the  IRAF  environment)s 518.0 m
(    as  foreign  tasks.   None  of  the tasks has a parameter file.  The)s 509.5 m
(    "$foreign" declares the tasks as foreign,  and  indicates  that  the)s 501.0 m
(    IRAF task name is the same as the host system task name.)s 492.5 m
(    )s 484.0 m
(            cl> task $ls $od $rlogin = $foreign)s 475.5 m
(    )s 467.0 m
(    5.  Define  a  couple of foreign tasks for VMS, where the command to)s 458.5 m
(    be sent to VMS is not the same as the IRAF task name.)s 450.0 m
(    )s 441.5 m
(            cl> task $run   = $run/nodebug)s 433.0 m
(            cl> task $debug = $run/debug)s 424.5 m
(            cl> task $top   = "$show proc/topcpu")s 416.0 m
(    )s 407.5 m
(    )s 399.0 m
(BUGS)s 390.5 m
(    The distinction between command  and  compute  mode  syntax  can  be)s 382.0 m
(    confusing.   When  defining  tasks  in your login.cl or in a package)s 373.5 m
(    script task, use compute mode, with  commas  between  the  arguments)s 365.0 m
(    and  all  strings  quoted  \(there  are  plenty  of  examples  in the)s 356.5 m
(    system\).  When typing in TASK statements interactively, use  command)s 348.0 m
(    mode.   If  you forget and leave in the commas, they will be assumed)s 339.5 m
(    to be part of the task name, causing  the  following  error  message)s 331.0 m
(    when the task is run:)s 322.5 m
(    )s 314.0 m
(            ERROR: IRAF Main: command syntax error)s 305.5 m
(    )s 297.0 m
(    )s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -3-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(TASK \(Apr87\)                    language                    TASK \(Apr87\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(SEE ALSO)s 713.5 m
(    prcache, flprcache, package)s 705.0 m
()s 696.5 m
()s 688.0 m
()s 679.5 m
()s 671.0 m
()s 662.5 m
()s 654.0 m
()s 645.5 m
()s 637.0 m
()s 628.5 m
()s 620.0 m
()s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -4-)s 254.5 m
()s S
%%Page: 72 72
/m{18 exch moveto}bind def
756 m
(TIME \(Feb86\)                    language                    TIME \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    time -- display the current time)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    time)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(DESCRIPTION)s 645.5 m
(    TIME writes the current time and date on the standard output.)s 637.0 m
(    )s 628.5 m
(    )s 620.0 m
(EXAMPLE)s 611.5 m
(    cl> time)s 603.0 m
(    Fri 12:50:29 14-Feb-86)s 594.5 m
(    )s 586.0 m
(    )s 577.5 m
(SEE ALSO)s 569.0 m
(    sleep, wait, jobs)s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(UNLEARN \(Feb86\)                 language                 UNLEARN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    unlearn -- restore initial defaults for parameters)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    unlearn name [name ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    name)s 628.5 m
(        An IRAF task or package name.)s 620.0 m
(        )s 611.5 m
(        )s 603.0 m
(DESCRIPTION)s 594.5 m
(    Normally  when  a  task terminates the values of the query mode task)s 586.0 m
(    parameters used are stored in the parameter file on disk,  appearing)s 577.5 m
(    as  the  new  defaults  the  next time the task is run.  The UNLEARN)s 569.0 m
(    command instructs the CL to forget  any  task  parameters  it  might)s 560.5 m
(    have  learned  and  to  use the initial default values the next time)s 552.0 m
(    the task is run.  If a tasks parameters have been cached, then  they)s 543.5 m
(    are removed from the parameter cache.)s 535.0 m
(    )s 526.5 m
(    If  a  package  name  is  specified all the tasks in the package are)s 518.0 m
(    unlearned.)s 509.5 m
(    )s 501.0 m
(    )s 492.5 m
(EXAMPLES)s 484.0 m
(    1. Unlearn the parameters for the delete and plot.graph tasks.)s 475.5 m
(    )s 467.0 m
(            cl> unlearn delete plot.graph)s 458.5 m
(    )s 450.0 m
(    2. Unlearn the parameters for all tasks in the DATAIO package.)s 441.5 m
(    )s 433.0 m
(            cl> unlearn dataio)s 424.5 m
(    )s 416.0 m
(    3. To unlearn the parameters for all tasks in the  system,  log  out)s 407.5 m
(    of the CL and run MKIRAF, or enter the following:)s 399.0 m
(    )s 390.5 m
(            cl> chdir uparm)s 382.0 m
(            cl> delete *.par)s 373.5 m
(    )s 365.0 m
(    )s 356.5 m
(BUGS)s 348.0 m
(    It is possible for the parameter set for a task to become corrupted,)s 339.5 m
(    e.g., if the CL is interrupted while it is  updating  the  parameter)s 331.0 m
(    file  on  disk,  causing  a  truncated  file to be written.  If this)s 322.5 m
(    should occur one will get error messages complaining  about  illegal)s 314.0 m
(    arguments  or parameters not found when the task is run.  The fix is)s 305.5 m
(    to "unlearn" the parameters for the task.)s 297.0 m
(    )s 288.5 m
(    When the CL fetches the parameters for a task, it checks to  see  if)s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 73 73
/m{18 exch moveto}bind def
756 m
(UNLEARN \(Feb86\)                 language                 UNLEARN \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(    the  system defaults have been updated more recently than the user's)s 713.5 m
(    copy of the parameter set, and uses the system copy if  it  is  more)s 705.0 m
(    recent,  after printing a message to warn the user.  This is done by)s 696.5 m
(    comparing the file dates for the system  and  user  parameter  sets.)s 688.0 m
(    On  VMS,  it  is  easy for the modify date of the system copy of the)s 679.5 m
(    parameter set to become updated even though the file  data  has  not)s 671.0 m
(    been  modified,  causing  an  annoying warning message to be printed)s 662.5 m
(    when the task is later run.  Should this occur,  the  best  solution)s 654.0 m
(    is to unlearn all affected parameter sets.)s 645.5 m
(    )s 637.0 m
(    )s 628.5 m
(SEE ALSO)s 620.0 m
(    cache, update, lparam, eparam)s 611.5 m
()s 603.0 m
()s 594.5 m
()s 586.0 m
()s 577.5 m
()s 569.0 m
()s 560.5 m
()s 552.0 m
()s 543.5 m
()s 535.0 m
()s 526.5 m
()s 518.0 m
()s 509.5 m
()s 501.0 m
()s 492.5 m
()s 484.0 m
()s 475.5 m
()s 467.0 m
()s 458.5 m
()s 450.0 m
()s 441.5 m
()s 433.0 m
()s 424.5 m
()s 416.0 m
()s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -2-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(UPDATE \(Feb86\)                  language                  UPDATE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    update -- update the parameters for a task on disk)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    update task [task ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    task)s 628.5 m
(        An IRAF task name.)s 620.0 m
(        )s 611.5 m
(        )s 603.0 m
(DESCRIPTION)s 594.5 m
(    Normally  when  a  task terminates the values of the task parameters)s 586.0 m
(    used are stored for the next invocation of the task in a  disk  file)s 577.5 m
(    in  the  users UPARM directory.  However if the task parameters have)s 569.0 m
(    been cached by the CACHE command, this will not be  done  until  the)s 560.5 m
(    CL  terminates.  In the case of a background job, automatic updating)s 552.0 m
(    of parameters is disabled.  The UPDATE command is used to force  the)s 543.5 m
(    parameters for a task to be updated on disk.)s 535.0 m
(    )s 526.5 m
(    )s 518.0 m
(EXAMPLE)s 509.5 m
(    1. Update the parameters for the PAGE task.)s 501.0 m
(    )s 492.5 m
(            cl> update page)s 484.0 m
(    )s 475.5 m
(    )s 467.0 m
(BUGS)s 458.5 m
(    The  parameter  set  is only updated on disk if a parameter has been)s 450.0 m
(    modified since the last update.)s 441.5 m
(    )s 433.0 m
(    )s 424.5 m
(SEE ALSO)s 416.0 m
(    cache, unlearn)s 407.5 m
()s 399.0 m
()s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s S
%%Page: 74 74
/m{18 exch moveto}bind def
756 m
(WAIT \(Feb86\)                    language                    WAIT \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    wait -- wait for a background job to terminate)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(USAGE)s 679.5 m
(    wait [job job ...])s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(PARAMETERS)s 645.5 m
(    )s 637.0 m
(    job A background job number, as printed when the job  is  submitted,)s 628.5 m
(        or as given by the JOBS command.)s 620.0 m
(    )s 611.5 m
(    )s 603.0 m
(DESCRIPTION)s 594.5 m
(    The  WAIT  task causes the CL to hibernate until a background job or)s 586.0 m
(    jobs terminates.  No arguments, or a job number of 0 means  to  wait)s 577.5 m
(    until  all  background  jobs  finish,  while  other arguments can be)s 569.0 m
(    specified to wait for a particular job.  If a background job is  not)s 560.5 m
(    running the wait returns immediately.)s 552.0 m
(    )s 543.5 m
(    )s 535.0 m
(EXAMPLES)s 526.5 m
(    1.  Wait  for  any  background  jobs to finish, beeping the terminal)s 518.0 m
(    when done.)s 509.5 m
(    )s 501.0 m
(            cl> wait;beep)s 492.5 m
(    )s 484.0 m
(    2. Wait for job 3 to terminate.)s 475.5 m
(    )s 467.0 m
(            cl> wait 3)s 458.5 m
(    )s 450.0 m
(    )s 441.5 m
(BUGS)s 433.0 m
(    Deadlock is possible.)s 424.5 m
(    )s 416.0 m
(    )s 407.5 m
(SEE ALSO)s 399.0 m
(    jobs, kill, service)s 390.5 m
()s 382.0 m
()s 373.5 m
()s 365.0 m
()s 356.5 m
()s 348.0 m
()s 339.5 m
()s 331.0 m
()s 322.5 m
()s 314.0 m
()s 305.5 m
()s 297.0 m
()s 288.5 m
()s 280.0 m
()s 271.5 m
()s 263.0 m
(                                  -1-)s 254.5 m
()s 
/m{410 exch moveto}bind def
756 m
(WHILE \(Feb86\)                   language                   WHILE \(Feb86\))s 747.5 m
()s 739.0 m
()s 730.5 m
()s 722.0 m
(NAME)s 713.5 m
(    while -- while loop construct)s 705.0 m
(    )s 696.5 m
(    )s 688.0 m
(SYNTAX)s 679.5 m
(    while \(expression\) statement)s 671.0 m
(    )s 662.5 m
(    )s 654.0 m
(ELEMENTS)s 645.5 m
(    )s 637.0 m
(    while)s 628.5 m
(        Required keyword.)s 620.0 m
(    )s 611.5 m
(    expression)s 603.0 m
(        A boolean valued expression tested before each iteration.)s 594.5 m
(    )s 586.0 m
(    statement)s 577.5 m
(        A  statement  \(possibly  compound\)  to  be  executed   in   each )s 569.0 m
(        iteration of the loop.)s 560.5 m
(    )s 552.0 m
(    )s 543.5 m
(DESCRIPTION)s 535.0 m
(    The  WHILE loop executes the enclosed statements while the specified)s 526.5 m
(    condition is true.)s 518.0 m
(    )s 509.5 m
(    )s 501.0 m
(EXAMPLES)s 492.5 m
(    1. An infinite loop.)s 484.0 m
(    )s 475.5 m
(            while \(yes\) {)s 467.0 m
(                sleep 30)s 458.5 m
(                time)s 450.0 m
(            })s 441.5 m
(    )s 433.0 m
(    2. Type a file.)s 424.5 m
(    )s 416.0 m
(            list = "home$login.cl")s 407.5 m
(            while \(fscan \(list, line\) != EOF\))s 399.0 m
(                print \(line\))s 390.5 m
(    )s 382.0 m
(    )s 373.5 m
(SEE ALSO)s 365.0 m
(    for, case, break, next)s 356.5 m
() S
%%Trailer
%%Pages: 74
